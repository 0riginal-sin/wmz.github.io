<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>maven的tomcat插件</title>
    <url>/2021/03/20/1.maven%E7%9A%84tomcat%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="1-maven的tomcat插件"><a href="#1-maven的tomcat插件" class="headerlink" title="1.maven的tomcat插件"></a>1.maven的tomcat插件</h1><h2 id="1-1-配置tomcat插件"><a href="#1-1-配置tomcat插件" class="headerlink" title="1.1.配置tomcat插件"></a>1.1.配置tomcat插件</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span>    </span><br><span class="line"><span class="comment">&lt;!--tomcat的插件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">port</span>&gt;</span>8080<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="1-2-启动项目"><a href="#1-2-启动项目" class="headerlink" title="1.2.启动项目"></a>1.2.启动项目</h2><p><img src="1.maven%E7%9A%84tomcat%E6%8F%92%E4%BB%B6.assets/1609810334421.png" alt="1609810334421"></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>HelloServlet</title>
    <url>/2021/03/22/HelloServlet/</url>
    <content><![CDATA[<h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><h3 id="servlet简介"><a href="#servlet简介" class="headerlink" title="servlet简介"></a>servlet简介</h3><ul>
<li>servlet就是sun公司开发动态web的一门技术</li>
<li>sun在这些API中提供的一个接口：servlet，如果你想开发一个servlet程序，只要完成两个小步骤：<ul>
<li>编写一个接口类，实现servlet接口</li>
<li>把开发好的java类部署到web服务其中</li>
</ul>
</li>
</ul>
<p>把实现了servlet接口的java程序叫做   <strong>servlet</strong></p>
<span id="more"></span>

<h3 id="helloServlet"><a href="#helloServlet" class="headerlink" title="helloServlet"></a>helloServlet</h3><ol>
<li> 搭建项目</li>
</ol>
<p><img src="HelloServlet.assets/helloservlet%E5%B7%A5%E7%A8%8B%E5%88%9B%E5%BB%BA.png" alt="helloservlet工程创建"></p>
<p><img src="HelloServlet.assets/helloservlet%E5%B7%A5%E7%A8%8B%E6%90%AD%E5%BB%BA1.png" alt="helloservlet工程搭建1"></p>
<p><img src="HelloServlet.assets/%E6%90%AD%E5%BB%BA%E6%88%90%E5%8A%9F.png" alt="搭建成功"></p>
<p>这样我们就搭建完成了</p>
<p><strong>编写一个servlet程序：</strong></p>
<ol>
<li>在HelloServlet项目的pom文件中导入servlet的依赖</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- servlet依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>然后再编写一个普通类</li>
<li>实现servlet接口，我们这里直接继承HttpServlet</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//由于get或者post只是请求实现的不同的方式，可以互相调用，业务逻辑都一样</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//ServletOutputStream outputStream = response.getOutputStream();</span></span><br><span class="line">        PrintWriter writer = response.getWriter();<span class="comment">//响应流</span></span><br><span class="line">        writer.println(<span class="string">&quot;Hello Servlet&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><p>编写servlet的映射</p>
<p>为什么需要映射： 我们写的是JAVA程序，但是要通过浏览器访问，而浏览器需要连接web服务器，所以我们需要再web服务中注册我们写的Servlet，还需要给他一个浏览器能够访问的路径</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">web.xml配置文件 </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 注册Servlet --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.service.hello.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- servlet请求路径 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>配置tomcat服务器</p>
<ul>
<li>注意项目发布的路路径</li>
</ul>
</li>
<li><p>启动测试</p>
</li>
</ol>
<h2 id="Servlet运行原理"><a href="#Servlet运行原理" class="headerlink" title="Servlet运行原理"></a>Servlet运行原理</h2><p><img src="HelloServlet.assets/Servlet%E8%AF%B7%E6%B1%82%E5%8E%9F%E7%90%86.png" alt="Servlet请求原理"></p>
<h2 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h2><p>web容器在启动的时候，它会为每个web程序都创建一个对应的ServletContext对象，它代表当前的web应用，</p>
<ul>
<li>共享数据<ul>
<li>我在这个Servlet保存的数据，可以在另一个Servlet中拿到</li>
</ul>
</li>
</ul>
<h2 id="HttpSrevletResponse"><a href="#HttpSrevletResponse" class="headerlink" title="HttpSrevletResponse"></a>HttpSrevletResponse</h2><p>web服务器接收到客户端的http请求，针对这个请求，分别创建一个代表请求的HTTPServletRequest对象，代表响应的一个HTTPServletResponse</p>
<ul>
<li>如果要获取客户端发送过来的请求参数：找HTTPServletRequest</li>
<li>如果要给客户端响应一些信息：找HTTPServletResponse</li>
</ul>
<h3 id="1-简单分类"><a href="#1-简单分类" class="headerlink" title="1.简单分类"></a>1.简单分类</h3><p><strong>负责向浏览器发送数据的方法</strong></p>
<p>* </p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>javaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis关联映射</title>
    <url>/2021/03/20/MyBatis%E5%85%B3%E8%81%94%E6%98%A0%E5%B0%84/</url>
    <content><![CDATA[<h1 id="1-关联映射-多表查询"><a href="#1-关联映射-多表查询" class="headerlink" title="1.关联映射(多表查询)"></a>1.关联映射(多表查询)</h1><p>数据库中多表之间存在着三种关系，如图所示。<br><img src="https://img-blog.csdnimg.cn/20190904174614140.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">多对多： 程序员&lt;------&gt;项目     用户---------&gt;角色</span><br><span class="line">一对多:   班级------&gt;学生      学校------&gt;班级      帅哥-----&gt;多个女朋友     土豪---多辆豪车</span><br><span class="line">一对一:   学生-----&gt;学位证     人------&gt;DNA        公民----身份证           房子--产权证</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>从图可以看出，系统设计的三种实体关系分别为：多对多、一对多和一对一关系。注意：一对多关系可以看为两种：  即一对多，多对一。</p>
<blockquote>
<p>现实生活中实体和实体之间的关系：  一对多     多对多    一对一</p>
</blockquote>
<p>关系：<strong>是双向的！！</strong></p>
<h1 id="2-关联映射作用"><a href="#2-关联映射作用" class="headerlink" title="2.关联映射作用"></a>2.关联映射作用</h1><p>在现实的项目中进行数据库建模时，我们要遵循数据库设计范式的要求，会对现实中的业务模型进行拆分，封装在不同的数据表中，<strong>表与表之间存在着一对多或是多对多的对应关系</strong>。进而，我们对数据库的增删改查操作的主体，也就从<strong>单表变成了多表</strong>。那么Mybatis中是如何实现这种多表关系的映射呢？</p>
<p><strong>查询结果集ResultMap</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">resultMap元素是 MyBatis中最重要最强大的元素。它就是让你远离90%的需要从结果 集中取出数据的JDBC代码的那个东西，而且在一些情形下允许你做一些 JDBC 不支持的事 情。	</span><br><span class="line"></span><br><span class="line">有朋友会问，之前的示例中我们没有用到结果集，不是也可以正确地将数据表中的数据映射到Java对象的属性中吗？是的。这正是resultMap元素设计的初衷，就是简单语句不需要明确的结果映射，而很多复杂语句确实需要描述它们的关系。</span><br></pre></td></tr></table></figure>

<p><strong>resultMap元素中，允许有以下直接子元素：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id － 作用与result相同，同时可以标识出用这个字段值可以区分其他对象实例。可以理解为数据表中的主键，可以定位数据表中唯一一笔记录</span><br><span class="line">result － 将数据表中的字段注入到Java对象属性中</span><br><span class="line"></span><br><span class="line">association － 关联，简单的讲，就是“有一个”关系，如“用户”有一个“帐号”   has a </span><br><span class="line">collection － 集合，顾名思议，就是“有很多”关系，如“客户”有很多“订单”    has many</span><br></pre></td></tr></table></figure>

<p>每个元素的用法及属性我会在下面结合使用进行讲解。</p>
<h1 id="2-一对一关联-了解"><a href="#2-一对一关联-了解" class="headerlink" title="2. 一对一关联(了解)"></a>2. 一对一关联(了解)</h1><h2 id="2-1-需求"><a href="#2-1-需求" class="headerlink" title="2.1. 需求"></a>2.1. 需求</h2><p>根据班级id查询班级信息(带老师的信息)<br><img src="https://img-blog.csdnimg.cn/20190904174839717.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="2-2-创建数据表"><a href="#2-2-创建数据表" class="headerlink" title="2.2.创建数据表"></a>2.2.创建数据表</h2><p>创建一张教师表和班级表，这里我们假设一个老师只负责教一个班，那么老师和班级之间的关系就是一种一对一的关系。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> teacher(</span><br><span class="line">    t_id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT, </span><br><span class="line">    t_name <span class="type">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> class(</span><br><span class="line">    c_id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT, </span><br><span class="line">    c_name <span class="type">VARCHAR</span>(<span class="number">20</span>), </span><br><span class="line">    teacher_id <span class="type">INT</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> class <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> fk_teacher_id <span class="keyword">FOREIGN</span> KEY (teacher_id) <span class="keyword">REFERENCES</span> teacher(t_id);    </span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> teacher(t_name) <span class="keyword">VALUES</span>(<span class="string">&#x27;teacher1&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> teacher(t_name) <span class="keyword">VALUES</span>(<span class="string">&#x27;teacher2&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> class(c_name, teacher_id) <span class="keyword">VALUES</span>(<span class="string">&#x27;class_a&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> class(c_name, teacher_id) <span class="keyword">VALUES</span>(<span class="string">&#x27;class_b&#x27;</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure>
<h2 id="2-3-定义实体类"><a href="#2-3-定义实体类" class="headerlink" title="2.3.定义实体类"></a>2.3.定义实体类</h2><p>1、Teacher类，Teacher类是teacher表对应的实体类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 定义实体类的属性，与teacher表中的字段对应</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id; <span class="comment">// id===&gt;t_id</span></span><br><span class="line">	<span class="keyword">private</span> String name; <span class="comment">// name===&gt;t_name</span></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> id;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;Teacher [id=&quot;</span> + id + <span class="string">&quot;, name=&quot;</span> + name + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>　2、Classes类，Classes类是class表对应的实体类
　</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Classes</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 定义实体类的属性，与class表中的字段对应</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id; <span class="comment">// id===&gt;c_id</span></span><br><span class="line">	<span class="keyword">private</span> String name; <span class="comment">// name===&gt;c_name</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * class表中有一个teacher_id字段，所以在Classes类中定义一个teacher属性，</span></span><br><span class="line"><span class="comment">	 * 用于维护teacher和class之间的一对一关系，通过这个teacher属性就可以知道这个班级是由哪个老师负责的</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> Teacher teacher;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> id;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Teacher <span class="title">getTeacher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> teacher;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTeacher</span><span class="params">(Teacher teacher)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.teacher = teacher;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;Classes [id=&quot;</span> + id + <span class="string">&quot;, name=&quot;</span> + name + <span class="string">&quot;, teacher=&quot;</span> + teacher + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-4-定义sql映射文件classMapper-xml"><a href="#2-4-定义sql映射文件classMapper-xml" class="headerlink" title="2.4.定义sql映射文件classMapper.xml"></a>2.4.定义sql映射文件classMapper.xml</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">  <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.mybatis.mapper.ClassMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        select * from class c, teacher t where c.teacher_id=t.t_id and c.c_id=1</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getClass1&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;ClassResultMap1&quot;</span>&gt;</span></span><br><span class="line">        select * from class c, teacher t where c.teacher_id=t.t_id and c.c_id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 使用resultMap映射实体类和字段之间的一一对应关系 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;Classes&quot;</span> <span class="attr">id</span>=<span class="string">&quot;ClassResultMap1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;c_id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;c_name&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;t_id&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;t_name&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="2-5-编写单元测试类"><a href="#2-5-编写单元测试类" class="headerlink" title="2.5 编写单元测试类"></a>2.5 编写单元测试类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">	Classes c1 = mapper.getClass1(<span class="number">1</span>);</span><br><span class="line">	System.out.println(c1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">	Classes c1 = mapper.getClass2(<span class="number">1</span>);</span><br><span class="line">	System.out.println(c1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-6-MyBatis一对一关联查询总结"><a href="#2-6-MyBatis一对一关联查询总结" class="headerlink" title="2.6 MyBatis一对一关联查询总结"></a>2.6 MyBatis一对一关联查询总结</h2><p>MyBatis中使用association（有一个）标签来解决一对一的关联查询，association标签可用的属性如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">property:对象属性的名称</span><br><span class="line">javaType:对象属性的类型</span><br><span class="line">column:所对应的外键字段名称</span><br><span class="line">select:使用另一个查询封装的结果</span><br></pre></td></tr></table></figure>
<h1 id="2-一对多关联（重点）"><a href="#2-一对多关联（重点）" class="headerlink" title="2. 一对多关联（重点）"></a>2. 一对多关联（重点）</h1><p><img src="https://img-blog.csdnimg.cn/20190904175125956.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/201909041751312.png" alt="在这里插入图片描述"></p>
<h2 id="2-1-需求-1"><a href="#2-1-需求-1" class="headerlink" title="2.1.需求"></a>2.1.需求</h2><p>根据classId查询对应的班级信息,包括学生<br><img src="https://img-blog.csdnimg.cn/20190904175159578.png" alt="在这里插入图片描述"></p>
<h2 id="2-2-定义实体类"><a href="#2-2-定义实体类" class="headerlink" title="2.2.定义实体类"></a>2.2.定义实体类</h2><p>1、Student类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 学生实体</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">long</span> sId;</span><br><span class="line">  <span class="keyword">private</span> String sName;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">long</span> sAge;</span><br><span class="line">  <span class="keyword">private</span> String sEmail;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">long</span> classId;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//额外准备一个班级对象</span></span><br><span class="line">  <span class="keyword">private</span> Classes classes;  <span class="comment">//体现一个学生在一个班级中</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Classes <span class="title">getClasses</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> classes;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setClasses</span><span class="params">(Classes classes)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.classes = classes;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getSId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sId;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSId</span><span class="params">(<span class="keyword">long</span> sId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.sId = sId;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getSName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sName;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSName</span><span class="params">(String sName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.sName = sName;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getSAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sAge;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSAge</span><span class="params">(<span class="keyword">long</span> sAge)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.sAge = sAge;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getSEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sEmail;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSEmail</span><span class="params">(String sEmail)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.sEmail = sEmail;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getClassId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> classId;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setClassId</span><span class="params">(<span class="keyword">long</span> classId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.classId = classId;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">            <span class="string">&quot;sId=&quot;</span> + sId +</span><br><span class="line">            <span class="string">&quot;, sName=&#x27;&quot;</span> + sName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&quot;, sAge=&quot;</span> + sAge +</span><br><span class="line">            <span class="string">&quot;, sEmail=&#x27;&quot;</span> + sEmail + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&quot;, classId=&quot;</span> + classId +</span><br><span class="line">            <span class="string">&quot;, classes=&quot;</span> + classes +</span><br><span class="line">            <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、修改Classes类，添加一个List<Student> students属性，使用一个List<Student>集合属性表示班级拥有的学生，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bruceliu.bean;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 班级实体类  1的一方</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Classes</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">long</span> cId;</span><br><span class="line">  <span class="keyword">private</span> String cName;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//表示含义 1个班级下有多个学生</span></span><br><span class="line">  <span class="keyword">private</span> List&lt;Student&gt; students; <span class="comment">//学生集合  多的一方</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getCId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> cId;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCId</span><span class="params">(<span class="keyword">long</span> cId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.cId = cId;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getCName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> cName;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCName</span><span class="params">(String cName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.cName = cName;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">getStudents</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> students;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStudents</span><span class="params">(List&lt;Student&gt; students)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.students = students;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Classes&#123;&quot;</span> +</span><br><span class="line">            <span class="string">&quot;cId=&quot;</span> + cId +</span><br><span class="line">            <span class="string">&quot;, cName=&#x27;&quot;</span> + cName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&quot;, students=&quot;</span> + students +</span><br><span class="line">            <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-3-修改sql映射文件classMapper-xml"><a href="#2-3-修改sql映射文件classMapper-xml" class="headerlink" title="2.3.修改sql映射文件classMapper.xml"></a>2.3.修改sql映射文件classMapper.xml</h2><p>添加如下的SQL映射信息</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.bruceliu.mapper.ClassesMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置1对多 结果集映射--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;classMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Classes&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--主键--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;cId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;C_ID&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;cName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;c_name&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--配置一个包含关系 “有很多”关系 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;students&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;sId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;s_id&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;s_name&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sAge&quot;</span> <span class="attr">column</span>=<span class="string">&quot;s_age&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sEmail&quot;</span> <span class="attr">column</span>=<span class="string">&quot;s_email&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;classId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;class_id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;classMap&quot;</span>&gt;</span></span><br><span class="line">        SELECT C.*,S.* FROM classes C INNER JOIN student S on C.c_id=S.class_id where C.c_id=#&#123;classId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="2-4-编写单元测试类"><a href="#2-4-编写单元测试类" class="headerlink" title="2.4. 编写单元测试类"></a>2.4. 编写单元测试类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bruceliu.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bruceliu.bean.Classes;</span><br><span class="line"><span class="keyword">import</span> com.bruceliu.mapper.ClassesMapper;</span><br><span class="line"><span class="keyword">import</span> com.bruceliu.utils.MyBatisUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.junit.After;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> bruceliu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019-07-09 10:06</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 测试1对多</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestOne2Many</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    SqlSession session=<span class="keyword">null</span>;</span><br><span class="line">    ClassesMapper classesMapper=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        session = MyBatisUtils.getSession();</span><br><span class="line">        classesMapper = session.getMapper(ClassesMapper.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Classes c = classesMapper.getById(<span class="number">1L</span>);</span><br><span class="line">        System.out.println(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destory</span><span class="params">()</span></span>&#123;</span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-5-MyBatis一对多关联查询总结"><a href="#2-5-MyBatis一对多关联查询总结" class="headerlink" title="2.5. MyBatis一对多关联查询总结"></a>2.5. MyBatis一对多关联查询总结</h2><p>MyBatis中使用collection标签来解决一对多的关联查询，ofType属性指定集合中元素的对象类型。</p>
<h1 id="3-多对多关联（重点）"><a href="#3-多对多关联（重点）" class="headerlink" title="3. 多对多关联（重点）"></a>3. 多对多关联（重点）</h1><h2 id="3-1-需求"><a href="#3-1-需求" class="headerlink" title="3.1 需求"></a>3.1 需求</h2><p><img src="https://img-blog.csdnimg.cn/20190904175443864.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/201909041754495.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="3-2-准备SQL语句"><a href="#3-2-准备SQL语句" class="headerlink" title="3.2. 准备SQL语句"></a>3.2. 准备SQL语句</h2><p><img src="https://img-blog.csdnimg.cn/20190904175505552.png" alt="在这里插入图片描述"></p>
<h2 id="3-3-User实体类"><a href="#3-3-User实体类" class="headerlink" title="3.3 User实体类"></a>3.3 User实体类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bruceliu.bean;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">long</span> uId;</span><br><span class="line">  <span class="keyword">private</span> String uName;</span><br><span class="line">  <span class="keyword">private</span> String uSex;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">long</span> uAge;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> List&lt;Role&gt; roles; <span class="comment">//一个用户下面多个角色</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getUId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> uId;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUId</span><span class="params">(<span class="keyword">long</span> uId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.uId = uId;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getUName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> uName;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUName</span><span class="params">(String uName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.uName = uName;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getUSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> uSex;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUSex</span><span class="params">(String uSex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.uSex = uSex;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getUAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> uAge;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUAge</span><span class="params">(<span class="keyword">long</span> uAge)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.uAge = uAge;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> List&lt;Role&gt; <span class="title">getRoles</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> roles;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoles</span><span class="params">(List&lt;Role&gt; roles)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.roles = roles;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">            <span class="string">&quot;uId=&quot;</span> + uId +</span><br><span class="line">            <span class="string">&quot;, uName=&#x27;&quot;</span> + uName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&quot;, uSex=&#x27;&quot;</span> + uSex + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&quot;, uAge=&quot;</span> + uAge +</span><br><span class="line">            <span class="string">&quot;, roles=&quot;</span> + roles +</span><br><span class="line">            <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-4-Role实体类"><a href="#3-4-Role实体类" class="headerlink" title="3.4 Role实体类"></a>3.4 Role实体类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bruceliu.bean;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Role</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">long</span> rId;</span><br><span class="line">  <span class="keyword">private</span> String rName;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getRId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> rId;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRId</span><span class="params">(<span class="keyword">long</span> rId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.rId = rId;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getRName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> rName;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRName</span><span class="params">(String rName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.rName = rName;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Role&#123;&quot;</span> +</span><br><span class="line">            <span class="string">&quot;rId=&quot;</span> + rId +</span><br><span class="line">            <span class="string">&quot;, rName=&#x27;&quot;</span> + rName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-5-UserMapper"><a href="#3-5-UserMapper" class="headerlink" title="3.5 UserMapper"></a>3.5 UserMapper</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bruceliu.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bruceliu.bean.User;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> bruceliu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019-07-09 11:10</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.根据ID查询user(同时关联查询一下role集合信息)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUserByid</span><span class="params">(<span class="keyword">long</span> uid)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-6-UserMapper-xml"><a href="#3-6-UserMapper-xml" class="headerlink" title="3.6 UserMapper.xml"></a>3.6 UserMapper.xml</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.bruceliu.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;uId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;u_id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;uAge&quot;</span> <span class="attr">column</span>=<span class="string">&quot;u_age&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;uName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;u_name&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;uSex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;u_sex&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--一个用户多个角色--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;roles&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Role&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;rId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;r_id&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;rName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;r_name&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByid&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userMap&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM `user` U INNER JOIN role_user RU ON U.u_id=RU.uu__id INNER JOIN role R ON RU.rr_id=R.r_id</span><br><span class="line">where U.u_id=#&#123;uid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="3-7-测试"><a href="#3-7-测试" class="headerlink" title="3.7 测试"></a>3.7 测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bruceliu.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bruceliu.bean.Student;</span><br><span class="line"><span class="keyword">import</span> com.bruceliu.bean.User;</span><br><span class="line"><span class="keyword">import</span> com.bruceliu.mapper.StudentMapper;</span><br><span class="line"><span class="keyword">import</span> com.bruceliu.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.bruceliu.utils.MyBatisUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.junit.After;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> bruceliu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019-07-09 11:20</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TesMany2Many</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    SqlSession session=<span class="keyword">null</span>;</span><br><span class="line">    UserMapper userMapper=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        session = MyBatisUtils.getSession();</span><br><span class="line">        userMapper = session.getMapper(UserMapper.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *   测试根据人查询所属的角色集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User user = userMapper.getUserByid(<span class="number">1</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destory</span><span class="params">()</span></span>&#123;</span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC概述</title>
    <url>/2021/03/20/SpringMVC%E4%B8%93%E9%A2%98(%E4%B8%80)-SpringMVC%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<p>[TOC]</p>
<h3 id="1-关于三层架构和-MVC"><a href="#1-关于三层架构和-MVC" class="headerlink" title="1.关于三层架构和 MVC"></a>1.关于三层架构和 MVC</h3><h5 id="1-1-三层架构"><a href="#1-1-三层架构" class="headerlink" title="1.1.三层架构"></a>1.1.三层架构</h5><p>我们的开发架构一般都是基于两种形式，一种是 C/S 架构，也就是客户端/服务器，另一种是 B/S 架构，也就是浏览器服务器。在 JavaEE 开发中，几乎全都是基于 B/S 架构的开发。那么在 B/S 架构中，系统标准的三层架构.包括：表现层、业务层、持久层。三层架构在我们的实际开发中使用的非常多，所以我们课程中的案例也都是基于三层架构设计的。三层架构中，每一层各司其职，接下来我们就说说每层都负责哪些方面：</p>
<span id="more"></span>

<blockquote>
<p>c/s:   客户端/服务器   QQ  微信   优酷  酷狗</p>
<p>B/s:  浏览器/服务器  web站点   淘宝 京东   天猫   </p>
</blockquote>
<ul>
<li>表现层：<br>也就是我们常说的web层。它负责接收客户端请求，向客户端响应结果，通常客户端使用http协议请求web 层，web 需要接收 http 请求，完成 http 响应。表现层包括展示层和控制层：控制层负责接收请求，展示层负责结果的展示。表现层依赖业务层，接收到客户端请求一般会调用业务层进行业务处理，并将处理结果响应给客户端。表现层的设计一般都使用 MVC 模型。（MVC 是表现层的设计模型，和其他层没有关系）</li>
<li>业务层：<br>也就是我们常说的 service 层。它负责业务逻辑处理，和我们开发项目的需求息息相关。web 层依赖业务层，但是业务层不依赖 web 层。<br>业务层在业务处理时可能会依赖持久层，如果要对数据持久化需要保证事务一致性。（也就是我们说的，事务应该放到业务层来控制）</li>
<li>持久层：<br>也就是我们是常说的 dao 层。负责数据持久化，包括数据层即数据库和数据访问层，数据库是对数据进行持久化的载体，数据访问层是业务层和持久层交互的接口，业务层需要通过数据访问层将数据持久化到数据库中。通俗的讲，持久层就是和数据库交互，对数据库表进行曾删改查的。</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20190718170608519.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h5 id="1-2-MVC-模型"><a href="#1-2-MVC-模型" class="headerlink" title="1.2. MVC 模型"></a>1.2. MVC 模型</h5><p>MVC 全名是 Model View Controller，是模型(model)－视图(view)－控制器(controller)的缩写，<br>是一种用于设计创建 Web 应用程序表现层的模式。MVC 中每个部分各司其职：</p>
<ul>
<li>Model（模型）：<br>通常指的就是我们的数据模型。作用一般情况下用于封装数据。</li>
<li>View（视图）：<br>通常指的就是我们的 jsp 或者 html。作用一般就是展示数据的。<br>通常视图是依据模型数据创建的。</li>
<li>Controller（控制器）：<br>是应用程序中处理用户交互的部分。作用一般就是处理程序逻辑的。<br>它相对于前两个不是很好理解，这里举个例子：例如：我们要保存一个用户的信息，该用户信息中包含了姓名，性别，年龄等等。这时候表单输入要求年龄必须是 1~100 之间的整数。姓名和性别不能为空。并且把数据填充到模型之中。此时除了 js 的校验之外，服务器端也应该有数据准确性的校验，那么校验就是控制器的该做的。当校验失败后，由控制器负责把错误页面展示给使用者。如果校验成功，也是控制器负责把数据填充到模型，并且调用业务层实现完整的业务需求。</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20190718170942317.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h5 id="1-3-经典三层架构和MVC的关系"><a href="#1-3-经典三层架构和MVC的关系" class="headerlink" title="1.3.经典三层架构和MVC的关系"></a>1.3.经典三层架构和MVC的关系</h5><p>他们是两个毫无相关的东西，经典三层架构是一种分层思想，将开发模式分为了这三层，每个人根据自己的专长，开发不同的模块，比如，前端工程师，那么就专研表示层即可，想办法如何让页面变的更好看，如何吸引别人，而有些专门做数据库工作的人，就可以只关注操作数据库的活，如何让查询更加快速有效，而不必关注数据该如何显示这种问题。这就是分层带来的巨大好处。<br>而MVC是一种设计模式，目的是让HTML代码和业务逻辑代码分开，让代码看起来更加清晰，便于开发。<br>硬说他们有关系的话，只能说他们有共同的点，分层，解耦。<br>实际项目中的包命名结构，其也是按照三层架构思想来进行编写代码的，脑袋里要保持着这种思想进行开发.<br><img src="https://img-blog.csdnimg.cn/20190718173352556.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>xxx:代表公司名称<br>yyy：代表项目名称</p>
<p>com.xxx.yyy.dao　　　　　　dao层接口<br>com.xxx.yyy.dao.impl　　　　dao层实现<br>com.xxx.yyy.service　　　　  service层接口<br>com.xxx.yyy.service.impl　　  service层实现　　　　　　<br>com.xxx.yyy.web　　　　　　web层<br>com.xxx.yyy.util　　　　　　  工具包<br>com.xxx.yyy.domain　　　　  javabean、pojo、bean、vo、entity</p>
<h3 id="2-SpringMVC-概述"><a href="#2-SpringMVC-概述" class="headerlink" title="2.SpringMVC 概述"></a>2.SpringMVC 概述</h3><h3 id="2-SpringMVC-概述-1"><a href="#2-SpringMVC-概述-1" class="headerlink" title="2.SpringMVC 概述"></a>2.SpringMVC 概述</h3><h4 id="2-1-SpringMVC-是什么"><a href="#2-1-SpringMVC-是什么" class="headerlink" title="2.1.SpringMVC 是什么"></a>2.1.SpringMVC 是什么</h4><p><img src="https://img-blog.csdnimg.cn/20190718171252713.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>SpringMVC 是一种基于 Java 的实现 MVC 设计模型的请求驱动类型的轻量级 Web 框架，属于 Spring FrameWork 的后续产品，已经融合在 Spring Web Flow 里面。Spring 框架提供了构建 Web 应用程序的全功能 MVC 模块。使用 Spring 可插入的 MVC 架构，从而在使用 Spring 进行 WEB 开发时，可以选择使用 Spring的 Spring MVC 框架或集成其他 MVC 开发框架，如 Struts1(现在一般不用)，Struts2 等。</p>
<p>SpringMVC 已经成为目前最主流的 MVC 框架之一，并且随着 Spring3.0 的发布，全面超越 Struts2，成为最优秀的 MVC 框架。它通过一套注解，让一个简单的 Java 类成为处理请求的控制器，而无须实现任何接口。同时它还支持<strong>RESTful 编程风格</strong>的请求。</p>
<h4 id="2-2-SpringMVC-在三层架构的位置"><a href="#2-2-SpringMVC-在三层架构的位置" class="headerlink" title="2.2.SpringMVC 在三层架构的位置"></a>2.2.SpringMVC 在三层架构的位置</h4><p><img src="https://img-blog.csdnimg.cn/20190718171340690.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h4 id="2-3-SpringMVC的优势"><a href="#2-3-SpringMVC的优势" class="headerlink" title="2.3.SpringMVC的优势"></a>2.3.SpringMVC的优势</h4><ul>
<li><p>1.清晰的角色划分：<br>前端控制器（DispatcherServlet）<br>请求到处理器映射（HandlerMapping）<br>处理器适配器（HandlerAdapter）<br>视图解析器（ViewResolver）<br>处理器或页面控制器（Controller）<br>验证器（ Validator）<br>命令对象（Command 请求参数绑定到的对象就叫命令对象）<br>表单对象（Form Object 提供给表单展示和提交到的对象就叫表单对象）。</p>
</li>
<li><p>2.分工明确，而且扩展点相当灵活，可以很容易扩展，虽然几乎不需要。 </p>
</li>
<li><p>3.由于命令对象就是一个 POJO，无需继承框架特定 API，可以使用命令对象直接作为业务对象。 </p>
</li>
<li><p>4.和 Spring 其他框架无缝集成，是其它 Web 框架所不具备的。 </p>
</li>
<li><p>5、可适配，通过 HandlerAdapter 可以支持任意的类作为处理器。</p>
</li>
<li><p>6、可定制性，HandlerMapping、ViewResolver 等能够非常简单的定制。 </p>
</li>
<li><p>7、功能强大的数据验证、格式化、绑定机制。</p>
</li>
<li><p>8、利用 Spring 提供的 Mock 对象能够非常简单的进行 Web 层单元测试。 </p>
</li>
<li><p>9、本地化、主题的解析的支持，使我们更容易进行国际化和主题的切换。</p>
</li>
<li><p>10、强大的 JSP 标签库，使 JSP 编写更容易。<br>还有比如RESTful风格的支持、简单的文件上传、约定大于配置的契约式编程支持、基于注解的零配<br>置支持等等。</p>
<blockquote>
<p><a href="https://www.cnblogs.com/msi-chen/p/10974009.html#_label0">Thymeleaf</a></p>
<p>FreeMarker</p>
<p>Velocity</p>
<p>JSP</p>
</blockquote>
</li>
</ul>
<h4 id="2-4-SpringMVC-和-Struts2-的优略分析"><a href="#2-4-SpringMVC-和-Struts2-的优略分析" class="headerlink" title="2.4.SpringMVC 和 Struts2 的优略分析"></a>2.4.SpringMVC 和 Struts2 的优略分析</h4><ul>
<li><strong>共同点</strong>：<br>它们都是表现层框架，都是基于 MVC 模型编写的。<br>它们的底层都离不开原始 ServletAPI。<br>它们处理请求的机制都是一个核心控制器。</li>
<li><strong>区别</strong>：<br>Spring MVC 的入口是 Servlet, 而 Struts2 是 Filter<br>Spring MVC 是基于方法设计的，而 Struts2 是基于类，Struts2 每次执行都会创建一个动作类。所以 Spring MVC 会稍微比 Struts2 快些。Spring MVC 使用更加简洁,同时还支持 JSR303, 处理 ajax 的请求更方便(JSR303 是一套 JavaBean 参数校验的标准，它定义了很多常用的校验注解，我们可以直接将这些注解加在我们 JavaBean 的属性上面，就可以在需要校验的时候进行校验了)<br>Struts2 的 OGNL 表达式使页面的开发效率相比 Spring MVC 更高些，但执行效率并没有比 JSTL 提升，尤其是 struts2 的表单标签，远没有 html 执行效率高。</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>SpringMVC框架</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC异常处理</title>
    <url>/2021/03/20/SpringMVC%E4%B8%93%E9%A2%98(%E4%B8%83)-SpringMVC%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<p>我们知道，系统中异常包括：编译时异常和运行时异常RuntimeException，前者通过捕获异常从而获取异常信息，后者主要通过规范代码开发、测试通过手段减少运行时异常的发生。在开发中，不管是dao层、service层还是controller层，都有可能抛出异常，在springmvc中，能将所有类型的异常处理从各处理过程解耦出来，既保证了相关处理过程的功能较单一，也实现了异常信息的统一处理和维护。</p>
<span id="more"></span>

<h3 id="1-异常处理思路"><a href="#1-异常处理思路" class="headerlink" title="1.异常处理思路"></a>1.异常处理思路</h3><p>在springmvc中，异常处理的思路<br><img src="https://img-blog.csdnimg.cn/20190720230545178.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>如上图所示，系统的dao、service、controller出现异常都通过throws Exception向上抛出，最后由springmvc前端控制器交由异常处理器进行异常处理。springmvc提供全局异常处理器（一个系统只有一个异常处理器）进行统一异常处理。明白了springmvc中的异常处理机制，下面就开始分析springmvc中的异常处理。</p>
<h3 id="2-异常处理结构体系"><a href="#2-异常处理结构体系" class="headerlink" title="2.异常处理结构体系"></a>2.异常处理结构体系</h3><p>Spring MVC通过HandlerExceptionResolver处理程序的异常,包括处理映射,数据绑定及处理器执行时发生异常。HandlerExceptionResolver仅有一个接口方法:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Interface to be implemented by objects that can resolve exceptions thrown during</span></span><br><span class="line"><span class="comment"> * handler mapping or execution, in the typical case to error views. Implementors are</span></span><br><span class="line"><span class="comment"> * typically registered as beans in the application context.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Error views are analogous to JSP error pages but can be used with any kind of</span></span><br><span class="line"><span class="comment"> * exception including any checked exception, with potentially fine-grained mappings for</span></span><br><span class="line"><span class="comment"> * specific handlers.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Juergen Hoeller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 22.11.2003</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HandlerExceptionResolver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Try to resolve the given exception that got thrown during handler execution,</span></span><br><span class="line"><span class="comment">	 * returning a &#123;<span class="doctag">@link</span> ModelAndView&#125; that represents a specific error page if appropriate.</span></span><br><span class="line"><span class="comment">	 * &lt;p&gt;The returned &#123;<span class="doctag">@code</span> ModelAndView&#125; may be &#123;<span class="doctag">@linkplain</span> ModelAndView#isEmpty() empty&#125;</span></span><br><span class="line"><span class="comment">	 * to indicate that the exception has been resolved successfully but that no view</span></span><br><span class="line"><span class="comment">	 * should be rendered, for instance by setting a status code.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> request current HTTP request</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> response current HTTP response</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> handler the executed handler, or &#123;<span class="doctag">@code</span> null&#125; if none chosen at the</span></span><br><span class="line"><span class="comment">	 * time of the exception (for example, if multipart resolution failed)</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> ex the exception that got thrown during handler execution</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> a corresponding &#123;<span class="doctag">@code</span> ModelAndView&#125; to forward to, or &#123;<span class="doctag">@code</span> null&#125;</span></span><br><span class="line"><span class="comment">	 * for default processing</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function">ModelAndView <span class="title">resolveException</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">			HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当发生异常时,Spring MVC将调用 resolveException()方法,并转到ModelAndView对应视图中,作为一个异常报告页面,反馈给用户!<br>HandlerExceptionResolver拥有4个常见实现类:<br><img src="https://img-blog.csdnimg.cn/20190720230938835.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="3-异常处理方案"><a href="#3-异常处理方案" class="headerlink" title="3.异常处理方案"></a>3.异常处理方案</h3><h4 id="3-1-DefaultHandlerExceptionResolver"><a href="#3-1-DefaultHandlerExceptionResolver" class="headerlink" title="3.1.DefaultHandlerExceptionResolver"></a>3.1.DefaultHandlerExceptionResolver</h4><p>Spring MVC默认装配了DefaultHandlerExceptionResolver,它会将Spring MVC框架的异常转换为相应的相应状态码!<br>异常和相应状态码对应表<br><img src="https://img-blog.csdnimg.cn/20190720231135358.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在web.xml响应状态码配置一个对应页面</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">error</span>&gt;</span>404<span class="tag">&lt;/<span class="name">error</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">location</span>&gt;</span>/static/404.html<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意: 静态资源注意会被DispatcherServlet拦截!</p>
</blockquote>
<h4 id="3-2-SimpleMappingExceptionResolver"><a href="#3-2-SimpleMappingExceptionResolver" class="headerlink" title="3.2.SimpleMappingExceptionResolver"></a>3.2.SimpleMappingExceptionResolver</h4><p>如果希望对所有的异常进行统一的处理，比如当指定的异常发生时，把它映射到要显示的错误的网页中，此时用SimpleMappingExceptionResolver进行解析。DispatcherServlet中没有实现SimpleMappingExceptionResolver的Bean，所有需要在springmvc的配置文件中进行配置。</p>
<ul>
<li>示例如下： <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoServlet2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@RequestMapping(&quot;/testSimpleMappingExceptionResolver&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">testSimpleMappingExceptionResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		String[] values = <span class="keyword">new</span> String[<span class="number">10</span>];</span><br><span class="line">		<span class="comment">// 下标越界了</span></span><br><span class="line">		System.out.println(values[<span class="number">11</span>]);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
发送index.jsp中的超链接请求，控制器捕获请求后处理控制器逻辑，由于在逻辑中，数组越界，会抛出ArrayIndexOutOfBoundsException异常。</li>
<li>处理异常<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--注解驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!-- 配置使用SimpleMappingExceptionResolver来映射异常 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.SimpleMappingExceptionResolver&quot;</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 给异常命名一个别名 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;exceptionAttribute&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;exceptionMappings&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">				<span class="comment">&lt;!-- 一定要异常的全类名。 表示出现ArrayIndexOutOfBoundsException异常，就跳转到error.jsp视图 --&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;java.lang.ArrayIndexOutOfBoundsException&quot;</span>&gt;</span>error<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
另外在/WEB-INF/jsp下新建一个error.jsp视图。因为上面配置的InternalResourceViewResolver视图解析器默认把error字符串解析为error.jsp视图。error.jsp内容为：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="meta-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Error Page<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    $&#123;requestScope.ex&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
下面重新发送index.jsp中的超链接请求后，控制器截获请求并处理请求时，数组越界抛出一个ArrayIndexOutOfBoundsException一个异常，此时由SimpleMappingExceptionResolver异常解析！<br><img src="https://img-blog.csdnimg.cn/20190720231513302.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h4 id="3-3-AnnotationMethodHandlerExceptionResolver"><a href="#3-3-AnnotationMethodHandlerExceptionResolver" class="headerlink" title="3.3.AnnotationMethodHandlerExceptionResolver"></a>3.3.AnnotationMethodHandlerExceptionResolver</h4>Spring MVC 默认注册了 AnnotationMethodHandlerExceptionResolver,它允许通过@ExceptionHandler注解指定处理特定异常的方法!<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoController1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@ExceptionHandler(value = &#123; RuntimeException.class &#125;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleArithmeticException2</span><span class="params">(Exception ex)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;[出异常了]:&quot;</span> + ex);</span><br><span class="line">		ModelAndView mv = <span class="keyword">new</span> ModelAndView(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">		mv.addObject(<span class="string">&quot;exception&quot;</span>, ex);</span><br><span class="line">		<span class="keyword">return</span> mv;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@ExceptionHandler(value = &#123; ArithmeticException.class &#125;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleArithmeticException</span><span class="params">(Exception ex)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;出异常了，算术异常:&quot;</span> + ex);</span><br><span class="line">		ModelAndView mv = <span class="keyword">new</span> ModelAndView(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">		mv.addObject(<span class="string">&quot;exception&quot;</span>, ex);</span><br><span class="line">		<span class="keyword">return</span> mv;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@RequestMapping(&quot;/testExceptionHandler1&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		String s=<span class="keyword">null</span>;</span><br><span class="line">		System.out.println(s.length());</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@RequestMapping(&quot;/testExceptionHandler2&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> i=<span class="number">100</span>/<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
目标方法内抛出了一个ArithmeticException异常，将由继承关系最近的异常处理捕捉到，即由handleArithmeticException捕捉到。<br>若将handleArithmeticException方法注释掉，则发生ArithmeticException异常将由handleArithmeticException2进行处理。</li>
</ul>
<p>缺点:</p>
<ul>
<li>使用该注解有一个不好的地方就是：进行异常处理的方法必须与出错的方法在同一个Controller里面。</li>
<li>不能全局控制异常。每个类都要写一遍。</li>
</ul>
<h4 id="3-4-全局异常处理"><a href="#3-4-全局异常处理" class="headerlink" title="3.4.全局异常处理"></a>3.4.全局异常处理</h4><p>上文说到 @ ExceptionHandler 需要进行异常处理的方法必须与出错的方法在同一个Controller里面。那么当代码加入了 @ControllerAdvice，则不需要必须在同一个 controller 中了。这也是 Spring 3.2 带来的新特性。从名字上可以看出大体意思是控制器增强。 也就是说，@controlleradvice + @ ExceptionHandler 也可以实现全局的异常捕捉。<br>请确保此WebExceptionHandle 类能被扫描到并装载进 Spring 容器中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebExceptionHandle</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleException</span><span class="params">(Exception ex)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;全局异常:ex = &quot;</span> + ex);</span><br><span class="line">		ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">		</span><br><span class="line">		modelAndView.setViewName(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">		modelAndView.addObject(<span class="string">&quot;exception&quot;</span>, ex);</span><br><span class="line">		<span class="keyword">return</span> modelAndView;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此处可以捕捉全局异常,但是不要忘了在spring配置的时候扫描该类!</p>
<p>若在其他的由@Controller标记的Handler类中的Handle方法抛出异常，且没有在Handler类中定义@ExceptionHandler方法，则会去由@ControllerAdvice标记的类中去找，若也找不到，则在页面抛出异常。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>SpringMVC框架</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC请求参数绑定</title>
    <url>/2021/03/20/SpringMVC%E4%B8%93%E9%A2%98(%E4%B8%89)-SpringMVC%20%E7%9A%84%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E7%BB%91%E5%AE%9A/</url>
    <content><![CDATA[<p>[TOC]</p>
<h3 id="1-绑定说明"><a href="#1-绑定说明" class="headerlink" title="1.绑定说明"></a>1.绑定说明</h3><h4 id="1-1-绑定的机制"><a href="#1-1-绑定的机制" class="headerlink" title="1.1.绑定的机制"></a>1.1.绑定的机制</h4><p>我们都知道，表单中请求参数都是基于 key=value 的。<br>SpringMVC 绑定请求参数的过程是通过把表单提交请求参数，作为控制器中方法参数进行绑定的。</p>
<span id="more"></span>

<p>例如：</p>
<pre><code>&lt;a href=&quot;account/findAccount?accountId=10&quot;&gt;查询账户&lt;/a&gt;
</code></pre>
<p>中请求参数是：</p>
<pre><code>accountId=10
</code></pre>
<p>Controller实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 查询账户</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/findAccount&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">findAccount</span><span class="params">(Integer accountId)</span> </span>&#123;</span><br><span class="line">   System.out.println(<span class="string">&quot;查询了账户。。。。&quot;</span>+accountId);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="1-2-支持的数据类型"><a href="#1-2-支持的数据类型" class="headerlink" title="1.2.支持的数据类型"></a>1.2.支持的数据类型</h4><ul>
<li>基本类型参数：<br>包括基本类型和 String 类型</li>
<li>POJO 类型参数：<br>包括实体类，以及关联的实体类</li>
<li>数组和集合类型参数：<br>包括 List 结构和 Map 结构的集合（包括数组）<br>SpringMVC 绑定请求参数是自动实现的，但是要想使用，必须遵循使用要求。<h4 id="1-3-使用要求"><a href="#1-3-使用要求" class="headerlink" title="1.3.使用要求"></a>1.3.使用要求</h4></li>
<li>如果是基本类型或者 String 类型：<br>要求我们的参数名称必须和控制器中方法的形参名称保持一致。(严格区分大小写)</li>
<li>如果是 POJO 类型，或者它的关联对象：<br>要求表单中参数名称和 POJO 类的属性名称保持一致。并且控制器方法的参数类型是 POJO 类型。</li>
<li>如果是集合类型,有两种方式：</li>
</ul>
<p><strong>第一种</strong>：<br>要求集合类型的请求参数必须在 POJO 中。在表单中请求参数名称要和 POJO 中集合属性名称相同。<br>给 List 集合中的元素赋值，使用下标。<br>给 Map 集合中的元素赋值，使用键值对。<br><strong>第二种</strong>：<br>接收的请求参数是 json 格式数据。需要借助一个注解实现。</p>
<blockquote>
<p>注意: 它还可以实现一些数据类型自动转换。内置转换器全都在：<br>org.springframework.core.convert.support 包下。</p>
<p>有： java.lang.Boolean -&gt;<br>java.lang.String : ObjectToStringConverter java.lang.Character -&gt;<br>java.lang.Number : CharacterToNumberFactory java.lang.Character -&gt;<br>java.lang.String : ObjectToStringConverter java.lang.Enum -&gt;<br>java.lang.String : EnumToStringConverter java.lang.Number -&gt;<br>java.lang.Character : NumberToCharacterConverter java.lang.Number -&gt;<br>java.lang.Number : NumberToNumberConverterFactory java.lang.Number -&gt;<br>java.lang.String : ObjectToStringConverter java.lang.String -&gt;<br>java.lang.Boolean : StringToBooleanConverter java.lang.String -&gt;<br>java.lang.Character : StringToCharacterConverter java.lang.String -&gt;<br>java.lang.Enum : StringToEnumConverterFactory java.lang.String -&gt;<br>java.lang.Number : StringToNumberConverterFactory java.lang.String -&gt;<br>java.util.Locale : StringToLocaleConverter java.lang.String -&gt;<br>java.util.Properties : StringToPropertiesConverter java.lang.String -&gt;<br>java.util.UUID : StringToUUIDConverter java.util.Locale -&gt;<br>java.lang.String : ObjectToStringConverter java.util.Properties -&gt;<br>java.lang.String : PropertiesToStringConverter java.util.UUID -&gt;<br>java.lang.String : ObjectToStringConverter ……<br>如遇特殊类型转换要求，需要我们自己编写自定义类型转换器。</p>
</blockquote>
<h3 id="2-使用示例"><a href="#2-使用示例" class="headerlink" title="2.使用示例"></a>2.使用示例</h3><h4 id="2-1-基本类型和-String-类型作为参数"><a href="#2-1-基本类型和-String-类型作为参数" class="headerlink" title="2.1.基本类型和 String 类型作为参数"></a>2.1.基本类型和 String 类型作为参数</h4><ul>
<li><p>jsp 代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 基本类型示例 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;account/findAccount?accountId=10&amp;accountName=zhangsan&quot;</span>&gt;</span>查询账户<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>控制器代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 查询账户</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/findAccount&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">findAccount</span><span class="params">(Integer accountId,String accountName)</span> </span>&#123;</span><br><span class="line">   System.out.println(<span class="string">&quot;查询了账户。。。。&quot;</span>+accountId+<span class="string">&quot;,&quot;</span>+accountName);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-2-POJO-类型作为参数"><a href="#2-2-POJO-类型作为参数" class="headerlink" title="2.2.POJO 类型作为参数"></a>2.2.POJO 类型作为参数</h4></li>
<li><p>实体类代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 账户信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Integer id;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> Float money;</span><br><span class="line">	<span class="keyword">private</span> Address address;</span><br><span class="line">	<span class="comment">//getters and setters</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 地址的实体类</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String provinceName;</span><br><span class="line">	<span class="keyword">private</span> String cityName;</span><br><span class="line">	<span class="comment">//getters and setters</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>jsp 代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- pojo 类型演示 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;account/saveAccount&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">	账户名称：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> &gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">	账户金额：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;money&quot;</span> &gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">	账户省份：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;address.provinceName&quot;</span> &gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">	账户城市：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;address.cityName&quot;</span> &gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;保存&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>控制器代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 保存账户</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> account</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/saveAccount&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">saveAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;保存了账户。。。。&quot;</span>+account);</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;success&quot;</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-3-POJO-POJO-类中包含集合类型参数"><a href="#2-3-POJO-POJO-类中包含集合类型参数" class="headerlink" title="2.3.POJO POJO 类中包含集合类型参数"></a>2.3.POJO POJO 类中包含集合类型参数</h4></li>
<li><p>实体类代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 用户实体类</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String username;</span><br><span class="line">	<span class="keyword">private</span> String password;</span><br><span class="line">	<span class="keyword">private</span> Integer age;</span><br><span class="line">	<span class="keyword">private</span> List&lt;Account&gt; accounts;</span><br><span class="line">	<span class="keyword">private</span> Map&lt;String,Account&gt; accountMap;</span><br><span class="line">	<span class="comment">//getters and setters</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;User [username=&quot;</span> + username + <span class="string">&quot;, password=&quot;</span> + password + <span class="string">&quot;, age=&quot;</span></span><br><span class="line">	+ age + <span class="string">&quot;,\n accounts=&quot;</span> + accounts</span><br><span class="line">	+ <span class="string">&quot;,\n accountMap=&quot;</span> + accountMap + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>jsp 代码：</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- POJO 类包含集合类型演示 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;account/updateAccount&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">	用户名称：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> &gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">	用户密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> &gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">	用户年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> &gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">	账户 1 名称：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;accounts[0].name&quot;</span> &gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">	账户 1 金额：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;accounts[0].money&quot;</span> &gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">	账户 2 名称：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;accounts[1].name&quot;</span> &gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">	账户 2 金额：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;accounts[1].money&quot;</span> &gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">	账户 3 名称：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;accountMap[&#x27;one&#x27;].name&quot;</span> &gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">	账户 3 金额：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;accountMap[&#x27;one&#x27;].money&quot;</span> &gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">	账户 4 名称：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;accountMap[&#x27;two&#x27;].name&quot;</span> &gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">	账户 4 金额：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;accountMap[&#x27;two&#x27;].money&quot;</span> &gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;保存&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>控制器代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 更新账户</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/updateAccount&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">updateAccount</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;更新了账户。。。。&quot;</span>+user);</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;success&quot;</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-4-请求参数乱码问题"><a href="#2-4-请求参数乱码问题" class="headerlink" title="2.4.请求参数乱码问题"></a>2.4.请求参数乱码问题</h4></li>
<li><p>post 请求方式：<br>在 web.xml 中配置一个过滤器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置 springMVC 编码过滤器 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 设置过滤器中的属性值 --&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">init-param</span>&gt;</span> </span><br><span class="line">		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span> </span><br><span class="line">		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 启动过滤器 --&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">init-param</span>&gt;</span> </span><br><span class="line">		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span> </span><br><span class="line">		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 过滤所有请求 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>get请求方式：<br>tomacat 对 GET和POST请求处理方式是不同的,GET请求的编码问题，要改tomcat的server.xml<br>配置文件，如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span> <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span> <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>改为:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span> <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span> <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> <span class="attr">useBodyEncodingForURI</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果遇到 ajax 请求仍然乱码，请把：</p>
<p>  useBodyEncodingForURI=”true” 改为 URIEncoding=”UTF-8”<br>即可。</p>
<h4 id="2-5-静态资源过滤问题"><a href="#2-5-静态资源过滤问题" class="headerlink" title="2.5.静态资源过滤问题"></a>2.5.静态资源过滤问题</h4><p> 在 springmvc 的配置文件中可以配置，静态资源不过滤：</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- location 表示路径，mapping 表示文件，**表示该目录下的文件以及子目录的文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">&quot;/css/&quot;</span> <span class="attr">mapping</span>=<span class="string">&quot;/css/**&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">&quot;/images/&quot;</span> <span class="attr">mapping</span>=<span class="string">&quot;/images/**&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">&quot;/scripts/&quot;</span> <span class="attr">mapping</span>=<span class="string">&quot;/javascript/**&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="3-自定义类型转换器"><a href="#3-自定义类型转换器" class="headerlink" title="3.自定义类型转换器"></a>3.自定义类型转换器</h3><h4 id="3-1-使用场景"><a href="#3-1-使用场景" class="headerlink" title="3.1.使用场景"></a>3.1.使用场景</h4><ul>
<li>jsp代码：<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 特殊情况之：类型转换问题 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;account/deleteAccount?date=2018-01-01&quot;</span>&gt;</span>根据日期删除账户<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>控制器代码：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 删除账户</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/deleteAccount&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">deleteAccount</span><span class="params">(String date)</span> </span>&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;删除了账户。。。。&quot;</span>+date);</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;success&quot;</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>运行结果：<br><img src="https://img-blog.csdnimg.cn/20190720172731323.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>当我们把控制器中方法参数的类型改为 Date 时：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 删除账户</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/deleteAccount&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">deleteAccount</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;删除了账户。。。。&quot;</span>+date);</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;success&quot;</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>运行结果：<br><img src="https://img-blog.csdnimg.cn/2019072017283120.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li>异常提示:<br><code>Failed to bind request element: org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type &#39;java.lang.String&#39; to required type  &#39;java.util.Date&#39;; nested exception is org.springframework.core.convert.ConversionFailedException:  Failed to convert from type [java.lang.String] to type [java.util.Date] for  value &#39;2018-01-01&#39;; nested exception is java.lang.IllegalArgumentException</code></li>
</ul>
<h4 id="3-2-使用步骤"><a href="#3-2-使用步骤" class="headerlink" title="3.2.使用步骤"></a>3.2.使用步骤</h4><ul>
<li><p>第一步：定义一个类，实现 Converter 接口，该接口有两个泛型。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Converter</span>&lt;<span class="title">S</span>, <span class="title">T</span>&gt; </span>&#123;<span class="comment">//S:表示接受的类型，T：表示目标类型</span></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	* 实现类型转换的方法</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	<span class="function">T <span class="title">convert</span><span class="params">(S source)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 自定义类型转换器</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringToDateConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">Date</span>&gt; </span>&#123;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	* 用于把 String 类型转成日期类型</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Date <span class="title">convert</span><span class="params">(String source)</span> </span>&#123;</span><br><span class="line">		DateFormat format = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">if</span>(StringUtils.isEmpty(source)) &#123;</span><br><span class="line">			   <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">&quot;请输入要转换的日期&quot;</span>);</span><br><span class="line">		    &#125;</span><br><span class="line">			format = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">			Date date = format.parse(source);</span><br><span class="line">			<span class="keyword">return</span> date;</span><br><span class="line">	    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">		    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;输入日期有误&quot;</span>);</span><br><span class="line">		&#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>第二步：在 spring 配置文件中配置类型转换器。<br>spring 配置类型转换器的机制是，将自定义的转换器注册到类型转换服务中去。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置类型转换器工厂 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;converterService&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">&quot;org.springframework.context.support.ConversionServiceFactoryBean&quot;</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 给工厂注入一个新的类型转换器 --&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;converters&quot;</span>&gt;</span> </span><br><span class="line">		<span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 配置自定义类型转换器 --&gt;</span> </span><br><span class="line">			<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.bruceliu.web.converter.StringToDateConverter&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>第三步：在 annotation-driven 标签中引用配置的类型转换服务</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引用自定义类型转换器 --&gt;</span> &lt;mvc:annotation-driven</span><br><span class="line">conversion-service=&quot;converterService&quot;&gt;<span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>运行结果：<br><img src="https://img-blog.csdnimg.cn/20190720173537813.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="4-使用-ServletAPI-对象作为方法参数"><a href="#4-使用-ServletAPI-对象作为方法参数" class="headerlink" title="4.使用 ServletAPI 对象作为方法参数"></a>4.使用 ServletAPI 对象作为方法参数</h3><p>SpringMVC 还支持使用原始 ServletAPI 对象作为控制器方法的参数。支持原始 ServletAPI 对象有：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">HttpServletRequest </span><br><span class="line">HttpServletResponse</span><br><span class="line">HttpSession</span><br><span class="line">java.security.Principal</span><br><span class="line">Locale</span><br><span class="line">InputStream </span><br><span class="line">OutputStream </span><br><span class="line">Reader </span><br><span class="line">Writer</span><br></pre></td></tr></table></figure>
<p>我们可以把上述对象，直接写在控制的方法参数中使用。部分示例代码：</p>
</li>
<li><p>jsp 代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 原始 ServletAPI 作为控制器参数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;account/testServletAPI&quot;</span>&gt;</span>测试访问 ServletAPI<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>控制器中的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 测试访问 testServletAPI</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/testServletAPI&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testServletAPI</span><span class="params">(HttpServletRequest request,HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">HttpSession session)</span> </span>&#123;</span><br><span class="line">	System.out.println(request);</span><br><span class="line">	System.out.println(response);</span><br><span class="line">	System.out.println(session);</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;success&quot;</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>执行结果：</p>
</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20190720173854533.png" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>SpringMVC框架</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC入门</title>
    <url>/2021/03/20/SpringMVC%E4%B8%93%E9%A2%98(%E4%BA%8C)-SpringMVC%20%E7%9A%84%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>[TOC]</p>
<h3 id="1-SpringMVC-的入门案例"><a href="#1-SpringMVC-的入门案例" class="headerlink" title="1.SpringMVC 的入门案例"></a>1.SpringMVC 的入门案例</h3><h4 id="1-1-创建一个maven工程并导入依赖"><a href="#1-1-创建一个maven工程并导入依赖" class="headerlink" title="1.1.创建一个maven工程并导入依赖"></a>1.1.创建一个maven工程并导入依赖</h4><ul>
<li><p>maven项目pom配置:</p>
<span id="more"></span>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- Junit测试 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">&lt;!-- 添加Spring包 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">		<span class="comment">&lt;!-- 为了方便进行单元测试，添加spring-test包 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-expression<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="1-2-配置核心控制器"><a href="#1-2-配置核心控制器" class="headerlink" title="1.2.配置核心控制器"></a>1.2.配置核心控制器</h4><p>配置在 web.xml 中配置 DispatcherServlet 核心控制器(Servlet)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">   <span class="comment">&lt;!-- 配置SpringMVC核心控制器： --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>		 <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 配置DispatcherServlet的初始化參數：设置文件的路径和文件名称 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 配置 servlet 的对象的创建时间点：应用加载时创建。取值只能是非 0 正整数，表示启动顺序 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="1-3-创建-spring-mvc-的配置文件"><a href="#1-3-创建-spring-mvc-的配置文件" class="headerlink" title="1.3.创建 spring mvc 的配置文件"></a>1.3.创建 spring mvc 的配置文件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:bean</span>=<span class="string">&quot;http://www.springframework.org/schema/bean&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 扫描controller --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.springmvc.controller&quot;</span> /&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line">	&lt;bean</span><br><span class="line">		class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;</span><br><span class="line">		<span class="comment">&lt;!-- jsp所在的位置 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- jsp文件的后缀名 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="1-4-编写控制器并使用注解配置"><a href="#1-4-编写控制器并使用注解配置" class="headerlink" title="1.4.编写控制器并使用注解配置"></a>1.4.编写控制器并使用注解配置</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明Bean对象，为一个控制器组件</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 映射请求的名称：用于客户端请求；类似Struts2中action映射配置的action名称</span></span><br><span class="line"><span class="comment">	 * 1. 使用 <span class="doctag">@RequestMapping</span> 注解来映射请求的 URL</span></span><br><span class="line"><span class="comment">	 * 2. 返回值会通过视图解析器解析为实际的物理视图, 对于 InternalResourceViewResolver 视图解析器, </span></span><br><span class="line"><span class="comment">	 * 会做如下的解析:</span></span><br><span class="line"><span class="comment">	 *                 通过 prefix + returnVal + suffix 这样的方式得到实际的物理视图, 然后做转发操作.</span></span><br><span class="line"><span class="comment">	 *                 /WEB-INF/views/success.jsp</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	</span><br><span class="line">	<span class="meta">@RequestMapping(&quot;/helloworld&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">hellworld</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;helloworld&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;  <span class="comment">//结果如何跳转呢？需要配置映射解析器</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>@Controller 来源于@Component标示为控制层，用于加在类上。<br>@RequestMapping(“/helloworld”)  该方法对应的uri;<br>控制器类的方法返回字符串类型非常常见,返回字符串,代表根据返回的字符串找到对应的视图!<br>根据springmvc配置文件中视图解析器(InternalResourceViewResolver) 配置的视图文件的前缀和后缀!<br>helloworld()方法返回  “helloworld” 会找到 WEB-INF/jsp/success.jsp文件!</p>
</li>
</ul>
<h4 id="1-5-测试Spring-MVC"><a href="#1-5-测试Spring-MVC" class="headerlink" title="1.5.测试Spring MVC"></a>1.5.测试Spring MVC</h4><p>发布项目,通过浏览器,访问 当前项目对应地址+ /helloworld即可<br><a href="http://localhost:8080/springmvc-demo1/helloworld">http://localhost:8080/springmvc-demo1/helloworld</a></p>
<h3 id="2-入门案例的执行过程及原理分析"><a href="#2-入门案例的执行过程及原理分析" class="headerlink" title="2.入门案例的执行过程及原理分析"></a>2.入门案例的执行过程及原理分析</h3><h4 id="2-1-案例的执行过程"><a href="#2-1-案例的执行过程" class="headerlink" title="2.1.案例的执行过程"></a>2.1.案例的执行过程</h4><p><img src="https://img-blog.csdnimg.cn/201907182335360.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>1、服务器启动，应用被加载。读取到 web.xml 中的配置创建 spring 容器并且初始化容器中的对象。从入门案例中可以看到的是：HelloController 和 InternalResourceViewResolver，但是远不<br>止这些。<br>2、浏览器发送请求，被 DispatherServlet 捕获，该 Servlet 并不处理请求，而是把请求转发出去。转发<br>的路径是根据请求 URL，匹配@RequestMapping 中的内容。<br>3、匹配到了后，执行对应方法。该方法有一个返回值。<br>4、根据方法的返回值，借助 InternalResourceViewResolver 找到对应的结果视图。<br>5、渲染结果视图，响应浏览器。</p>
<h4 id="2-2-SpringMVC-的请求响应流程"><a href="#2-2-SpringMVC-的请求响应流程" class="headerlink" title="2.2.SpringMVC 的请求响应流程"></a>2.2.SpringMVC 的请求响应流程</h4><p><img src="https://img-blog.csdnimg.cn/20190718233853515.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>第一步：用户发送请求到前端控制器（DispatcherServlet）。<br>第二步：前端控制器请求 HandlerMapping 查找 Handler(Controller)，可以根据 xml 配置或者注解进行查找。<br>第三步：处理器映射器 HandlerMapping 向前端控制器返回 Handler(Controller)<br>第四步：前端控制器调用处理器适配器(HandlerAdapter)去执行 Handler(Controller)<br>第五步：处理器适配器执行 Handler<br>第六步：Handler 执行完成后给适配器返回 ModelAndView<br>第七步：处理器适配器向前端控制器返回 ModelAndView<br>　　　　ModelAndView 是SpringMVC 框架的一个底层对象，包括 Model(模型数据) 和 View(视图)<br>第八步：前端控制器请求试图解析器去进行视图解析<br>　　　　根据逻辑视图名来解析真正的视图。<br>第九步：试图解析器向前端控制器返回 view<br>第十步：前端控制器进行视图渲染<br>　　　　就是将模型数据（在 ModelAndView 对象中）填充到 request 域<br>第十一步：前端控制器向用户响应结果</p>
<h4 id="2-3-SpringMVC的组件"><a href="#2-3-SpringMVC的组件" class="headerlink" title="2.3.SpringMVC的组件"></a>2.3.SpringMVC的组件</h4><ul>
<li><p><strong>DispatcherServlet</strong>：前端控制器（不需要程序员开发,需要WEB.xml配置）<br>用户请求到达前端控制器，它就相当于 mvc 模式中的 c，dispatcherServlet 是整个流程控制的中心，由它调用其它组件处理用户的请求，dispatcherServlet 的存在降低了组件之间的耦合性。</p>
</li>
<li><p><strong>HandlerMapping</strong>：处理器映射器（不需要程序员开发）<br>HandlerMapping 负责根据用户请求找到 Handler 即处理器，SpringMVC 提供了不同的映射器实现不同的映射方式，例如：配置文件方式，实现接口方式，注解方式等。</p>
</li>
<li><p><strong>Handler（Controller）：处理器</strong>（需要程序员开发）<br>它就是我们开发中要编写的具体业务控制器。由 DispatcherServlet 把用户请求转发到 Handler。由Handler 对具体的用户请求进行处理。</p>
</li>
<li><p><strong>HandlAdapter：处理器适配器</strong>（不需要程序员开发）<br>通过 HandlerAdapter 对处理器进行执行，这是适配器模式的应用，通过扩展适配器可以对更多类型的处理器进行执行。按照特定规则（HandlerAdapter要求的规则）去执行Handler（Controller）</p>
</li>
<li><p><strong>View Resolver：视图解析器</strong>（不需要程序员开发，只需要配置）<br>View Resolver 负责将处理结果生成 View 视图，View Resolver 首先根据逻辑视图名解析成物理视图名即具体的页面地址，再生成 View 视图对象，最后对 View 进行渲染将处理结果通过页面展示给用户。</p>
</li>
<li><p><strong>View：视图</strong><br>SpringMVC 框架提供了很多的 View 视图类型的支持，包括：jstlView、freemarkerView、pdfView等。我们最常用的视图就是 jsp。<br>一般情况下需要通过页面标签或页面模版技术将模型数据通过页面展示给用户，需要由程序员根据业务需求开发具体的页面。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>SpringMVC框架</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC响应数据和结果视图</title>
    <url>/2021/03/20/SpringMVC%E4%B8%93%E9%A2%98(%E4%BA%94)-SpringMVC%E5%93%8D%E5%BA%94%E6%95%B0%E6%8D%AE%E5%92%8C%E7%BB%93%E6%9E%9C%E8%A7%86%E5%9B%BE/</url>
    <content><![CDATA[<h3 id="1-返回值分类"><a href="#1-返回值分类" class="headerlink" title="1.返回值分类"></a>1.返回值分类</h3><h4 id="1-1-字符串"><a href="#1-1-字符串" class="headerlink" title="1.1.字符串"></a>1.1.字符串</h4><p>controller 方法返回字符串可以指定逻辑视图名，通过视图解析器解析为物理视图地址。</p>
<span id="more"></span>

<ul>
<li>Croller代码：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//指定逻辑视图名，经过视图解析器解析为 jsp 物理路径：/WEB-INF/pages/success.jsp</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/testReturnString&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testReturnString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;AccountController的testReturnString 方法执行了。。。。&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;success&quot;</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>运行结果：</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20190720213235815.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h4 id="1-2-void"><a href="#1-2-void" class="headerlink" title="1.2.void"></a>1.2.void</h4><p>我们知道 Servlet 原始 API 可以作为控制器中方法的参数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testReturnVoid&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testReturnVoid</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span> </span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 controller 方法形参上可以定义 request 和 response，使用 request 或 response 指定响应结果：<br>1、使用 request 转向页面，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">request.getRequestDispatcher(<span class="string">&quot;/WEB-INF/pages/success.jsp&quot;</span>).forward(request, response);</span><br></pre></td></tr></table></figure>
<p>2、也可以通过 response 页面重定向：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.sendRedirect(<span class="string">&quot;testRetrunString&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>3、也可以通过 response 指定响应结果，例如响应 json 数据：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">response.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">response.getWriter().write(<span class="string">&quot;json 串&quot;</span>);</span><br></pre></td></tr></table></figure>
<h4 id="1-3-ModelAndView"><a href="#1-3-ModelAndView" class="headerlink" title="1.3.ModelAndView"></a>1.3.ModelAndView</h4><p>ModelAndView 是 SpringMVC 为我们提供的一个对象，该对象也可以用作控制器方法的返回值。<br>该对象中有两个方法：<br><img src="https://img-blog.csdnimg.cn/20190720213632141.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190720213645146.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<ul>
<li>示例代码：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 返回 ModeAndView</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/testReturnModelAndView&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">testReturnModelAndView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">	mv.addObject(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">	mv.setViewName(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> mv; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>响应的 jsp 代码：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">html</span>&gt;</span> <span class="tag">&lt;<span class="name">head</span>&gt;</span> <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">title</span>&gt;</span>执行成功<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	执行成功！</span><br><span class="line">	$&#123;requestScope.username&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>输出结果：</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20190720213900744.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<blockquote>
<p>注意：我们在页面上上获取使用的是 requestScope.username 取的，所以返回 ModelAndView 类型时，浏<br>览器跳转只能是请求转发。</p>
</blockquote>
<h4 id="1-4-转发和重定向"><a href="#1-4-转发和重定向" class="headerlink" title="1.4.转发和重定向"></a>1.4.转发和重定向</h4><h5 id="1-4-1-forward-转发"><a href="#1-4-1-forward-转发" class="headerlink" title="1.4.1 forward 转发"></a>1.4.1 forward 转发</h5><p>controller 方法在提供了 String 类型的返回值之后，默认就是请求转发。我们也可以写成：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 转发</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/testForward&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testForward</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;AccountController的testForward方法执行了。。。。&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;forward:/WEB-INF/pages/success.jsp&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>需要注意的是，如果用了 formward：则路径必须写成实际视图 url，不能写逻辑视图。<br>它相当于“<code>request.getRequestDispatcher(&quot;url&quot;).forward(request,response)</code>”。使用请求<br>转发，既可以转发到 jsp，也可以转发到其他的控制器方法。</p>
<h5 id="1-4-2-Redirect-重定向"><a href="#1-4-2-Redirect-重定向" class="headerlink" title="1.4.2 Redirect 重定向"></a>1.4.2 Redirect 重定向</h5><p>contrller 方法提供了一个 String 类型返回值之后，它需要在返回值里使用:redirect:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 重定向</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/testRedirect&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testRedirect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;AccountController 的 testRedirect 方法执行了。。。。&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;redirect:testReturnModelAndView&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>它相当于“<code>response.sendRedirect(url)</code>”。需要注意的是，如果是重定向到 jsp 页面，则 jsp 页面不能写在 WEB-INF 目录中，否则无法找到。</p>
<h4 id="1-5-ResponseBody响应json数据"><a href="#1-5-ResponseBody响应json数据" class="headerlink" title="1.5.ResponseBody响应json数据"></a>1.5.ResponseBody响应json数据</h4><h5 id="1-5-1-使用说明"><a href="#1-5-1-使用说明" class="headerlink" title="1.5.1.使用说明"></a>1.5.1.使用说明</h5><ul>
<li>作用：<br>该注解用于将 Controller 的方法返回的对象，通过 HttpMessageConverter 接口转换为指定格式的数据如：json,xml 等，通过 Response 响应给客户端.<h5 id="1-5-2-使用示例"><a href="#1-5-2-使用示例" class="headerlink" title="1.5.2.使用示例"></a>1.5.2.使用示例</h5></li>
<li>需求：<br>使用@ResponseBody 注解实现将 controller 方法返回对象转换为 json 响应给客户端。</li>
<li>前置知识点：<br>Springmvc 默认用 MappingJacksonHttpMessageConverter 对 json 数据进行转换，需要加入<br>jackson 的包。<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：2.7.0 以下的版本用不了</p>
</blockquote>
</li>
<li>jsp 中的代码：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">src</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/js/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">	$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">		$(<span class="string">&quot;#testJson&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">			$.ajax(&#123;</span></span><br><span class="line"><span class="javascript">				type:<span class="string">&quot;post&quot;</span>,</span></span><br><span class="line"><span class="javascript">				url:<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/testResponseJson&quot;</span>,</span></span><br><span class="line"><span class="javascript">				contentType:<span class="string">&quot;application/json;charset=utf-8&quot;</span>,</span></span><br><span class="line"><span class="javascript">				data:<span class="string">&#x27;&#123;&quot;id&quot;:1,&quot;name&quot;:&quot;test&quot;,&quot;money&quot;:999.0&#125;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">				dataType:<span class="string">&quot;json&quot;</span>,</span></span><br><span class="line"><span class="javascript">				success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span></span><br><span class="line">				alert(data);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;);</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 测试异步请求 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;测试 ajax 请求 json 和响应 json&quot;</span> <span class="attr">id</span>=<span class="string">&quot;testJson&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>控制器中的代码：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 响应json数据的控制器</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Controller(&quot;jsonController&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 测试响应 json 数据</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/testResponseJson&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@ResponseBody</span> <span class="function">Account <span class="title">testResponseJson</span><span class="params">(<span class="meta">@RequestBody</span> Account account)</span> </span>&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;异步请求：&quot;</span>+account);</span><br><span class="line">	<span class="keyword">return</span> account; </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>运行结果：</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20190720215343602.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>SpringMVC框架</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC拦截器</title>
    <url>/2021/03/20/SpringMVC%E4%B8%93%E9%A2%98(%E5%85%AB)-SpringMVC%20%E4%B8%AD%E7%9A%84%E6%8B%A6%E6%88%AA%E5%99%A8/</url>
    <content><![CDATA[<h3 id="1-拦截器的作用"><a href="#1-拦截器的作用" class="headerlink" title="1.拦截器的作用"></a>1.拦截器的作用</h3><p>Spring MVC 的处理器拦截器类似于 Servlet 开发中的过滤器 Filter，用于对处理器进行预处理和后处理。用户可以自己定义一些拦截器来实现特定的功能。谈到拦截器，还要向大家提一个词——拦截器链（Interceptor Chain）。拦截器链就是将拦截器按一定的顺序联结成一条链。在访问被拦截的方法或字段时，拦截器链中的拦截器就会按其之前定义的顺序被调用。</p>
<span id="more"></span>

<p>说到这里，可能大家脑海中有了一个疑问，这不是我们之前学的过滤器吗？是的它和过滤器是有几分相似，但是也有区别，接下来我们就来说说他们的区别：<br>过滤器是 servlet 规范中的一部分，任何 java web 工程都可以使用。<br>拦截器是 SpringMVC 框架自己的，只有使用了 SpringMVC 框架的工程才能用。<br>过滤器在 url-pattern 中配置了/*之后，可以对所有要访问的资源拦截。<br>拦截器它是只会拦截访问的控制器方法，如果访问的是 jsp，html,css,image 或者 js 是不会进行拦<br>截的。它也是 AOP 思想的具体应用。</p>
<p>我们要想自定义拦截器， 要求必须实现：<code>HandlerInterceptor</code>接口。</p>
<h3 id="2-自定义拦截器的步骤"><a href="#2-自定义拦截器的步骤" class="headerlink" title="2.自定义拦截器的步骤"></a>2.自定义拦截器的步骤</h3><h4 id="2-1-第一步：编写一个普通类实现-HandlerInterceptor-接口"><a href="#2-1-第一步：编写一个普通类实现-HandlerInterceptor-接口" class="headerlink" title="2.1.第一步：编写一个普通类实现 HandlerInterceptor 接口"></a>2.1.第一步：编写一个普通类实现 HandlerInterceptor 接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> bruceliu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019-07-20 23:26</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerInterceptorDemo1</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse</span></span></span><br><span class="line"><span class="function"><span class="params">            response, Object handler)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;preHandle 拦截器拦截了&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">                           Object handler,</span></span></span><br><span class="line"><span class="function"><span class="params">                           ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;postHandle 方法执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse</span></span></span><br><span class="line"><span class="function"><span class="params">            response, Object handler, Exception ex)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterCompletion 方法执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-2-第二步：配置拦截器"><a href="#2-2-第二步：配置拦截器" class="headerlink" title="2.2.第二步：配置拦截器"></a>2.2.第二步：配置拦截器</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置拦截器 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;handlerInterceptorDemo1&quot;</span></span></span><br><span class="line"><span class="tag">		<span class="attr">class</span>=<span class="string">&quot;com.bruceliu.web.interceptor.HandlerInterceptorDemo1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="2-3-测试运行结果"><a href="#2-3-测试运行结果" class="headerlink" title="2.3 测试运行结果"></a>2.3 测试运行结果</h4><p><img src="https://img-blog.csdnimg.cn/2019072023284928.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="3-拦截器的细节"><a href="#3-拦截器的细节" class="headerlink" title="3.拦截器的细节"></a>3.拦截器的细节</h3><h4 id="3-1-拦截器的放行"><a href="#3-1-拦截器的放行" class="headerlink" title="3.1.拦截器的放行"></a>3.1.拦截器的放行</h4><p>放行的含义是指，如果有下一个拦截器就执行下一个，如果该拦截器处于拦截器链的最后一个，则执行控制器中的方法。<br><img src="https://img-blog.csdnimg.cn/20190720233004828.png" alt="在这里插入图片描述"></p>
<h4 id="3-2-拦截器中方法的说明"><a href="#3-2-拦截器中方法的说明" class="headerlink" title="3.2.拦截器中方法的说明"></a>3.2.拦截器中方法的说明</h4><p><img src="https://img-blog.csdnimg.cn/20190720233212853.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	* 如何调用：</span></span><br><span class="line"><span class="comment">	* 按拦截器定义顺序调用</span></span><br><span class="line"><span class="comment">	* 何时调用：</span></span><br><span class="line"><span class="comment">	* 只要配置了都会调用</span></span><br><span class="line"><span class="comment">	* 有什么用：</span></span><br><span class="line"><span class="comment">	* 如果程序员决定该拦截器对请求进行拦截处理后还要调用其他的拦截器，或者是业务处理器去</span></span><br><span class="line"><span class="comment">	* 进行处理，则返回 true。 * 如果程序员决定不需要再调用其他的组件去处理请求，则返回 false。 */</span></span><br><span class="line">	<span class="function"><span class="keyword">default</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse </span></span></span><br><span class="line"><span class="function"><span class="params">	response, Object handler)</span></span></span><br><span class="line"><span class="function">	<span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	* 如何调用：</span></span><br><span class="line"><span class="comment">	* 按拦截器定义逆序调用</span></span><br><span class="line"><span class="comment">	* 何时调用：</span></span><br><span class="line"><span class="comment">	* 在拦截器链内所有拦截器返成功调用</span></span><br><span class="line"><span class="comment">	* 有什么用：</span></span><br><span class="line"><span class="comment">	* 在业务处理器处理完请求后，但是 DispatcherServlet 向客户端返回响应前被调用，</span></span><br><span class="line"><span class="comment">	* 在该方法中对用户请求 request 进行处理。</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse </span></span></span><br><span class="line"><span class="function"><span class="params">	response, Object handler,</span></span></span><br><span class="line"><span class="function"><span class="params">	<span class="meta">@Nullable</span> ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	* 如何调用：</span></span><br><span class="line"><span class="comment">	* 按拦截器定义逆序调用</span></span><br><span class="line"><span class="comment">	* 何时调用：</span></span><br><span class="line"><span class="comment">	* 只有 preHandle 返回 true 才调用</span></span><br><span class="line"><span class="comment">	* 有什么用： * 在 DispatcherServlet 完全处理完请求后被调用，</span></span><br><span class="line"><span class="comment">	* 可以在该方法中进行一些资源清理的操作。</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse </span></span></span><br><span class="line"><span class="function"><span class="params">	response, Object handler,</span></span></span><br><span class="line"><span class="function"><span class="params">	<span class="meta">@Nullable</span> Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-3-拦截器的作用路径"><a href="#3-3-拦截器的作用路径" class="headerlink" title="3.3.拦截器的作用路径"></a>3.3.拦截器的作用路径</h4><p>作用路径可以通过在配置文件中配置。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span> </span><br><span class="line">		<span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span> /&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 用于指定对拦截的 url --&gt;</span> </span><br><span class="line">		<span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 用于指定排除的 url--&gt;</span> </span><br><span class="line">		<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;handlerInterceptorDemo1&quot;</span></span></span><br><span class="line"><span class="tag">		<span class="attr">class</span>=<span class="string">&quot;com.bruceliu.web.interceptor.HandlerInterceptorDemo1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="3-4-多个拦截器的执行顺序"><a href="#3-4-多个拦截器的执行顺序" class="headerlink" title="3.4 多个拦截器的执行顺序"></a>3.4 多个拦截器的执行顺序</h4><p>多个拦截器是按照配置的顺序决定的。<br><img src="https://img-blog.csdnimg.cn/20190720233633383.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="4-拦截器的简单案例（验证用户是否登录）"><a href="#4-拦截器的简单案例（验证用户是否登录）" class="headerlink" title="4.拦截器的简单案例（验证用户是否登录）"></a>4.拦截器的简单案例（验证用户是否登录）</h3><h4 id="4-1-实现思路"><a href="#4-1-实现思路" class="headerlink" title="4.1.实现思路"></a>4.1.实现思路</h4><p>1、有一个登录页面，需要写一个 controller 访问页面 2、登录页面有一提交表单的动作。需要在 controller 中处理。<br>&emsp;2.1、判断用户名密码是否正确<br>&emsp;2.2、如果正确 向 session 中写入用户信息<br>2.3、返回登录成功。<br>3、拦截用户请求，判断用户是否登录<br>&emsp;3.1、如果用户已经登录。放行<br>&emsp;3.2、如果用户未登录，跳转到登录页面</p>
<h4 id="4-2-控制器代码"><a href="#4-2-控制器代码" class="headerlink" title="4.2.控制器代码"></a>4.2.控制器代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> bruceliu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019-07-20 23:39</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//登陆页面</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(Model model)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//登陆提交</span></span><br><span class="line">    <span class="comment">//userid：用户账号，pwd：密码</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/loginsubmit&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">loginsubmit</span><span class="params">(HttpSession session, String userid, String pwd)</span> <span class="keyword">throws</span></span></span><br><span class="line"><span class="function">            Exception </span>&#123;</span><br><span class="line">        <span class="comment">//向 session 记录用户身份信息</span></span><br><span class="line">        session.setAttribute(<span class="string">&quot;activeUser&quot;</span>, userid);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/main.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//退出</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/logout&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">logout</span><span class="params">(HttpSession session)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//session 过期</span></span><br><span class="line">        session.invalidate();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:index.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-3-拦截器代码"><a href="#4-3-拦截器代码" class="headerlink" title="4.3.拦截器代码"></a>4.3.拦截器代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> bruceliu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019-07-20 23:41</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                             HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//如果是登录页面则放行</span></span><br><span class="line">        <span class="keyword">if</span> (request.getRequestURI().indexOf(<span class="string">&quot;login.action&quot;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        HttpSession session = request.getSession();</span><br><span class="line">        <span class="comment">//如果用户已登录也放行</span></span><br><span class="line">        <span class="keyword">if</span> (session.getAttribute(<span class="string">&quot;user&quot;</span>) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//用户没有登录挑战到登录页面</span></span><br><span class="line">        request.getRequestDispatcher(<span class="string">&quot;/WEB-INF/jsp/login.jsp&quot;</span>).forward(request, response);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>SpringMVC框架</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC文件上传</title>
    <url>/2021/03/20/SpringMVC%E4%B8%93%E9%A2%98(%E5%85%AD)-SpringMVC%20%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
    <content><![CDATA[<h3 id="1-文件上传的回顾"><a href="#1-文件上传的回顾" class="headerlink" title="1.文件上传的回顾"></a>1.文件上传的回顾</h3><h4 id="1-1-文件上传的必要前提"><a href="#1-1-文件上传的必要前提" class="headerlink" title="1.1.文件上传的必要前提"></a>1.1.文件上传的必要前提</h4><p>A、form 表单的 enctype 取值必须是：<code>multipart/form-data</code>(默认值是:<code>application/x-www-form-urlencoded</code>) enctype:是表单请求正文的类型<br>B、method 属性取值必须是 <code>Post</code><br>C、提供一个文件选择域<code>&lt;input type=”file” /&gt;</code></p>
<span id="more"></span>

<h4 id="1-2-文件上传的原理分析"><a href="#1-2-文件上传的原理分析" class="headerlink" title="1.2.文件上传的原理分析"></a>1.2.文件上传的原理分析</h4><p>当 form 表单的 enctype 取值不是默认值后，<code>request.getParameter()</code>将失效。 <code>enctype=”application/x-www-form-urlencoded”</code>时，form 表单的正文内容是：<br><code>key=value&amp;key=value&amp;key=value</code>，当 form 表单的 enctype 取值为<code>Mutilpart/form-data</code>时，请求正文内容就变成：<br>每一部分都是 MIME 类型描述的正文<br><img src="https://img-blog.csdnimg.cn/20190720221308608.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190720221350735.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h4 id="1-3-借助第三方组件实现文件上传"><a href="#1-3-借助第三方组件实现文件上传" class="headerlink" title="1.3.借助第三方组件实现文件上传"></a>1.3.借助第三方组件实现文件上传</h4><p>使用 Commons-fileupload 组件实现文件上传，需要导入该组件相应的支撑 jar 包：Commons-fileupload 和commons-io。commons-io 不属于文件上传组件的开发 jar 文件，但Commons-fileupload 组件从 1.1 版本开始，它工作时需要 commons-io 包的支持。<br><img src="https://img-blog.csdnimg.cn/20190720222005313.png" alt="在这里插入图片描述"></p>
<h3 id="2-springmvc-传统方式的文件上传"><a href="#2-springmvc-传统方式的文件上传" class="headerlink" title="2.springmvc 传统方式的文件上传"></a>2.springmvc 传统方式的文件上传</h3><h4 id="2-1-说明"><a href="#2-1-说明" class="headerlink" title="2.1.说明"></a>2.1.说明</h4><p>传统方式的文件上传，指的是我们上传的文件和访问的应用存在于同一台服务器上。并且上传完成之后，浏览器可能跳转。</p>
<h4 id="2-2-实现步骤"><a href="#2-2-实现步骤" class="headerlink" title="2.2.实现步骤"></a>2.2.实现步骤</h4><h5 id="2-2-1-第一步：拷贝文件上传的-jar-包到工程的-lib-目录"><a href="#2-2-1-第一步：拷贝文件上传的-jar-包到工程的-lib-目录" class="headerlink" title="2.2.1.第一步：拷贝文件上传的 jar 包到工程的 lib 目录"></a>2.2.1.第一步：拷贝文件上传的 jar 包到工程的 lib 目录</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="2-2-2-第二步：编写-jsp-页面"><a href="#2-2-2-第二步：编写-jsp-页面" class="headerlink" title="2.2.2.第二步：编写 jsp 页面"></a>2.2.2.第二步：编写 jsp 页面</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/fileUpload&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">	名称：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;picname&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">	图片：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;uploadFile&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="2-2-3-第三步：编写控制器"><a href="#2-2-3-第三步：编写控制器" class="headerlink" title="2.2.3.第三步：编写控制器"></a>2.2.3.第三步：编写控制器</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 文件上传的的控制器</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Controller(&quot;fileUploadController&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUploadController</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件上传</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/fileUpload&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testResponseJson</span><span class="params">(String picname, MultipartFile</span></span></span><br><span class="line"><span class="function"><span class="params">            uploadFile, HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//定义文件名</span></span><br><span class="line">        String fileName = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="comment">//1.获取原始文件名</span></span><br><span class="line">        String uploadFileName = uploadFile.getOriginalFilename();</span><br><span class="line">        <span class="comment">//2.截取文件扩展名</span></span><br><span class="line">        String extendName =</span><br><span class="line">                uploadFileName.substring(uploadFileName.lastIndexOf(<span class="string">&quot;.&quot;</span>) + <span class="number">1</span>,</span><br><span class="line">                        uploadFileName.length());</span><br><span class="line">        <span class="comment">//3.把文件加上随机数，防止文件重复</span></span><br><span class="line">        String uuid = UUID.randomUUID().toString().replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>).toUpperCase();</span><br><span class="line">        <span class="comment">//4.判断是否输入了文件名</span></span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(picname)) &#123;</span><br><span class="line">            fileName = uuid + <span class="string">&quot;_&quot;</span> + picname + <span class="string">&quot;.&quot;</span> + extendName;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            fileName = uuid + <span class="string">&quot;_&quot;</span> + uploadFileName;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(fileName);</span><br><span class="line">        <span class="comment">//2.获取文件路径</span></span><br><span class="line">        ServletContext context = request.getServletContext();</span><br><span class="line">        String basePath = context.getRealPath(<span class="string">&quot;/uploads&quot;</span>);</span><br><span class="line">        <span class="comment">//3.解决同一文件夹中文件过多问题</span></span><br><span class="line">        String datePath = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd&quot;</span>).format(<span class="keyword">new</span> Date());</span><br><span class="line">        <span class="comment">//4.判断路径是否存在</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(basePath + <span class="string">&quot;/&quot;</span> + datePath);</span><br><span class="line">        <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">            file.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5.使用 MulitpartFile 接口中方法，把上传的文件写到指定位置</span></span><br><span class="line">        uploadFile.transferTo(<span class="keyword">new</span> File(file, fileName));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="2-2-4-第四步：配置文件解析器"><a href="#2-2-4-第四步：配置文件解析器" class="headerlink" title="2.2.4.第四步：配置文件解析器"></a>2.2.4.第四步：配置文件解析器</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置文件上传解析器 --&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- id 的值是固定的--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 设置上传文件的最大尺寸为 5MB --&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxUploadSize&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>5242880<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：<br>文件上传的解析器 id 是固定的，不能起别的名称，否则无法实现请求参数的绑定。（不光是文件，其他字段也将无法绑定）</p>
</blockquote>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>SpringMVC框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring事务小结</title>
    <url>/2021/03/20/Spring%E4%BA%8B%E5%8A%A1%E5%B0%8F%E7%BB%93/</url>
    <content><![CDATA[<h1 id="1-Spring事务"><a href="#1-Spring事务" class="headerlink" title="1.Spring事务"></a>1.Spring事务</h1><h2 id="1-1-拜神"><a href="#1-1-拜神" class="headerlink" title="1.1.拜神"></a>1.1.拜神</h2><p><img src="https://img-blog.csdnimg.cn/20201208233323252.png" alt="在这里插入图片描述"></p>
<p>spring事务领头人叫Juergen Hoeller，于尔根·糊了…先混个脸熟哈，他写了几乎全部的spring事务代码。读源码先拜神，掌握他的源码的风格，读起来会通畅很多。</p>
<span id="more"></span>

<h2 id="1-2-事务的定义"><a href="#1-2-事务的定义" class="headerlink" title="1.2.事务的定义"></a>1.2.事务的定义</h2><p>事务（Transaction）是数据库区别于文件系统的重要特性之一。目前国际认可的数据库设计原则是ACID特性，用以保证数据库事务的正确执行。Mysql的innodb引擎中的事务就完全符合ACID特性。</p>
<h2 id="1-3-事务的特性"><a href="#1-3-事务的特性" class="headerlink" title="1.3.事务的特性"></a>1.3.事务的特性</h2><p><img src="https://img-blog.csdnimg.cn/20201208233002719.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>要保证事务的ACID特性，spring给事务定义了6个属性，对应于声明式事务注解（org.springframework.transaction.annotation.Transactional）@Transactional(key1=<em>,key2=</em>…)</p>
<p><strong>隔离级别:</strong>  为了解决数据库容易出现的问题，分级加锁处理策略。 对应注解中的属性isolation<br><strong>超时时间:</strong>  定义一个事务执行过程多久算超时，以便超时后回滚。可以防止长期运行的事务占用资源.对应注解中的属性timeout<br><strong>是否只读</strong>：表示这个事务只读取数据但不更新数据, 这样可以帮助数据库引擎优化事务.对应注解中的属性readOnly<br><strong>传播机制</strong>:  对事务的传播特性进行定义，共有7种类型。对应注解中的属性propagation<br><strong>回滚机制</strong>：定义遇到异常时回滚策略。对应注解中的属性rollbackFor、noRollbackFor、rollbackForClassName、noRollbackForClassName</p>
<p><img src="https://img-blog.csdnimg.cn/20201208234022262.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="1-4-七个传播特性"><a href="#1-4-七个传播特性" class="headerlink" title="1.4.七个传播特性"></a>1.4.七个传播特性</h2><p><img src="https://img-blog.csdnimg.cn/20201208234104178.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201208234131378.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>Spring框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring常用注解</title>
    <url>/2021/03/20/Spring%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="Spring常用注解："><a href="#Spring常用注解：" class="headerlink" title="Spring常用注解："></a>Spring常用注解：</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.16.18<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h1 id="0-注解的包扫描"><a href="#0-注解的包扫描" class="headerlink" title="0.注解的包扫描"></a>0.注解的包扫描</h1><p>在Spring注解开发,如果注解想要生效，必须先进行包扫描！Spring框架启动会扫描配置包下所有的类上的注解，针对这个注解，执行某些动作！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--包扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.bruce.*&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="1-Component注解"><a href="#1-Component注解" class="headerlink" title="1.@Component注解"></a>1.@Component注解</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Component：给一个类创建一个对象！相当于XML配置的 &lt;bean&#x2F;&gt;标签</span><br><span class="line">    如果没有人工指定对象的名字,默认就是这个类名(首字母小写)</span><br><span class="line">    也可以人工指定对象的名字：  @Component(value &#x3D; &quot;accountDao&quot;)</span><br></pre></td></tr></table></figure>

<h1 id="2-Scope注解"><a href="#2-Scope注解" class="headerlink" title="2.@Scope注解"></a>2.@Scope注解</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Scope：设置对象的作用域</span><br><span class="line"></span><br><span class="line">@Scope(&quot;singleton&quot;)  &#x2F;&#x2F;默认值</span><br><span class="line">&#x2F;&#x2F;@Scope(&quot;prototype&quot;)  &#x2F;&#x2F;默认值</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component(value = &quot;accountDao&quot;)</span></span><br><span class="line"><span class="meta">@Scope(&quot;singleton&quot;)</span>  <span class="comment">//默认值</span></span><br><span class="line"><span class="comment">//@Scope(&quot;prototype&quot;)  //多例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAccounts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="3-value注解"><a href="#3-value注解" class="headerlink" title="3.@value注解"></a>3.@value注解</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@value注解 给属性注入值的注解</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@BelongsProject</span>: Spring-2021</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@BelongsPackage</span>: com.bruce.dao.impl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@CreateTime</span>: 2021-01-12 10:53</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component(value = &quot;accountDao&quot;)</span></span><br><span class="line"><span class="meta">@Scope(&quot;singleton&quot;)</span>  <span class="comment">//默认值</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;com.mysql.jdbc.Driver&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;jdbc:mysql://localhost:3306/account2021?characterEncoding=utf-8&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;root&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;123456&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAccounts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(driver);</span><br><span class="line">        System.out.println(url);</span><br><span class="line">        System.out.println(username);</span><br><span class="line">        System.out.println(password);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>@value注解可以读取外部的配置文件：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PropertySource(value = &quot;classpath:db.properties&quot;,ignoreResourceNotFound = true)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath*:db.properties&quot;</span> <span class="attr">file-encoding</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component(value = &quot;accountDao&quot;)</span></span><br><span class="line"><span class="meta">@Scope(&quot;singleton&quot;)</span>  <span class="comment">//默认值</span></span><br><span class="line"><span class="meta">@PropertySource(value = &quot;classpath:db.properties&quot;,ignoreResourceNotFound = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAccounts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(driver);</span><br><span class="line">        System.out.println(url);</span><br><span class="line">        System.out.println(username);</span><br><span class="line">        System.out.println(password);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="4-PropertySource注解"><a href="#4-PropertySource注解" class="headerlink" title="4.@PropertySource注解"></a>4.@PropertySource注解</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PropertySource</span> 使用注解的方式加载配置文件</span><br><span class="line">    </span><br><span class="line"><span class="meta">@PropertySource(value = &quot;classPath:db.properties&quot;,encoding = &quot;UTF-8&quot;)</span></span><br></pre></td></tr></table></figure>



<h1 id="5-ComponentScan注解"><a href="#5-ComponentScan注解" class="headerlink" title="5.@ComponentScan注解"></a>5.@ComponentScan注解</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ComponentScan</span> 扫描包，作用就是替换掉传统的xml配置：&lt;context:component-scan base-packge=<span class="string">&quot;com.bruce.*&quot;</span>/&gt;</span><br><span class="line">默认扫描的包是当前类所在的包！，也可以人工指定要扫描的包！</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ComponentScan</span>  <span class="comment">//@ComponentScan : com.bruce(父包) 该包的子包也会被扫描</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAnnotation</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">测试类需要变化</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAccounts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//控制台启动Spring容器  创建一个本地的xml配置对象工厂</span></span><br><span class="line">        <span class="comment">//ClassPathXmlApplicationContext Context = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);</span></span><br><span class="line">        <span class="comment">//使用@ComponentScan注解后</span></span><br><span class="line">        ApplicationContext applicationContext = <span class="keyword">new</span> AnnotationConfigApplicationContext(SpringConfig.class);</span><br><span class="line">        <span class="comment">//springIOC容器中对象默认的是singleTon</span></span><br><span class="line">        AccountDaoImpl bean = (AccountDaoImpl) applicationContext.getBean(<span class="string">&quot;accountDao&quot;</span>);</span><br><span class="line">        System.out.println(bean);</span><br><span class="line">        List&lt;Account&gt; accounts = bean.findAccounts();</span><br><span class="line">        System.out.println(accounts);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="6-PostConstruct和-PreDestroy注解"><a href="#6-PostConstruct和-PreDestroy注解" class="headerlink" title="6.@PostConstruct和@PreDestroy注解"></a>6.@PostConstruct和@PreDestroy注解</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@PostConstruct 类似于xml配置的 init-method配置</span><br><span class="line">@PreDestroy 类似于xml配置的 detory-method配置</span><br></pre></td></tr></table></figure>

<h1 id="7-Autowired注解"><a href="#7-Autowired注解" class="headerlink" title="7.@Autowired注解"></a>7.@Autowired注解</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Autowired : 自动在IOC容器中根据类型匹配一个对象进行自动装配，如果找不到匹配的对象那么就为null，如果根据类型匹配到多个就会有异常</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AccountDao accountDao;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAccounts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountDao.findAccounts();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="8-Resource注解自动装配"><a href="#8-Resource注解自动装配" class="headerlink" title="8.@Resource注解自动装配"></a>8.@Resource注解自动装配</h1><p>@Resource注解是JDK注解    @Autowire是spring框架注解，都是自动装配</p>
<h1 id="9-Repository、-Service、-Controller注解"><a href="#9-Repository、-Service、-Controller注解" class="headerlink" title="9.@Repository、@Service、@Controller注解"></a>9.@Repository、@Service、@Controller注解</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Repository  推荐加在dao层: 数据访问层</span><br><span class="line">@Service     推荐加在业务逻辑层</span><br><span class="line">@Controller  推荐加在业务控制层</span><br><span class="line"></span><br><span class="line">以上三个注解，本质上是 @Component注解，只不过封装了，为了各层逻辑更加清晰。如果某一组件，例如事务通知类，并不是某一层，就可以使用@Component注解</span><br></pre></td></tr></table></figure>

<h1 id="10-Configuration注解"><a href="#10-Configuration注解" class="headerlink" title="10.@Configuration注解"></a>10.@Configuration注解</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Configuration  一般是spring框架的配置类注解，一个配置类@Configuration注解，底层其实是@Component</span><br></pre></td></tr></table></figure>

<h1 id="Spring-Test和Junit整合"><a href="#Spring-Test和Junit整合" class="headerlink" title="Spring Test和Junit整合"></a>Spring Test和Junit整合</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在学习spring的时候，为了更方便的启动spring框架，可选择Spring Test 和Junit整合，整合完毕之后，测试起来更加直接，因为测试也是注解版</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">原代码</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAnnotation</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAccounts</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//控制台启动Spring容器  创建一个本地的xml配置对象工厂</span></span><br><span class="line">        <span class="comment">//ClassPathXmlApplicationContext Context = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);</span></span><br><span class="line">        <span class="comment">//使用@ComponentScan注解后</span></span><br><span class="line">        AnnotationConfigApplicationContext applicationContext = <span class="keyword">new</span> AnnotationConfigApplicationContext(SpringConfig.class);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">2</span>;i++)&#123;</span><br><span class="line">            <span class="comment">//springIOC容器中对象默认的是singleTon</span></span><br><span class="line">            AccountDaoImpl bean = (AccountDaoImpl) applicationContext.getBean(<span class="string">&quot;xojo&quot;</span>);</span><br><span class="line">            List&lt;Account&gt; accounts = bean.findAccounts();</span><br><span class="line">            <span class="keyword">for</span> (Account account : accounts) &#123;</span><br><span class="line">                System.out.println(account);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        applicationContext.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- junit依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">使用注解简化后：</span><br><span class="line">    </span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span> <span class="comment">//通过Junit启动spring框架</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = SpringConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAnnotation</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Account&gt; context = accountService.findAccounts();</span><br><span class="line">        <span class="keyword">for</span> (Account account : context) &#123;</span><br><span class="line">            System.out.println(account);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>Spring框架</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringProxy代理</title>
    <url>/2021/03/20/Spring%E6%A1%86%E6%9E%B6%E4%B9%8BProxy%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<h2 id="1-引言"><a href="#1-引言" class="headerlink" title="1.引言"></a>1.引言</h2><p>动态代理在 Java 中有着广泛的应用，比如 AOP 的实现原理、RPC远程调用、Java 注解对象获取、日志框架、全局性异常处理、事务处理等。</p>
<p>在了解动态代理前，我们需要先了解一下什么是代理模式。</p>
<span id="more"></span>

<h1 id="2-代理模式"><a href="#2-代理模式" class="headerlink" title="2.代理模式"></a>2.代理模式</h1><p><code>代理模式(Proxy Pattern)</code>是 23 种设计模式的一种，属于结构型模式。他指的是一个对象本身不做实际的操作，而是通过其他对象来得到自己想要的结果。这样做的好处是可以在<strong>目标对象实现的基础上，增强额外的功能操作，即扩展目标对象的功能</strong>。</p>
<blockquote>
<p>这里能体现出一个非常重要的编程思想：不要随意去改源码，如果需要修改，可以通过代理的方式来扩展该方法。</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/2020122917263491.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>如上图所示，用户不能直接使用目标对象，而是构造出一个代理对象，由代理对象作为中转，代理对象负责调用目标对象真正的行为，从而把结果返回给用户。</p>
<p>也就是说，<strong>代理的关键点就是代理对象和目标对象的关系</strong>。</p>
<p><strong>代理模式主要由三个元素共同构成：</strong></p>
<p>1）一个接口，接口中的方法是要真正去实现的。<br>2）被代理类，实现上述接口，这是真正去执行接口中方法的类。<br>3）代理类，同样实现上述接口，同时封装被代理类对象，帮助被代理类去实现方法</p>
<p><img src="https://img-blog.csdnimg.cn/20201229173024989.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>使用代理模式必须要让代理类和目标类实现相同的接口，客户端通过代理类来调用目标方法，代理类会将所有的方法调用分派到目标对象上反射执行，还可以在分派过程中添加”前置通知”和后置处理!</p>
<p>（如在调用目标方法前校验权限，在调用完目标方法后打印日志等）等功能。</p>
<h1 id="3-静态代理"><a href="#3-静态代理" class="headerlink" title="3.静态代理"></a>3.静态代理</h1><p>    <strong>第一步</strong>：创建 UserService 接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 添加 user</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 删除 user</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(<span class="keyword">int</span> uid)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>    <strong>第二步</strong>:创建 UserService的实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;增加 User&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(<span class="keyword">int</span> uid)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;删除 User&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>    <strong>第三步</strong>:创建事务类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTransaction</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 开启事务</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;开启事务&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 提交事务</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;提交事务&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>    <strong>第四步</strong>：创建代理类 ProxyUser.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyUser</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 真实类</span></span><br><span class="line">	<span class="keyword">private</span> UserService userService;</span><br><span class="line">	<span class="comment">// 事务类</span></span><br><span class="line">	<span class="keyword">private</span> MyTransaction transaction;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 使用构造函数实例化</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ProxyUser</span><span class="params">(UserService userService, MyTransaction transaction)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.userService = userService;</span><br><span class="line">		<span class="keyword">this</span>.transaction = transaction;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">		transaction.before();</span><br><span class="line">		userService.addUser(user);</span><br><span class="line">		transaction.after();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(<span class="keyword">int</span> uid)</span> </span>&#123;</span><br><span class="line">		transaction.before();</span><br><span class="line">		userService.deleteUser(uid);</span><br><span class="line">		transaction.after();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>    <strong>测试</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestUser</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOne</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		MyTransaction transaction = <span class="keyword">new</span> MyTransaction();</span><br><span class="line">		UserService userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">		<span class="comment">// 产生静态代理对象</span></span><br><span class="line">		ProxyUser proxy = <span class="keyword">new</span> ProxyUser(userService, transaction);</span><br><span class="line">		proxy.addUser(<span class="keyword">null</span>);</span><br><span class="line">		proxy.deleteUser(<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://img-blog.csdnimg.cn/20200831161939701.png#pic_left" alt="在这里插入图片描述"></p>
<p>这是一个很基础的静态代理，业务类UserServiceImpl 只需要关注业务逻辑本身，保证了业务的重用性，这也是代理类的优点，没什么好说的。我们主要说说这样写的缺点：</p>
<p>①、代理对象的一个接口只服务于一种类型的对象，如果要代理的方法很多，势必要为每一种方法都进行代理，静态代理在程序规模稍大时就无法胜任了。</p>
<p>②、如果接口增加一个方法，比如 UserService 增加修改 updateUser()方法，则除了所有实现类需要实现这个方法外，所有代理类也需要实现此方法。增加了代码维护的复杂度。</p>
<h1 id="4-使用JDK动态代理"><a href="#4-使用JDK动态代理" class="headerlink" title="4.使用JDK动态代理"></a>4.使用JDK动态代理</h1><p>动态代理就不要自己手动生成代理类了，我们去掉 ProxyUser.java 类，增加一个ObjectInterceptor.java 类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectInterceptor</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 目标类</span></span><br><span class="line">	<span class="keyword">private</span> Object target;</span><br><span class="line">	<span class="comment">// 切面类（这里指事务类）</span></span><br><span class="line">	<span class="keyword">private</span> MyTransaction transaction;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 通过构造器赋值</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ObjectInterceptor</span><span class="params">(Object target, MyTransaction transaction)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.target = target;</span><br><span class="line">		<span class="keyword">this</span>.transaction = transaction;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">		<span class="comment">// 开启事务</span></span><br><span class="line">		<span class="keyword">this</span>.transaction.before();</span><br><span class="line">		<span class="comment">// 调用目标类方法</span></span><br><span class="line">		method.invoke(<span class="keyword">this</span>.target, args);</span><br><span class="line">		<span class="comment">// 提交事务</span></span><br><span class="line">		<span class="keyword">this</span>.transaction.after();</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>    测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestUser2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOne</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 目标类</span></span><br><span class="line">		Object target = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">		<span class="comment">// 事务类</span></span><br><span class="line">		MyTransaction transaction = <span class="keyword">new</span> MyTransaction();</span><br><span class="line">		ObjectInterceptor proxyObject = <span class="keyword">new</span> ObjectInterceptor(target, transaction);</span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * 三个参数的含义： 1、目标类的类加载器 2、目标类所有实现的接口 3、拦截器</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		UserService userService = (UserService) Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), proxyObject);</span><br><span class="line">		userService.addUser(<span class="keyword">null</span>);</span><br><span class="line">		userService.deleteUser(<span class="number">11</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://img-blog.csdnimg.cn/20200831162112767.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70#pic_left" alt="在这里插入图片描述"></p>
<p>那么使用动态代理来完成这个需求就很好了，后期在 UserService 中增加业务方法，都不用更改代码就能自动给我们生成代理对象。而且将 UserService 换成别的类也是可以的。也就是做到了代理对象能够代理多个目标类，多个目标方法。</p>
<p><strong>查看JDK动态代理的生成的class文件：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 保存 JDK 动态代理生产的类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> filePath 保存路径，默认在项目路径下生成 $Proxy0.class 文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">saveProxyFile</span><span class="params">(String... filePath)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (filePath.length == <span class="number">0</span>) &#123;</span><br><span class="line">        System.getProperties().put(<span class="string">&quot;sun.misc.ProxyGenerator.saveGeneratedFiles&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        FileOutputStream out = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] classFile = ProxyGenerator.generateProxyClass(<span class="string">&quot;$Proxy0&quot;</span>, IronManVIPMovie.class.getInterfaces());</span><br><span class="line">            String path=filePath[<span class="number">0</span>] + <span class="string">&quot;$Proxy0.class&quot;</span>;</span><br><span class="line">            System.out.println(path);</span><br><span class="line">            out = <span class="keyword">new</span> FileOutputStream(path);</span><br><span class="line">            out.write(classFile);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (out != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    out.flush();</span><br><span class="line">                    out.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="5-使用CGLIB动态代理"><a href="#5-使用CGLIB动态代理" class="headerlink" title="5.使用CGLIB动态代理"></a>5.使用CGLIB动态代理</h1><p>使用JDK创建代理有一个限制,它只能为接口创建代理实例.这一点可以从Proxy的接口方法 <code>newProxyInstance(ClassLoader loader,Class [] interfaces,InvocarionHandler h)</code>中看的很清楚<br>     第二个入参 interfaces就是需要代理实例实现的接口列表.</p>
<pre><code> 对于没有通过接口定义业务方法的类,如何动态创建代理实例呢? JDK动态代理技术显然已经黔驴技穷,CGLib作为一个替代者,填补了这一空缺.
</code></pre>
<p>CGLib采用底层的字节码技术,可以为一个类创建子类,在子类中采用方法拦截的技术拦截所有父类方法的调用并顺势志入横切逻辑.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>    创建创建CGLib代理器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CglibProxy</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 切面类（这里指事务类）</span></span><br><span class="line">	<span class="keyword">private</span> MyTransaction transaction;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">CglibProxy</span><span class="params">(MyTransaction transaction)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.transaction=transaction;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 设置被代理对象</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">(Class clazz)</span> </span>&#123;</span><br><span class="line">		enhancer.setSuperclass(clazz);</span><br><span class="line">		enhancer.setCallback(<span class="keyword">this</span>);</span><br><span class="line">		<span class="keyword">return</span> enhancer.create();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object obj, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">		transaction.before();</span><br><span class="line">		Object invoke = methodProxy.invokeSuper(obj, objects);</span><br><span class="line">		transaction.after();</span><br><span class="line">		<span class="keyword">return</span> invoke;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>    测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOne</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 事务类</span></span><br><span class="line">	MyTransaction transaction = <span class="keyword">new</span> MyTransaction();</span><br><span class="line">	CglibProxy cglibProxy = <span class="keyword">new</span> CglibProxy(transaction);</span><br><span class="line">	UserServiceImpl userService = (UserServiceImpl) cglibProxy.getProxy(UserServiceImpl.class);</span><br><span class="line">	userService.addUser(<span class="keyword">null</span>);</span><br><span class="line">	userService.deleteUser(<span class="number">11</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>查看CGLIB动态代理的生成的class文件：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在指定目录下生成动态代理类</span></span><br><span class="line">System.setProperty(DebuggingClassWriter.DEBUG_LOCATION_PROPERTY, <span class="string">&quot;D:\\classcglib&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;=========CGLIB$CALLBACK_0==========&quot;</span>);</span><br><span class="line">Field h = userService.getClass().getDeclaredField(<span class="string">&quot;CGLIB$CALLBACK_0&quot;</span>);</span><br><span class="line">h.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">Object obj = h.get(userService);</span><br><span class="line">System.out.println(obj.getClass());</span><br></pre></td></tr></table></figure>

<h1 id="6-JDK和CGLIB动态代理总结"><a href="#6-JDK和CGLIB动态代理总结" class="headerlink" title="6.JDK和CGLIB动态代理总结"></a>6.JDK和CGLIB动态代理总结</h1><h2 id="6-1-原理区别"><a href="#6-1-原理区别" class="headerlink" title="6.1.原理区别"></a>6.1.原理区别</h2><p>java动态代理是利用反射机制生成一个实现代理接口的匿名类，在调用具体方法前调用InvokeHandler来处理。核心是实现InvocationHandler接口，使用invoke()方法进行面向切面的处理，调用相应的通知。</p>
<p>而cglib动态代理是利用asm开源包，对代理对象类的class文件加载进来，通过修改其字节码生成子类来处理。核心是实现MethodInterceptor接口，使用intercept()方法进行面向切面的处理，调用相应的通知。</p>
<ol>
<li><p>如果目标对象实现了接口，默认情况下会采用JDK的动态代理实现AOP</p>
</li>
<li><p>如果目标对象实现了接口，可以强制使用CGLIB实现AOP</p>
</li>
<li><p>如果目标对象没有实现了接口，必须采用CGLIB库，spring会自动在JDK动态代理和CGLIB之间转换</p>
</li>
</ol>
<p>可以强制使用CGlib（在spring配置中加入<code>&lt;aop:aspectj-autoproxy proxy-target-class=“true”/&gt;</code>）<br>springboot项目配置： <code>spring.aop.proxy-target-class=false</code></p>
<h2 id="6-2-CGlib比JDK快？"><a href="#6-2-CGlib比JDK快？" class="headerlink" title="6.2.CGlib比JDK快？"></a>6.2.CGlib比JDK快？</h2><p>1、CGLib底层采用ASM字节码生成框架，使用字节码技术生成代理类，在jdk6之前比使用Java反射效率要高。唯一需要注意的是，CGLib不能对声明为final的方法进行代理，因为CGLib原理是动态生成被代理类的子类。</p>
<p>2、在jdk6、jdk7、jdk8逐步对JDK动态代理优化之后，在调用次数较少的情况下，JDK代理效率高于CGLIB代理效率，只有当进行大量调用的时候，jdk6和jdk7比CGLIB代理效率低一点，但是到jdk8的时候，jdk代理效率高于CGLIB代理。</p>
<p>3、在对JDK动态代理与CGlib动态代理的代码实验中看，1W次执行下，JDK7及8的动态代理性能比CGlib要好20%左右。</p>
<h2 id="6-3-各自局限："><a href="#6-3-各自局限：" class="headerlink" title="6.3.各自局限："></a>6.3.各自局限：</h2><p>1、JDK的动态代理机制只能代理实现了接口的类，而不能实现接口的类就不能实现JDK的动态代理。</p>
<p>2、cglib是针对类来实现代理的，他的原理是对指定的目标类生成一个子类，并覆盖其中方法实现增强，但因为采用的是继承，所以不能对final修饰的类进行代理。</p>
<h1 id="7-总结"><a href="#7-总结" class="headerlink" title="7. 总结"></a>7. 总结</h1><table>
<thead>
<tr>
<th>类型</th>
<th>机制</th>
<th>回调方式</th>
<th>适用场景</th>
<th>效率</th>
</tr>
</thead>
<tbody><tr>
<td>JDK动态代理</td>
<td>委托机制，代理类和目标类都实现了同样的接口，InvocationHandler持有目标类，代理类委托InvocationHandler去调用目标类原始方法</td>
<td>反射</td>
<td>目标类是接口</td>
<td>效率瓶颈在反射调用稍慢</td>
</tr>
<tr>
<td>CGLIB动态代理</td>
<td>继承机制，代理类继承了目标类并重写了目标方法，通过回调函数MethodInterceptor调用父类方法执行原始逻辑</td>
<td>通过FastClass方法索引调用</td>
<td>非接口类，非final类，非final方法</td>
<td>第一次调用因为要生成多个Class对象较JDK慢，多次调用因为方法索引较反射方式快，如果方法多swtich case过多其效率还需测试</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>Spring框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring的概述</title>
    <url>/2021/03/20/Spring%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20201229124636151.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>[TOC]</p>
<h1 id="1-Spring框架是什么"><a href="#1-Spring框架是什么" class="headerlink" title="1.Spring框架是什么"></a>1.Spring框架是什么</h1><p><img src="https://img-blog.csdnimg.cn/20201228155222760.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>Spring是一个开源框架，Spring是于2003 年兴起的一个轻量级的Java 开发框架，由<code>Rod Johnson</code> 在其著作<code>Expert One-On-One J2EE Development and Design</code>中阐述的部分理念和原型衍生而来。它是为了解决企业应用开发的复杂性而创建的。框架的主要优势之一就是其分层架构，分层架构允许使用者选择使用哪一个组件，同时为 J2EE 应用程序开发提供集成的框架。Spring使用基本的JavaBean来完成以前只可能由EJB完成的事情。然而，Spring的用途不仅限于服务器端的开发。从简单性、可测试性和松耦合的角度而言，任何Java应用都可以从Spring中受益。Spring的核心是<strong>控制反转（IoC）</strong>和<strong>面向切面（AOP）</strong>。<font color=red>简单来说，Spring是一个分层的JavaSE/EE full-stack(一站式) 轻量级开源框架</font>。</p>
<span id="more"></span>

<blockquote>
<p>Spring \ Spring Mvc \ SpringBoot \ Spring Cloud \ Spring Cloud Alibaba…        Spring Data</p>
</blockquote>
<p>Spring的主要作用就是为代码“<font color=red>解耦</font>”，降低代码间的耦合度。就是让对象和对象（模块和模块）之间关系不是使用代码关联，而是通过配置来说明。即在Spring中说明对象（模块）的关系。</p>
<p>Spring根据代码的功能特点，使用Ioc降低业务对象之间耦合度。IoC使得主业务在相互调用过程中，<strong>不用再自己维护关系了，即不用再自己创建要使用的对象了</strong>。而是由Spring容器统一管理，自动“注入”,注入即赋值。而AOP使得系统级服务得到了最大复用，且不用再由程序员手工将系统级服务“混杂”到主业务逻辑中了，而是由Spring容器统一完成“织入”。</p>
<p>官网：<a href="https://spring.io/">https://spring.io/</a><br><img src="https://img-blog.csdnimg.cn/20201228160612850.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h1 id="2-Spring框架优点"><a href="#2-Spring框架优点" class="headerlink" title="2.Spring框架优点"></a>2.Spring框架优点</h1><p>Spring 是一个框架，是一个半成品的软件。有 20个模块组成。它是一个容器管理对象，容器是装东西的，Spring 容器不装文本，数字。装的是对象。Spring 是存储对象的容器。</p>
<h2 id="2-1-轻量级"><a href="#2-1-轻量级" class="headerlink" title="2.1.轻量级"></a>2.1.轻量级</h2><p>Spring 框架使用的 jar 都比较小，一般在 1M 以下或者几百 kb。Spring 核心功能的所需的 jar 总共在 3M 左右。</p>
<p>Spring 框架运行占用的资源少，运行效率高。不依赖其他 jar</p>
<h2 id="2-2-针对接口编程，解耦合"><a href="#2-2-针对接口编程，解耦合" class="headerlink" title="2.2.针对接口编程，解耦合"></a>2.2.针对接口编程，解耦合</h2><p>Spring 提供了 Ioc 控制反转，由容器管理对象，对象的依赖关系。原来在程序代码中的对象创建方式，现在由容器完成。对象之间的依赖解耦合。</p>
<h2 id="2-3-AOP-编程的支持"><a href="#2-3-AOP-编程的支持" class="headerlink" title="2.3.AOP 编程的支持"></a>2.3.AOP 编程的支持</h2><p>通过 Spring 提供的 AOP 功能，方便进行面向切面的编程，许多不容易用传统 OOP 实现的功能可以通过 AOP 轻松应付</p>
<p>在Spring 中，开发人员可以从繁杂的事务管理代码中解脱出来，通过声明式方式灵活地进行事务的管理，提高开发效率和质量。</p>
<h2 id="2-4-声明式事务的支持"><a href="#2-4-声明式事务的支持" class="headerlink" title="2.4.声明式事务的支持"></a>2.4.声明式事务的支持</h2><p>只需要通过配置就可以完成对事务的管理，而无需手动编程。</p>
<blockquote>
<p>SSM  SSH 项目中事务管理 不需要人工处理 Spring声明式事务！</p>
</blockquote>
<h2 id="2-5-方便集成各种优秀框架"><a href="#2-5-方便集成各种优秀框架" class="headerlink" title="2.5.方便集成各种优秀框架"></a>2.5.方便集成各种优秀框架</h2><p>Spring 不排斥各种优秀的开源框架，相反 Spring 可以降低各种框架的使用难度，Spring提供了对各种优秀框架（如 Struts,Hibernate、MyBatis）等的直接支持。简化框架的使用。</p>
<p><strong>Spring 像插线板一样</strong>，其他框架是插头，可以容易的组合到一起。需要使用哪个框架，就把这个插头放入插线板。不需要可以轻易的移除。</p>
<blockquote>
<p>SSM  框架整合    Redis  RabbitMQ  Solr  ES   Quartz….</p>
</blockquote>
<h2 id="2-6-降低JavaEE-API的使用难度"><a href="#2-6-降低JavaEE-API的使用难度" class="headerlink" title="2.6.降低JavaEE API的使用难度"></a>2.6.降低JavaEE API的使用难度</h2><p>Spring对JavaEE开发中非常难用的一些API（JDBC、JavaMail、远程调用等），都提供了封装，使这些API应用难度大大降低。</p>
<h1 id="3-Spring框架体系结构"><a href="#3-Spring框架体系结构" class="headerlink" title="3.Spring框架体系结构"></a>3.Spring框架体系结构</h1><p>Spring框架至今已集成了20多个模块，这些模块分布在以下模块中：</p>
<ul>
<li>核心容器（Core Container）</li>
<li>数据访问/集成（Data Access/Integration）层</li>
<li>Web层</li>
<li>AOP（Aspect Oriented Programming）模块</li>
<li>植入（Instrumentation）模块</li>
<li>消息传输（Messaging）</li>
<li>测试（Test）模块</li>
</ul>
<p>Spring体系结构如下图：<br><img src="https://img-blog.csdnimg.cn/20201228161013264.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="3-1-核心容器"><a href="#3-1-核心容器" class="headerlink" title="3.1.核心容器"></a>3.1.核心容器</h2><p>Spring的核心容器是其他模块建立的基础，有Spring-core、Spring-beans、Spring-context、Spring-context-support和Spring-expression（String表达式语言）等模块组成。</p>
<ul>
<li><strong>Spring-core模块</strong>：提供了框架的基本组成部分，包括控制反转（Inversion of Control，IOC）和依赖注入（Dependency Injection，DI）功能。</li>
<li><strong>Spring-beans模块</strong>：提供了BeanFactory，是工厂模式的一个经典实现，Spring将管理对象称为Bean。</li>
<li><strong>Spring-context模块</strong>：建立在Core和Beans模块的基础之上，提供一个框架式的对象访问方式，是访问定义和配置的任何对象的媒介。ApplicationContext接口是Context模块的焦点。</li>
<li><strong>Spring-context-support模块</strong>：支持整合第三方库到Spring应用程序上下文，特别是用于高速缓存（EhCache、JCache）和任务调度（CommonJ、Quartz）的支持。</li>
<li><strong>Spring-expression模块</strong>：提供了强大的表达式语言去支持运行时查询和操作对象图。这是对JSP2.1规范中规定的统一表达式语言（Unified EL）的扩展。该语言支持设置和获取属性值、属性分配、方法调用、访问数组、集合和索引器的内容、逻辑和算术运算、变量命名以及从Spring的IOC容器中以名称检索对象。它还支持列表投影、选择以及常用的列表聚合。</li>
</ul>
<h2 id="3-2-AOP和Instrumentation"><a href="#3-2-AOP和Instrumentation" class="headerlink" title="3.2.AOP和Instrumentation"></a>3.2.AOP和Instrumentation</h2><ul>
<li><strong>Spring-aop模块</strong>：提供了一个符合AOP要求的面向切面的编程实现，允许定义方法拦截器和切入点，将代码按照功能进行分离，以便干净地解耦。</li>
<li><strong>Spring-aspects模块</strong>：提供了与AspectJ的集成功能，AspectJ是一个功能强大且成熟的AOP框架。</li>
<li><strong>Spring-instrument模块</strong>：提供了类植入（Instrumentation）支持和类加载器的实现，可以在特定的应用服务器中使用。<h2 id="3-3-消息"><a href="#3-3-消息" class="headerlink" title="3.3.消息"></a>3.3.消息</h2>Spring4.0以后新增了消息（Spring-messaging）模块，该模块提供了对消息传递体系结构和协议的支持。</li>
</ul>
<h2 id="3-4-数据访问-集成"><a href="#3-4-数据访问-集成" class="headerlink" title="3.4.数据访问/集成"></a>3.4.数据访问/集成</h2><p>数据访问/集成层由JDBC、ORM、OXM、JMS和事务模块组成。</p>
<ul>
<li><strong>Spring-jdbc模块</strong>：提供了一个JDBC的抽象层，消除了烦琐的JDBC编码和数据库厂商特有的错误代码解析。</li>
<li><strong>Spring-orm模块</strong>：为流行的对象关系映射（Object-Relational Mapping）API提供集成层，包括JPA和Hibernate。使用Spring-orm模块可以将这些O/R映射框架与Spring提供的所有其他功能结合使用，例如声明式事务管理功能。</li>
<li><strong>Spring-oxm模块</strong>：提供了一个支持对象/XML映射的抽象层实现，例如JAXB、Castor、JiBX和XStream。</li>
<li><strong>Spring-jms模块（Java Messaging Service</strong>）：指Java消息传递服务，包含用于生产和使用消息的功能。自Spring4.1以后，提供了与Spring-messaging模块的集成。</li>
<li><strong>Spring-tx模块（事务模块</strong>）：支持用于实现特殊接口和所有POJO（普通Java对象）类的编程和声明式事务管理。</li>
</ul>
<h2 id="3-5-Web"><a href="#3-5-Web" class="headerlink" title="3.5.Web"></a>3.5.Web</h2><p>Web层由Spring-web、Spring-webmvc、Spring-websocket和Portlet模块组成。</p>
<ul>
<li><strong>Spring-web模块</strong>：提供了基本的Web开发集成功能，例如多文件上传功能、使用Servlet监听器初始化一个IOC容器以及Web应用上下文。</li>
<li><strong>Spring-webmvc模块</strong>：也称为Web-Servlet模块，包含用于web应用程序的Spring MVC和REST Web Services实现。Spring MVC框架提供了领域模型代码和Web表单之间的清晰分离，并与Spring Framework的所有其他功能集成。</li>
<li><strong>Spring-websocket模块</strong>：Spring4.0以后新增的模块，它提供了WebSocket和SocketJS的实现。<br>Portlet模块：类似于Servlet模块的功能，提供了Portlet环境下的MVC实现。</li>
</ul>
<h2 id="3-6-测试"><a href="#3-6-测试" class="headerlink" title="3.6.测试"></a>3.6.测试</h2><p>Spring-test模块支持使用JUnit或TestNG对Spring组件进行单元测试和集成测试。</p>
<h1 id="4-Spring版本与下载"><a href="#4-Spring版本与下载" class="headerlink" title="4.Spring版本与下载"></a>4.Spring版本与下载</h1><h2 id="4-1-Spring版本"><a href="#4-1-Spring版本" class="headerlink" title="4.1.Spring版本"></a>4.1.Spring版本</h2><p>地址:<a href="https://spring.io/projects/spring-framework#learn">https://spring.io/projects/spring-framework#learn</a><br><img src="https://img-blog.csdnimg.cn/20201228162149486.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="4-2-下载地址"><a href="#4-2-下载地址" class="headerlink" title="4.2.下载地址"></a>4.2.下载地址</h2><p><a href="https://repo.spring.io/release/org/springframework/spring/">https://repo.spring.io/release/org/springframework/spring/</a><br><img src="https://img-blog.csdnimg.cn/20201228162433977.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>Spring框架</tag>
      </tags>
  </entry>
  <entry>
    <title>VUE框架</title>
    <url>/2021/03/20/VUE%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<h2 id="VUE框架"><a href="#VUE框架" class="headerlink" title="VUE框架"></a>VUE框架</h2><p><img src="https://i.loli.net/2021/03/31/LzFi5UsY6feHGID.png" alt="logo.png"></p>
<p>VUE官网：<a href="https://cn.vuejs.org/">https://cn.vuejs.org/</a></p>
<p><strong>vue</strong> ：是一套用于构建用户界面的渐进式框架，发布于2014年2月。与其他大型框架不同的是，vue被设计为可以自底向上逐层应用的。vue的核心库只关注视图层，不仅易于上手，还便于与第三方库（如：vue-router，vue-resource，vuex）或既有项目整合。</p>
<span id="more"></span>

<p><strong>库和框架的区别：</strong></p>
<ol>
<li><p>库（如jQuery）:</p>
<p>库是工具，提供大量的API，体现了封装的思想、需要自己调用这些API</p>
</li>
<li><p>框架：</p>
<p>框架提供了一套完整解决方案，使用者要按照框架所规定的某种规范进行开发</p>
</li>
</ol>
<h3 id="安装和创建VUE框架："><a href="#安装和创建VUE框架：" class="headerlink" title="安装和创建VUE框架："></a>安装和创建VUE框架：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">先安装淘宝镜像，下载速度会快点</span><br><span class="line">npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br><span class="line">安装vue-cli:</span><br><span class="line">cnpm install -g vue-cli</span><br><span class="line">安装webpack：</span><br><span class="line">cnpm install webpack -g </span><br><span class="line">创建项目： &#x2F;&#x2F;my-vue是项目名称，自定义</span><br><span class="line">vue init webpack my-vue  </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>**vue的基本使用: **</p>
<ul>
<li>需要提供标签用于填充数据</li>
<li>引入vue.js库文件</li>
<li>可以使用vue的语法做功能了</li>
<li>把vue提供的数据填充到标签里面</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">......</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/VUe.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> home = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">	el:<span class="string">&#x27;#app&#x27;</span>,   <span class="comment">//el : 挂载区域</span></span></span><br><span class="line"><span class="javascript">    data:&#123;		<span class="comment">//data：模型数据对象</span></span></span><br><span class="line"><span class="javascript">    	name: <span class="string">&#x27;hello vue!!&#x27;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Vue模板语法："><a href="#Vue模板语法：" class="headerlink" title="Vue模板语法："></a>Vue模板语法：</h2><ul>
<li>插值表达式</li>
<li>指令</li>
<li>事件绑定</li>
<li>属性绑定</li>
<li>样式绑定</li>
<li>分支循环结构</li>
</ul>
<p><strong>指令：</strong></p>
<p>什么是指令</p>
<ul>
<li>指令的本质就是自定义属性</li>
<li>自定义属性就是标签里面的属性</li>
<li>指令的格式：以v-开始（比如v-cloak)</li>
</ul>
<p><strong>数据绑定指令：</strong></p>
<ul>
<li>v-text 填充纯文本<ul>
<li>相比插值表达式更简洁</li>
</ul>
</li>
<li>v-html 填充HTML片段<ul>
<li>存在安全问题</li>
<li>本网站内部数据可以使用，来自第三方的数据不可用</li>
</ul>
</li>
<li>v-pre 填充原始信息<ul>
<li>显示原始信息，跳过编译过程（分析编译过程）</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-cloak</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-text</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="comment">&lt;!-- v-text  填充纯文本--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&quot;msg1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="comment">&lt;!-- 填充HTML片段 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-pre</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="comment">&lt;!-- v-pre 跳过编译 直接显示标签中的文本--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> home = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            msg: <span class="string">&#x27;hello Vue!!&#x27;</span>,</span></span><br><span class="line"><span class="handlebars"><span class="xml">            msg1: &#x27;<span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>&#x27;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>数据响应式</strong></p>
<ul>
<li>如何理解响应式<ul>
<li>html5中的响应式（屏幕尺寸的变化导致样式的变化）</li>
<li>数据响应式（数据的变化导致页面的内容的变化）</li>
</ul>
</li>
<li>什么是数据绑定<ul>
<li>数据绑定: 将数据填充到标签中</li>
</ul>
</li>
<li>v-once  只编译一次<ul>
<li>显示内容之后不再具有响应式功能</li>
</ul>
</li>
</ul>
<p><strong>双向数据绑定</strong></p>
<p><img src="https://i.loli.net/2021/03/31/6iko8JTOCIrb2z3.png" alt="双向数据绑定.png"></p>
<p>双向数据绑定指令：</p>
<ul>
<li><p>v-model指令用法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;name&quot;</span>/&gt;</span>  </span><br></pre></td></tr></table></figure>



<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;name&quot;</span>/&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> home = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            name: <span class="string">&#x27;hello Vue!!&#x27;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>MVVM设计思想</strong></p>
<ul>
<li>M（model）</li>
<li>V（view）</li>
<li>VM（view-model）</li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2021/03/31/NhqrcybdftFIn69.png" alt="MVVM设计思想.png"></p>
<p><strong>事件绑定</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;handle1&quot;</span>&gt;</span>点击1<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;handle(123,456,$event)&quot;</span>&gt;</span>点击2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> home = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line">            name: 0</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">            handle: <span class="function"><span class="keyword">function</span>(<span class="params">p,p1,event</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(p,p1)</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(event.target.innerHTML)</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.name++;</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="javascript">            handle1:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(event.target.innerHTML)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>VUE如何处理事件：</p>
<ul>
<li><p>v-on指令用法: 点击事件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">v-on:click</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>v-on 的简写：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>事件函数的调用方式</p>
<ul>
<li><p>直接绑定函数名称</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;name&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>调用函数</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;name()&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>事件函数参数传递</p>
<ul>
<li><p>普通参数和事件对象</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;name(&#x27;hi&#x27;,$event)&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>事件绑定传递参数：</p>
<ol>
<li>如果事件直接绑定函数名称，那么默认会传递事件对象作为事件函数的第一参数</li>
<li>如果事件绑定函数调用，那么事件对象必须作为最后一个参数显示传递，并且事件对象的名称必须是$event</li>
</ol>
<p><strong>事件修饰符</strong></p>
<ul>
<li><p>.stop  阻止冒</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop</span>=<span class="string">&quot;handle&quot;</span>&gt;</span>跳转<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>.prevent 阻止默认行为</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.prevent</span>=<span class="string">&quot;handle&quot;</span>&gt;</span>跳转<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>按键修饰符</strong></p>
<ul>
<li><p>.enter 回车键 作用于输入域</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.enter</span>=<span class="string">&quot;submit&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>.delete 删除键</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.delete</span>=<span class="string">&quot;handle&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>属性绑定</strong></p>
<p>vue如何动态处理属性：</p>
<ul>
<li><p>v-bind：指令用法</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>跳转<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>简写：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>跳转<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>VUE框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/03/19/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>javaWeb</title>
    <url>/2021/03/22/javaWeb/</url>
    <content><![CDATA[<h2 id="javaWeb基本概念"><a href="#javaWeb基本概念" class="headerlink" title="javaWeb基本概念"></a>javaWeb基本概念</h2><p>web开发：</p>
<pre><code>1. web，网页的意思
 2. 静态web
      1. HTML、css
      2. 提供给所有人看的数据始终不会发生变化
 3. 动态web
      1. 淘宝，京东。。。。几乎是所有的网站
      2. 提供给所有人看的数据始终会发生变化，每个人在不同的时间，不同的地点看到的信息各不相同
      3. 技术栈：Servlet/jsp，ASP，PHP
</code></pre>
<span id="more"></span>

<p>在java中动态web资源开发的技术统称为javaWeb</p>
<h3 id="Web应用程序"><a href="#Web应用程序" class="headerlink" title="Web应用程序"></a>Web应用程序</h3><p>web用用程序：可以提供浏览器访问的程序</p>
<ol>
<li>a.html   b.html …..多个web资源，这些web资源可以被外界访问，对外界提供服务；</li>
<li>你们能访问到的任何一个页面或资源，都存在于这个世界的某个角落的计算机上</li>
<li>URL</li>
<li>这个统一的web资源都会被放在同一个人文件夹下，web应用程序—&gt;Tomcat: 服务器</li>
<li>一个web应用由多部分组成（静态web，动态web)<ol>
<li>html 、css、js</li>
<li>jsp、servlet</li>
<li>java程序</li>
<li>jar包</li>
<li>配置文件（properties）</li>
</ol>
</li>
</ol>
<p>web应用程序编写完毕后，若想提供给外界访问：需要一个服务器来统一管理</p>
<h2 id="静态web"><a href="#静态web" class="headerlink" title="静态web"></a>静态web</h2><ol>
<li>XX**.htm<strong>、XX</strong>.html**,这些都是网页的后缀，如果服务器上一直存在这些东西，我们就可以直接进行读取，通络；</li>
</ol>
<p><img src="https://i.loli.net/2021/03/24/hekDKHEPj8VJ5uI.png" alt="静态web.png"></p>
<ol start="2">
<li>静态web存在的缺点<ol>
<li>web页面无法动态更新，所有用户看到都是同一个页面<ul>
<li>轮播图，点击特效：伪动态</li>
<li>JavaScript（实际开发中，它用的最多）</li>
<li>VBScript</li>
</ul>
</li>
<li>它无法和数据库交互（数据无法持久化，用户无法交互）</li>
</ol>
</li>
</ol>
<h2 id="动态web"><a href="#动态web" class="headerlink" title="动态web"></a>动态web</h2><p>页面会动态展示：web的页面展示的效果因人而异</p>
<p><img src="https://i.loli.net/2021/03/24/PWOUSVQlXGYTuNg.png" alt="动态web.png"></p>
<p>缺点：</p>
<ul>
<li>加入服务器的动态web资源出现了错误，我们需要重新编写我们的<strong>后台程序</strong> ，重新发布；<ul>
<li>停机维护</li>
</ul>
</li>
</ul>
<p>优点：</p>
<ul>
<li>web页面可以动态更新所有用户看到的都不是同一个页面</li>
<li>它可以与数据库交互（数据持久化： 注册、商品信息、用户信息……）</li>
</ul>
<p><img src="https://i.loli.net/2021/03/24/gLmsc7fOHQXzwW2.png" alt="动态web优点.png"></p>
<h2 id="web服务器"><a href="#web服务器" class="headerlink" title="web服务器"></a>web服务器</h2><h3 id="技术讲解"><a href="#技术讲解" class="headerlink" title="技术讲解"></a>技术讲解</h3><p>ASP：</p>
<ul>
<li>微软：国内最早流行的就是ASP</li>
<li>在HTML中嵌入了VB的脚本，ASP+COM</li>
<li>在ASP开发中，基本一个页面都有几千行的业务代码，页面及其混乱</li>
<li>维护成本高</li>
<li>C#</li>
<li>lls</li>
</ul>
<p>PHP：</p>
<ul>
<li>PHP开发速度快，功能很强大，跨平台，代码很简单（70%，wp）</li>
<li>无法承载大量访问量的情况（局限性）</li>
</ul>
<p>JSP/servlet：</p>
<p>B/S：浏览器和服务器</p>
<p>C/S：客户端和服务器</p>
<ul>
<li>sun公司主推的B/S架构</li>
<li>基于java语言的（所有的大公司，或者一些开源的组件，都是用java写的）</li>
<li>可以承载三高问题带来的影响</li>
<li>语法像ASP，ASP——&gt;JSP，加强市场强度</li>
</ul>
<h3 id="web服务器-1"><a href="#web服务器-1" class="headerlink" title="web服务器"></a>web服务器</h3><p>服务器是一种被动的操作，用来处理用户的一些请求和给用户一些响应信息</p>
<p><strong>lls</strong></p>
<p>微软的：ASP…，windows中自带</p>
<p><strong>Tomcat:</strong></p>
<p><img src="https://i.loli.net/2021/03/24/9T7o3S81zqCMJG4.jpg" alt="tomcat.jpg"></p>
<p>Tomcat是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目，由<a href="https://baike.baidu.com/item/Apache/6265">Apache</a>、Sun 和其他一些公司及个人共同开发而成。由于有了Sun 的参与和支持，最新的Servlet 和JSP 规范总是能在Tomcat 中得到体现，Tomcat 5支持最新的Servlet 2.4 和JSP 2.0 规范。因为Tomcat 技术先进、性能稳定，而且免费，因而深受Java 爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的Web 应用服务器。</p>
<p>Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用<a href="https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1%E5%99%A8">服务器</a>，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。对于一个初学者来说，可以这样认为，当在一台机器上配置好Apache 服务器，可利用它响应<a href="https://baike.baidu.com/item/HTML">HTML</a>（<a href="https://baike.baidu.com/item/%E6%A0%87%E5%87%86%E9%80%9A%E7%94%A8%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80/6805073">标准通用标记语言</a>下的一个应用）页面的访问请求。实际上Tomcat是Apache 服务器的扩展，但运行时它是独立运行的，所以当你运行tomcat 时，它实际上作为一个与Apache 独立的进程单独运行的。</p>
<p>Tomcat 实际上运行JSP 页面和Servlet。目前Tomcat最新版本为9.0.41</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>javaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>java基础语法</title>
    <url>/2021/03/21/java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h2 id="java-基础语法"><a href="#java-基础语法" class="headerlink" title="java 基础语法"></a>java 基础语法</h2><h3 id="1-注释"><a href="#1-注释" class="headerlink" title="1.注释"></a>1.注释</h3><ol>
<li><p>单行注释：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// :表示单行注释</span></span><br></pre></td></tr></table></figure></li>
<li><p>多行注释：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">内容   </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/**/: 表示多行注释</span></span><br></pre></td></tr></table></figure></li>
<li><p>文档注释：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*  内容</span></span><br><span class="line"><span class="comment">*  内容</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/** 内容 */</span>: 表示多行注释</span><br></pre></td></tr></table></figure>

<span id="more"></span></li>
</ol>
<p><strong>单行注释与多行注释的作用：</strong></p>
<ol>
<li>对所写的程序进行解释说明，增强可读性</li>
<li>调试所写的代码</li>
</ol>
<p><strong>特点：</strong></p>
<p>​    单行注释和多行注释，所注释的内容不参与编译，就是说编译后生的.class文件中不包含注释掉的信息</p>
<p><strong>文档注释的使用：</strong></p>
<ol>
<li>文档注释的内容可以被JDK提供的工具 javadoc所解析，生成一套以网页文件形式体现的该程序的说明文档</li>
<li>多行注释不可以嵌套使用</li>
</ol>
<h2 id="Java-API-文档"><a href="#Java-API-文档" class="headerlink" title="Java API 文档"></a>Java API 文档</h2><p><strong>API：</strong> application programming interface 习惯上：将语言提供的类库，都称为api</p>
<p><strong>API文档：</strong> 针对于提供的类库如何选择，给的一个说明书，类似于《新华字典》</p>
<h2 id="关键字与保留字"><a href="#关键字与保留字" class="headerlink" title="关键字与保留字"></a>关键字与保留字</h2><ol>
<li><p><strong>关键字</strong>（keyword）的定义和特点</p>
<ol>
<li><strong>定义：</strong>被java语言赋予了特殊含义，用做专门用途的字符串（单词）</li>
<li><strong>特点：</strong>关键字中所有字母都为小写</li>
</ol>
<p><strong>用于定义数据类型的关键字</strong></p>
<p>calss、  interface、  enum、  byte、  short、  int、  long、  float、  double、  char、  boolean、  void</p>
<p><strong>用于定义流程控制的关键字</strong></p>
<p>if、 else、 switch、 case、 default、 while、 do、 for、 break、 continue、return</p>
<p><strong>用于定义访问权限修饰符的关键字</strong></p>
<p>private、 protected、 public</p>
<p><strong>等等…..</strong></p>
</li>
<li><p><strong>保留字</strong>（reserved word）</p>
<p>​    java保留字：现有java版本尚未使用，但以后版本可能会作为关键字使用。</p>
<p>​    自己命名表示符时要避免使用这些保留字</p>
<p>​    <strong>goto、 const</strong></p>
</li>
</ol>
<h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><ol>
<li><p><strong>标识符：</strong></p>
<ol>
<li>java对各种变量、方法和类等要素命名时使用的字符列称为标识符</li>
<li>凡是可以自己起名字的地方都叫标识符</li>
</ol>
</li>
<li><p><strong>定义合法标识符规则：</strong></p>
<ol>
<li>由26个英文字母大小写，0-9，_或$组成</li>
<li>数字不可以开头</li>
<li>不可以使用关键字和保留字，但能包含关键字和保留字</li>
<li>java中严格区分大小写，长度无限制</li>
<li>标识符不能包含空格</li>
</ol>
<p>字（字母）、下（下划线）、美（美元符号）、人（人民币符号）、数（数字）、的顺序</p>
</li>
</ol>
<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>​    运算符是一种特殊的符号，用以表示数据的运算、赋值和比较等</p>
<h3 id="常见的运算符："><a href="#常见的运算符：" class="headerlink" title="常见的运算符："></a>常见的运算符：</h3><pre><code>1. 算数运算符
 2. 赋值运算符
 3. 比较运算符（关系运算符）
 4. 逻辑运运算符
 5. 位运算符（比较少用）
 6. 三元运算符
</code></pre>
<h4 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h4><table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">运算</th>
<th align="center">示例</th>
<th align="center">结果</th>
</tr>
</thead>
<tbody><tr>
<td align="center">+</td>
<td align="center">正号</td>
<td align="center">+3</td>
<td align="center">3</td>
</tr>
<tr>
<td align="center">-</td>
<td align="center">负号</td>
<td align="center">b=4;  -b</td>
<td align="center">-4</td>
</tr>
<tr>
<td align="center">+</td>
<td align="center">加</td>
<td align="center">5+5</td>
<td align="center">10</td>
</tr>
<tr>
<td align="center">-</td>
<td align="center">减</td>
<td align="center">6-4</td>
<td align="center">2</td>
</tr>
<tr>
<td align="center">*</td>
<td align="center">乘</td>
<td align="center">3*5</td>
<td align="center">15</td>
</tr>
<tr>
<td align="center">/</td>
<td align="center">除</td>
<td align="center">5/5</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">%</td>
<td align="center">取模(取余)</td>
<td align="center">7%5</td>
<td align="center">2</td>
</tr>
<tr>
<td align="center">++</td>
<td align="center">自增(前)：先运算后取值</td>
<td align="center">a=2; b=++a</td>
<td align="center">a=3; b=3</td>
</tr>
<tr>
<td align="center">++</td>
<td align="center">自增(后)：先取值后运算</td>
<td align="center">a=2; b=a++</td>
<td align="center">a=3; b=2</td>
</tr>
<tr>
<td align="center">–</td>
<td align="center">自减(前)：先运算后取值</td>
<td align="center">a=2; b=–a</td>
<td align="center">a=1; b=1</td>
</tr>
<tr>
<td align="center">–</td>
<td align="center">自减(后)：先取值后运算</td>
<td align="center">a=2; b=a–</td>
<td align="center">a=1; b=2</td>
</tr>
<tr>
<td align="center">+</td>
<td align="center">字符串连接</td>
<td align="center">“he”+”llo”</td>
<td align="center">hello</td>
</tr>
</tbody></table>
<h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><p>符号：=</p>
<ol>
<li>当“ = ” 两侧数据类型不一致时，可以使用自动类型转换或者使用强制类型转换原则进行处理</li>
<li>支持连续赋值</li>
</ol>
<p>扩展赋值运算符：+=  、-=、 *=、 /=、 %=</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> j2 = <span class="number">10</span>; 		<span class="comment">//赋值</span></span><br><span class="line"><span class="comment">//连续赋值</span></span><br><span class="line"><span class="keyword">int</span> j1,j2;</span><br><span class="line">j1 = j2 = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  +=</span></span><br><span class="line"><span class="keyword">int</span> num1 = <span class="number">10</span>;</span><br><span class="line">num1 += <span class="number">2</span>;  <span class="comment">//num1 = num1+2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  -=</span></span><br><span class="line"><span class="keyword">int</span> num1 = <span class="number">10</span>;</span><br><span class="line">num1 -= <span class="number">2</span>;  <span class="comment">//num1 = num1-2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  *=</span></span><br><span class="line"><span class="keyword">int</span> num1 = <span class="number">10</span>;</span><br><span class="line">num1 *= <span class="number">2</span>;  <span class="comment">//num1 = num1*2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  /=</span></span><br><span class="line"><span class="keyword">int</span> num1 = <span class="number">10</span>;</span><br><span class="line">num1 /= <span class="number">2</span>;  <span class="comment">//num1 = num1/2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  %=</span></span><br><span class="line"><span class="keyword">int</span> num1 = <span class="number">10</span>;</span><br><span class="line">num1 %= <span class="number">2</span>;  <span class="comment">//num1 = num1%2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><p>比较运算符的结果都是boolean型，也就是要么是 true，要么是false</p>
<p><strong>比较运算符“ == ” 不能误写成“ = ”</strong></p>
<table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">运算</th>
<th align="center">示例</th>
<th align="center">结果</th>
</tr>
</thead>
<tbody><tr>
<td align="center">==</td>
<td align="center">相等于</td>
<td align="center">4==3</td>
<td align="center">false</td>
</tr>
<tr>
<td align="center">!=</td>
<td align="center">不等于</td>
<td align="center">4!=3</td>
<td align="center">true</td>
</tr>
<tr>
<td align="center">&lt;</td>
<td align="center">小于</td>
<td align="center">4&lt;3</td>
<td align="center">false</td>
</tr>
<tr>
<td align="center">&gt;</td>
<td align="center">大于</td>
<td align="center">4&gt;3</td>
<td align="center">true</td>
</tr>
<tr>
<td align="center">&lt;=</td>
<td align="center">小等于</td>
<td align="center">4&lt;=3</td>
<td align="center">true</td>
</tr>
<tr>
<td align="center">&gt;=</td>
<td align="center">大等于</td>
<td align="center">4&gt;=3</td>
<td align="center">true</td>
</tr>
<tr>
<td align="center">instanceof</td>
<td align="center">检查是否是类的对象</td>
<td align="center">“hello” instanceof</td>
<td align="center">true</td>
</tr>
</tbody></table>
<h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><p>&amp;：逻辑与</p>
<p>&amp;&amp;：短路与</p>
<p>|：逻辑或</p>
<p>||：短路或</p>
<p>!：逻辑非</p>
<p>^：逻辑异或</p>
<table>
<thead>
<tr>
<th align="center">a</th>
<th align="center">b</th>
<th align="center">a&amp;b</th>
<th align="center">a&amp;&amp;b</th>
<th align="center">a|b</th>
<th align="center">a||b</th>
<th align="center">!a</th>
<th align="center">a^b</th>
</tr>
</thead>
<tbody><tr>
<td align="center">true</td>
<td align="center">true</td>
<td align="center"><strong>true</strong></td>
<td align="center"><strong>true</strong></td>
<td align="center"><strong>true</strong></td>
<td align="center"><strong>true</strong></td>
<td align="center"><strong>false</strong></td>
<td align="center"><strong>false</strong></td>
</tr>
<tr>
<td align="center">true</td>
<td align="center">false</td>
<td align="center"><strong>false</strong></td>
<td align="center"><strong>false</strong></td>
<td align="center"><strong>true</strong></td>
<td align="center"><strong>true</strong></td>
<td align="center"><strong>false</strong></td>
<td align="center"><strong>true</strong></td>
</tr>
<tr>
<td align="center">false</td>
<td align="center">true</td>
<td align="center"><strong>false</strong></td>
<td align="center"><strong>false</strong></td>
<td align="center"><strong>true</strong></td>
<td align="center"><strong>true</strong></td>
<td align="center"><strong>true</strong></td>
<td align="center"><strong>true</strong></td>
</tr>
<tr>
<td align="center">false</td>
<td align="center">false</td>
<td align="center"><strong>false</strong></td>
<td align="center"><strong>false</strong></td>
<td align="center"><strong>false</strong></td>
<td align="center"><strong>false</strong></td>
<td align="center"><strong>true</strong></td>
<td align="center"><strong>false</strong></td>
</tr>
</tbody></table>
<p><strong>区分&amp;和&amp;&amp;：</strong></p>
<ol>
<li><strong>相同点1：</strong>&amp; 与 &amp;&amp; d的运算结果相同</li>
<li><strong>相同点2：</strong>当符号左边是true时，二者都会执行符号右边的运算</li>
<li><strong>不同点：</strong>当符号左边是false时，&amp;继续执行符号右边的运算。&amp;&amp;不再执行符号右边的运算</li>
</ol>
<p><strong>区分 | 与 || ：</strong></p>
<ol>
<li><strong>相同点1：</strong>| 与 | | 的运算结果相同</li>
<li><strong>相同点2：</strong>当符号左边是false时，二者都会执行符号右边的运算</li>
<li><strong>不同点：</strong>当符号左边是true时，| 继续执行右边的运算，而 | | 不再执行符号右边的运算</li>
</ol>
<h4 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h4><table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">运算</th>
<th align="center">示例</th>
</tr>
</thead>
<tbody><tr>
<td align="center">&lt;&lt;</td>
<td align="center">左移</td>
<td align="center">3&lt;&lt;2=12 ——&gt;  3 * 2 * 2=12</td>
</tr>
<tr>
<td align="center">&gt;&gt;</td>
<td align="center">右移</td>
<td align="center">3&gt;&gt;1=1 ——&gt; 3/2 =1</td>
</tr>
<tr>
<td align="center">&gt;&gt;&gt;</td>
<td align="center">无符号右移</td>
<td align="center">3&gt;&gt;&gt;1=1——&gt; 3/2=1</td>
</tr>
<tr>
<td align="center">&amp;</td>
<td align="center">与运算</td>
<td align="center">6 &amp; 3 = 2</td>
</tr>
<tr>
<td align="center">|</td>
<td align="center">或运算</td>
<td align="center">6 | 3 = 7</td>
</tr>
<tr>
<td align="center">^</td>
<td align="center">异或运算</td>
<td align="center">6 ^ 3 = 5</td>
</tr>
<tr>
<td align="center">~</td>
<td align="center">取反运算</td>
<td align="center">~6 = -7</td>
</tr>
</tbody></table>
<p>位运算符操作的都是整型的数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> &lt;&lt; : 在一定范围内，每向左移一位，就相当于*<span class="number">2</span></span><br><span class="line">	i&lt;&lt;<span class="number">3</span>; 结果为i乘以<span class="number">2</span>的<span class="number">3</span>次方</span><br><span class="line">	i&lt;&lt;<span class="number">9</span>; 结果为i乘以<span class="number">2</span>的<span class="number">9</span>次方</span><br><span class="line"><span class="number">2.</span> &gt;&gt; : 在一定范围内，每向右移一位，就相当于 /<span class="number">2</span></span><br><span class="line"></span><br><span class="line">    </span><br></pre></td></tr></table></figure>



<h4 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h4><ol>
<li><p>格式：</p>
<p>​    <strong>( 条件表达式 )? 表达式1：表达式2</strong></p>
<p>​    条件表达式为<strong>true</strong>时，运算结果为<strong>表达式1</strong></p>
<p>​    条件表达式为<strong>false</strong>时，运算结果为<strong>表达式2</strong></p>
</li>
<li><p>表达式1和表达式2为同种类型</p>
</li>
<li><p>三元运算符与 if - else 的联系与区别：</p>
<ol>
<li>三元运算符可简化 if - else语句</li>
<li>三元运算符要求必须返回一个结果</li>
<li>if 后的代码块可以有多个语句</li>
</ol>
</li>
</ol>
<h2 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h2><ol>
<li>运算符有不同的优先级，所谓优先级就是表达式运算中的运算顺序</li>
<li>只有单目运算符、三元运算符、赋值运算符是从左向右运算的</li>
</ol>
<h2 id="程序的流程控制"><a href="#程序的流程控制" class="headerlink" title="程序的流程控制"></a>程序的流程控制</h2><ol>
<li><p>流程控制语句是用来控制程序中各语句执行顺序的语句，可以把语句组合成能完成一定功能的小逻辑模块</p>
</li>
<li><p>其流程控制方式采用结构化程设计中规定的三种基本流程结构，即：</p>
<ol>
<li><p>顺序结构</p>
<p>程序从上到下逐行的执行，中间没有任何判断和跳转</p>
</li>
<li><p>分支结构</p>
<p>根据条件，选择性的执行某段代码</p>
<p>有 if - else 和 switch-case两种分支语句 </p>
</li>
<li><p>循环结构</p>
<p>根据循环条件，重复性的执行某段代码</p>
<p>有while、do-while、for 三种循环语局</p>
<p>注: JDK1.5提供了foreach循环，方便的遍历集合、数组元素</p>
</li>
</ol>
</li>
</ol>
<h4 id="if-else结构："><a href="#if-else结构：" class="headerlink" title="if-else结构："></a>if-else结构：</h4><p><img src="https://raw.githubusercontent.com/0riginal-sin/image.github.io/main/if%E5%88%A4%E6%96%AD.jpg"></p>
<h3 id="如何从键盘获取不同类型的变量"><a href="#如何从键盘获取不同类型的变量" class="headerlink" title="如何从键盘获取不同类型的变量"></a>如何从键盘获取不同类型的变量</h3><p>​    <strong>使用Scanner类</strong></p>
<p>具体实现步骤：</p>
<ol>
<li>导入包： import java.uitl.Scanner;</li>
<li>Scanner的实例化：Scanner  scan = newScanner(System.in);</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line">Class ScannerTest&#123;</span><br><span class="line">    Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="keyword">int</span> num = scan.nextInt();</span><br><span class="line">    System.out.println(num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>JDK安装</title>
    <url>/2021/03/20/java%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h2 id="安装jdk"><a href="#安装jdk" class="headerlink" title="安装jdk"></a>安装jdk</h2><ol>
<li>百度搜索JDK8，找到下载地址</li>
<li>同意协议，下载电脑对应的版本</li>
<li>双击安装JDK</li>
<li><strong>记住安装路径</strong></li>
<li>配置环境变量</li>
</ol>
<span id="more"></span>

<ol>
<li>我的电脑–&gt;右键–&gt;属性</li>
<li>配置环境变量JAVA_HOME</li>
</ol>
<p><img src="https://raw.githubusercontent.com/0riginal-sin/image.github.io/main/java%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE.png"></p>
<ol start="3">
<li>然后配置path变量</li>
</ol>
<p><img src="https://raw.githubusercontent.com/0riginal-sin/image.github.io/main/JDK%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE.png"></p>
<ol start="4">
<li>测试jdk是否安装成功<ol>
<li>windows+r输入cmd打开dos命令窗口</li>
<li>输入 java -version</li>
<li>如下图所示，出现版本号就安装成功了</li>
</ol>
</li>
</ol>
<p><img src="https://raw.githubusercontent.com/0riginal-sin/image.github.io/main/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE%E6%88%90%E5%8A%9F.png"></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>禁止C盘安装软件</title>
    <url>/2021/03/31/%E7%A6%81%E6%AD%A2C%E7%9B%98%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="禁止C盘安装软件"><a href="#禁止C盘安装软件" class="headerlink" title="禁止C盘安装软件"></a>禁止C盘安装软件</h2><p>一般的软件在安装时，系统会将默认路径设置为C:/Program Files/XXXX，而如果按照上面的想法的话，每一个软件都要重新选路径。</p>
<ul>
<li>WIN+R运行regedit打开注册表编辑器</li>
<li>定位到HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion</li>
<li>在右边的面板中找到ProgramFilesDir</li>
<li>双击编辑，将键值设置为自己需要的路径，比如：D:\（自定义名称）</li>
<li>确定保存，退出注册表编辑器</li>
</ul>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>三百六十行，行行报异常</title>
    <url>/2021/03/22/%E9%94%99%E8%AF%AF%E6%8A%A5%E5%91%8A/</url>
    <content><![CDATA[<p><strong>报错：</strong>Invalid bound statement (not found): cn.kgc.dao.UserMapper.getList</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">org.apache.ibatis.binding.BindingException: <span class="function">Invalid bound <span class="title">statement</span> <span class="params">(not found)</span>: cn.kgc.dao.UserMapper.getList</span></span><br><span class="line"><span class="function">	at org.apache.ibatis.binding.MapperMethod$SqlCommand.&lt;init&gt;<span class="params">(MapperMethod.java:<span class="number">178</span>)</span></span></span><br><span class="line"><span class="function">	at org.apache.ibatis.binding.MapperMethod.&lt;init&gt;<span class="params">(MapperMethod.java:<span class="number">38</span>)</span></span></span><br><span class="line"><span class="function">	at org.apache.ibatis.binding.MapperProxy.<span class="title">cachedMapperMethod</span><span class="params">(MapperProxy.java:<span class="number">49</span>)</span></span></span><br><span class="line"><span class="function">	at org.apache.ibatis.binding.MapperProxy.<span class="title">invoke</span><span class="params">(MapperProxy.java:<span class="number">42</span>)</span></span></span><br><span class="line"><span class="function">	at com.sun.proxy.$Proxy10.<span class="title">getList</span><span class="params">(Unknown Source)</span></span></span><br><span class="line"><span class="function">	at cn.kgc.service.impl.UserServiceImpl.<span class="title">getList</span><span class="params">(UserServiceImpl.java:<span class="number">19</span>)</span></span></span><br><span class="line"><span class="function">	at cn.kgc.controller.UserController.<span class="title">getList</span><span class="params">(UserController.java:<span class="number">24</span>)</span></span></span><br><span class="line"><span class="function">	at sun.reflect.NativeMethodAccessorImpl.<span class="title">invoke0</span><span class="params">(Native Method)</span></span></span><br><span class="line"><span class="function">	at sun.reflect.NativeMethodAccessorImpl.<span class="title">invoke</span><span class="params">(NativeMethodAccessorImpl.java:<span class="number">62</span>)</span></span></span><br><span class="line"><span class="function">	at sun.reflect.DelegatingMethodAccessorImpl.<span class="title">invoke</span><span class="params">(DelegatingMethodAccessorImpl.java:<span class="number">43</span>)</span></span></span><br><span class="line"><span class="function">	at java.lang.reflect.Method.<span class="title">invoke</span><span class="params">(Method.java:<span class="number">498</span>)</span></span></span><br><span class="line"><span class="function">	at org.springframework.web.method.support.InvocableHandlerMethod.<span class="title">invoke</span><span class="params">(InvocableHandlerMethod.java:<span class="number">215</span>)</span></span></span><br><span class="line"><span class="function">	at org.springframework.web.method.support.InvocableHandlerMethod.<span class="title">invokeForRequest</span><span class="params">(InvocableHandlerMethod.java:<span class="number">132</span>)</span></span></span><br><span class="line"><span class="function">	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.<span class="title">invokeAndHandle</span><span class="params">(ServletInvocableHandlerMethod.java:<span class="number">104</span>)</span></span></span><br><span class="line"><span class="function">	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.<span class="title">invokeHandleMethod</span><span class="params">(RequestMappingHandlerAdapter.java:<span class="number">743</span>)</span></span></span><br><span class="line"><span class="function">	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.<span class="title">handleInternal</span><span class="params">(RequestMappingHandlerAdapter.java:<span class="number">672</span>)</span></span></span><br><span class="line"><span class="function">	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.<span class="title">handle</span><span class="params">(AbstractHandlerMethodAdapter.java:<span class="number">82</span>)</span></span></span><br><span class="line"><span class="function">	at org.springframework.web.servlet.DispatcherServlet.<span class="title">doDispatch</span><span class="params">(DispatcherServlet.java:<span class="number">919</span>)</span></span></span><br><span class="line"><span class="function">	at org.springframework.web.servlet.DispatcherServlet.<span class="title">doService</span><span class="params">(DispatcherServlet.java:<span class="number">851</span>)</span></span></span><br><span class="line"><span class="function">	at org.springframework.web.servlet.FrameworkServlet.<span class="title">processRequest</span><span class="params">(FrameworkServlet.java:<span class="number">953</span>)</span></span></span><br><span class="line"><span class="function">	at org.springframework.web.servlet.FrameworkServlet.<span class="title">doGet</span><span class="params">(FrameworkServlet.java:<span class="number">844</span>)</span></span></span><br><span class="line"><span class="function">	at javax.servlet.http.HttpServlet.<span class="title">service</span><span class="params">(HttpServlet.java:<span class="number">626</span>)</span></span></span><br><span class="line"><span class="function">	at org.springframework.web.servlet.FrameworkServlet.<span class="title">service</span><span class="params">(FrameworkServlet.java:<span class="number">829</span>)</span></span></span><br><span class="line"><span class="function">	at javax.servlet.http.HttpServlet.<span class="title">service</span><span class="params">(HttpServlet.java:<span class="number">733</span>)</span></span></span><br><span class="line"><span class="function">	at org.apache.catalina.core.ApplicationFilterChain.<span class="title">internalDoFilter</span><span class="params">(ApplicationFilterChain.java:<span class="number">231</span>)</span></span></span><br><span class="line"><span class="function">	at org.apache.catalina.core.ApplicationFilterChain.<span class="title">doFilter</span><span class="params">(ApplicationFilterChain.java:<span class="number">166</span>)</span></span></span><br><span class="line"><span class="function">	at org.apache.tomcat.websocket.server.WsFilter.<span class="title">doFilter</span><span class="params">(WsFilter.java:<span class="number">53</span>)</span></span></span><br><span class="line"><span class="function">	at org.apache.catalina.core.ApplicationFilterChain.<span class="title">internalDoFilter</span><span class="params">(ApplicationFilterChain.java:<span class="number">193</span>)</span></span></span><br><span class="line"><span class="function">	at org.apache.catalina.core.ApplicationFilterChain.<span class="title">doFilter</span><span class="params">(ApplicationFilterChain.java:<span class="number">166</span>)</span></span></span><br><span class="line"><span class="function">	at org.springframework.web.filter.CharacterEncodingFilter.<span class="title">doFilterInternal</span><span class="params">(CharacterEncodingFilter.java:<span class="number">88</span>)</span></span></span><br><span class="line"><span class="function">	at org.springframework.web.filter.OncePerRequestFilter.<span class="title">doFilter</span><span class="params">(OncePerRequestFilter.java:<span class="number">106</span>)</span></span></span><br><span class="line"><span class="function">	at org.apache.catalina.core.ApplicationFilterChain.<span class="title">internalDoFilter</span><span class="params">(ApplicationFilterChain.java:<span class="number">193</span>)</span></span></span><br><span class="line"><span class="function">	at org.apache.catalina.core.ApplicationFilterChain.<span class="title">doFilter</span><span class="params">(ApplicationFilterChain.java:<span class="number">166</span>)</span></span></span><br><span class="line"><span class="function">	at org.apache.catalina.core.StandardWrapperValve.<span class="title">invoke</span><span class="params">(StandardWrapperValve.java:<span class="number">202</span>)</span></span></span><br><span class="line"><span class="function">	at org.apache.catalina.core.StandardContextValve.<span class="title">invoke</span><span class="params">(StandardContextValve.java:<span class="number">97</span>)</span></span></span><br><span class="line"><span class="function">	at org.apache.catalina.authenticator.AuthenticatorBase.<span class="title">invoke</span><span class="params">(AuthenticatorBase.java:<span class="number">542</span>)</span></span></span><br><span class="line"><span class="function">	at org.apache.catalina.core.StandardHostValve.<span class="title">invoke</span><span class="params">(StandardHostValve.java:<span class="number">143</span>)</span></span></span><br><span class="line"><span class="function">	at org.apache.catalina.valves.ErrorReportValve.<span class="title">invoke</span><span class="params">(ErrorReportValve.java:<span class="number">92</span>)</span></span></span><br><span class="line"><span class="function">	at org.apache.catalina.valves.AbstractAccessLogValve.<span class="title">invoke</span><span class="params">(AbstractAccessLogValve.java:<span class="number">690</span>)</span></span></span><br><span class="line"><span class="function">	at org.apache.catalina.core.StandardEngineValve.<span class="title">invoke</span><span class="params">(StandardEngineValve.java:<span class="number">78</span>)</span></span></span><br><span class="line"><span class="function">	at org.apache.catalina.connector.CoyoteAdapter.<span class="title">service</span><span class="params">(CoyoteAdapter.java:<span class="number">343</span>)</span></span></span><br><span class="line"><span class="function">	at org.apache.coyote.http11.Http11Processor.<span class="title">service</span><span class="params">(Http11Processor.java:<span class="number">374</span>)</span></span></span><br><span class="line"><span class="function">	at org.apache.coyote.AbstractProcessorLight.<span class="title">process</span><span class="params">(AbstractProcessorLight.java:<span class="number">65</span>)</span></span></span><br><span class="line"><span class="function">	at org.apache.coyote.AbstractProtocol$ConnectionHandler.<span class="title">process</span><span class="params">(AbstractProtocol.java:<span class="number">888</span>)</span></span></span><br><span class="line"><span class="function">	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.<span class="title">doRun</span><span class="params">(NioEndpoint.java:<span class="number">1597</span>)</span></span></span><br><span class="line"><span class="function">	at org.apache.tomcat.util.net.SocketProcessorBase.<span class="title">run</span><span class="params">(SocketProcessorBase.java:<span class="number">49</span>)</span></span></span><br><span class="line"><span class="function">	at java.util.concurrent.ThreadPoolExecutor.<span class="title">runWorker</span><span class="params">(ThreadPoolExecutor.java:<span class="number">1149</span>)</span></span></span><br><span class="line"><span class="function">	at java.util.concurrent.ThreadPoolExecutor$Worker.<span class="title">run</span><span class="params">(ThreadPoolExecutor.java:<span class="number">624</span>)</span></span></span><br><span class="line"><span class="function">	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.<span class="title">run</span><span class="params">(TaskThread.java:<span class="number">61</span>)</span></span></span><br><span class="line"><span class="function">	at java.lang.Thread.<span class="title">run</span><span class="params">(Thread.java:<span class="number">748</span>)</span></span></span><br></pre></td></tr></table></figure>

<p><strong>解决方法：</strong></p>
<p><img src="https://i.loli.net/2021/03/24/9Fs2AvT8fOcDSK5.png" alt="错误报告.jpg"></p>
]]></content>
      <categories>
        <category>代码报错信息</category>
      </categories>
      <tags>
        <tag>异常报告</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML</title>
    <url>/2021/03/30/HTML/</url>
    <content><![CDATA[<h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><p>能够写出基本的html页面（里面包含图片，链接，文字等网页元素标签）</p>
<span id="more"></span>

<p><img src="https://i.loli.net/2021/03/30/fZ2qjROEiCgILoD.png" alt="html主体思路.png"></p>
<h2 id="认识web"><a href="#认识web" class="headerlink" title="认识web"></a>认识web</h2><h3 id="1-认识网页"><a href="#1-认识网页" class="headerlink" title="1.认识网页"></a>1.认识网页</h3><ul>
<li>网页主要由文字，图像和超链接等元素构成。当然，除了这些元素，网页中还可以包含音频，视频以及Flash等。</li>
</ul>
<p>网页有图、链接、文字等元素组成，我么们在后面的任务就是要把这部分网页元素用代码写出来。</p>
<h3 id="2-浏览器（显示代码）"><a href="#2-浏览器（显示代码）" class="headerlink" title="2.浏览器（显示代码）"></a>2.浏览器（显示代码）</h3><p>浏览器是网页显示、运行的平台，常用的浏览器有IE、火狐（Firefox）、谷歌（Chrome）、Safari和Opera等。</p>
<p><img src="https://i.loli.net/2021/03/30/k3DnM8APh4xO9yg.png" alt="浏览器.png"></p>
<p>可能你最熟悉的是 IE浏览器，但是。。。</p>
<img src="E:/%25E5%25AD%25A6%25E4%25B9%25A0%25E8%25B5%2584%25E6%2596%2599/1%25E3%2580%2581%25E9%25BB%2591%25E9%25A9%25ACweb%25E5%2589%258D%25E7%25AB%25AF%25E5%25BC%2580%25E5%258F%2591%25E5%2585%25A8%25E5%25A5%2597%25E8%25AF%25BE%25E7%25A8%258B/%25E3%2580%259027%25E3%2580%2591%25E6%25BA%2590%25E7%25A0%2581+%25E8%25AF%25BE%25E4%25BB%25B6+%25E8%25BD%25AF%25E4%25BB%25B6/01-03%2520%25E5%2589%258D%25E7%25AB%25AF%25E5%25BC%2580%25E5%258F%2591%25E5%259F%25BA%25E7%25A1%2580/01-03%2520%25E5%2589%258D%25E7%25AB%25AF%25E5%25BC%2580%25E5%258F%2591%25E5%259F%25BA%25E7%25A1%2580/01-HTML%25E8%25B5%2584%25E6%2596%2599/02.HTML-Day02/%25E7%25AC%2594%25E8%25AE%25B0/media/liulan.jpg" >

<h3 id="2-1-查看浏览器占有的市场份额"><a href="#2-1-查看浏览器占有的市场份额" class="headerlink" title="2.1 查看浏览器占有的市场份额"></a>2.1 查看浏览器占有的市场份额</h3><p>查看网站： <a href="http://tongji.baidu.com/data/browser" target="_blank">http://tongji.baidu.com/data/browser</a></p>
<img src="E:/%25E5%25AD%25A6%25E4%25B9%25A0%25E8%25B5%2584%25E6%2596%2599/1%25E3%2580%2581%25E9%25BB%2591%25E9%25A9%25ACweb%25E5%2589%258D%25E7%25AB%25AF%25E5%25BC%2580%25E5%258F%2591%25E5%2585%25A8%25E5%25A5%2597%25E8%25AF%25BE%25E7%25A8%258B/%25E3%2580%259027%25E3%2580%2591%25E6%25BA%2590%25E7%25A0%2581+%25E8%25AF%25BE%25E4%25BB%25B6+%25E8%25BD%25AF%25E4%25BB%25B6/01-03%2520%25E5%2589%258D%25E7%25AB%25AF%25E5%25BC%2580%25E5%258F%2591%25E5%259F%25BA%25E7%25A1%2580/01-03%2520%25E5%2589%258D%25E7%25AB%25AF%25E5%25BC%2580%25E5%258F%2591%25E5%259F%25BA%25E7%25A1%2580/01-HTML%25E8%25B5%2584%25E6%2596%2599/02.HTML-Day02/%25E7%25AC%2594%25E8%25AE%25B0/media/count.png" />

<p> 2008年，大名鼎鼎的互联网巨头Google公司发布了它的首款浏览器Chrome浏览器。   </p>
<p> 跟王思聪一样，没办法，生下来人家就是富二代官二代啊，后台太强，而且确实先天能力得天独厚。 </p>
<h3 id="2-2-常见浏览器内核（了解）"><a href="#2-2-常见浏览器内核（了解）" class="headerlink" title="2.2 常见浏览器内核（了解）"></a>2.2 常见浏览器内核（了解）</h3><p>首先解释一下浏览器内核是什么东西。英文叫做：Rendering Engine，中文翻译很多，排版引擎、解释引擎、渲染引擎，现在流行称为浏览器内核.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">负责读取网页内容，整理讯息，计算网页的显示方式并显示页面.</span><br></pre></td></tr></table></figure>

<p>因为浏览器太多啦， 但是现在主要流行的就是下面几个：</p>
<table>
<thead>
<tr>
<th align="left">浏览器</th>
<th align="center">内核</th>
<th align="left">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="left">IE</td>
<td align="center">Trident</td>
<td align="left">IE、猎豹安全、360极速浏览器、百度浏览器</td>
</tr>
<tr>
<td align="left">firefox</td>
<td align="center">Gecko</td>
<td align="left">可惜这几年已经没落了，打开速度慢、升级频繁、猪一样的队友flash、神一样的对手chrome。</td>
</tr>
<tr>
<td align="left">Safari</td>
<td align="center">webkit</td>
<td align="left">现在很多人错误地把 webkit 叫做 chrome内核（即使 chrome内核已经是 blink 了）。苹果感觉像被别人抢了媳妇，都哭晕再厕所里面了。</td>
</tr>
<tr>
<td align="left">chrome</td>
<td align="center">Chromium/Blink</td>
<td align="left">在 Chromium 项目中研发 Blink 渲染引擎（即浏览器核心），内置于 Chrome 浏览器之中。Blink 其实是 WebKit 的分支。大部分国产浏览器最新版都采用Blink内核。二次开发</td>
</tr>
<tr>
<td align="left">Opera</td>
<td align="center">Presto</td>
<td align="left">Presto（已经废弃） 是挪威产浏览器 opera 的 “前任” 内核，为何说是 “前任”，因为最新的 opera 浏览器早已将之抛弃从而投入到了谷歌怀抱了。  现在用blink内核。</td>
</tr>
</tbody></table>
<p><strong>拓展阅读：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">移动端的浏览器内核主要说的是系统内置浏览器的内核。</span><br><span class="line"></span><br><span class="line">Android手机而言，使用率最高的就是Webkit内核，大部分国产浏览器宣称的自己的内核，基本上也是属于webkit二次开发。</span><br><span class="line"></span><br><span class="line">iOS以及WP7平台上，由于系统原因，系统大部分自带浏览器内核，一般是Safari或者IE内核Trident的</span><br></pre></td></tr></table></figure>

<h2 id="3-Web标准（重点）"><a href="#3-Web标准（重点）" class="headerlink" title="3. Web标准（重点）"></a>3. Web标准（重点）</h2><p>目标</p>
<ul>
<li>记忆<ul>
<li>能说出网页 中 web 标准三层组成</li>
</ul>
</li>
<li>理解<ul>
<li>能结合人来表述web标准三层</li>
</ul>
</li>
</ul>
<p>Web标准不是某一个标准，而是由W3C组织和其他标准化组织制定的一系列标准的集合。</p>
<p>W3C 万维网联盟是国际最著名的标准化组织。1994年成立后，至今已发布近百项相关万维网的标准，对万维网发展做出了杰出的贡献。</p>
<p><strong>w3c就类似于现实世界中的联合国。</strong></p>
<h3 id="3-1-为什么要遵循WEB标准呢？"><a href="#3-1-为什么要遵循WEB标准呢？" class="headerlink" title="3.1 为什么要遵循WEB标准呢？"></a>3.1 为什么要遵循WEB标准呢？</h3><p> 通过以上浏览器的内核不同，我们知道他们渲染或者排版的模式就有些许差异，显示就会有差别。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">问：  哪个方言再全国基本都可以听得懂？ </span><br></pre></td></tr></table></figure>

<img src="E:/%25E5%25AD%25A6%25E4%25B9%25A0%25E8%25B5%2584%25E6%2596%2599/1%25E3%2580%2581%25E9%25BB%2591%25E9%25A9%25ACweb%25E5%2589%258D%25E7%25AB%25AF%25E5%25BC%2580%25E5%258F%2591%25E5%2585%25A8%25E5%25A5%2597%25E8%25AF%25BE%25E7%25A8%258B/%25E3%2580%259027%25E3%2580%2591%25E6%25BA%2590%25E7%25A0%2581+%25E8%25AF%25BE%25E4%25BB%25B6+%25E8%25BD%25AF%25E4%25BB%25B6/01-03%2520%25E5%2589%258D%25E7%25AB%25AF%25E5%25BC%2580%25E5%258F%2591%25E5%259F%25BA%25E7%25A1%2580/01-03%2520%25E5%2589%258D%25E7%25AB%25AF%25E5%25BC%2580%25E5%258F%2591%25E5%259F%25BA%25E7%25A1%2580/01-HTML%25E8%25B5%2584%25E6%2596%2599/02.HTML-Day02/%25E7%25AC%2594%25E8%25AE%25B0/media/bz.png" />

<h3 id="3-2-Web-标准的好处"><a href="#3-2-Web-标准的好处" class="headerlink" title="3.2 Web 标准的好处"></a>3.2 Web 标准的好处</h3><p><em>1</em>、让Web的发展前景更广阔<br><em>2</em>、内容能被更广泛的设备访问<br><em>3</em>、更容易被搜寻引擎搜索<br><em>4</em>、降低网站流量费用<br><em>5</em>、使网站更易于维护<br><em>6</em>、提高页面浏览速度</p>
<p>专业的人做专业的事。  来呀<del>快活呀</del>反正有大把时间~</p>
<h3 id="3-3-Web-标准构成"><a href="#3-3-Web-标准构成" class="headerlink" title="3.3 Web 标准构成"></a>3.3 Web 标准构成</h3><p><strong>构成：</strong> 主要包括结构（Structure）、表现（Presentation）和行为（Behavior）三个方面。</p>
<ul>
<li>结构标准：结构用于对网页元素进行整理和分类，咱们主要学的是HTML。 对于网页来说最重要的一部分</li>
</ul>
<ul>
<li>表现标准：表现用于设置网页元素的版式、颜色、大小等外观样式，主要指的是CSS</li>
<li>行为标准：行为是指网页模型的定义及交互的编写，咱们主要学的是 Javascript</li>
</ul>
<p> 理想状态我们的源码： .HTML      .css      .js </p>
<p>直观感受：</p>
<img src="E:/%25E5%25AD%25A6%25E4%25B9%25A0%25E8%25B5%2584%25E6%2596%2599/1%25E3%2580%2581%25E9%25BB%2591%25E9%25A9%25ACweb%25E5%2589%258D%25E7%25AB%25AF%25E5%25BC%2580%25E5%258F%2591%25E5%2585%25A8%25E5%25A5%2597%25E8%25AF%25BE%25E7%25A8%258B/%25E3%2580%259027%25E3%2580%2591%25E6%25BA%2590%25E7%25A0%2581+%25E8%25AF%25BE%25E4%25BB%25B6+%25E8%25BD%25AF%25E4%25BB%25B6/01-03%2520%25E5%2589%258D%25E7%25AB%25AF%25E5%25BC%2580%25E5%258F%2591%25E5%259F%25BA%25E7%25A1%2580/01-03%2520%25E5%2589%258D%25E7%25AB%25AF%25E5%25BC%2580%25E5%258F%2591%25E5%259F%25BA%25E7%25A1%2580/01-HTML%25E8%25B5%2584%25E6%2596%2599/02.HTML-Day02/%25E7%25AC%2594%25E8%25AE%25B0/media/gx.png" />

<p>总结WEB标准：</p>
<p>结构标准：   <img src="E:/%25E5%25AD%25A6%25E4%25B9%25A0%25E8%25B5%2584%25E6%2596%2599/1%25E3%2580%2581%25E9%25BB%2591%25E9%25A9%25ACweb%25E5%2589%258D%25E7%25AB%25AF%25E5%25BC%2580%25E5%258F%2591%25E5%2585%25A8%25E5%25A5%2597%25E8%25AF%25BE%25E7%25A8%258B/%25E3%2580%259027%25E3%2580%2591%25E6%25BA%2590%25E7%25A0%2581+%25E8%25AF%25BE%25E4%25BB%25B6+%25E8%25BD%25AF%25E4%25BB%25B6/01-03%2520%25E5%2589%258D%25E7%25AB%25AF%25E5%25BC%2580%25E5%258F%2591%25E5%259F%25BA%25E7%25A1%2580/01-03%2520%25E5%2589%258D%25E7%25AB%25AF%25E5%25BC%2580%25E5%258F%2591%25E5%259F%25BA%25E7%25A1%2580/01-HTML%25E8%25B5%2584%25E6%2596%2599/02.HTML-Day02/%25E7%25AC%2594%25E8%25AE%25B0/media/hb1.png" width="300" />  决定你是否有个好天然身体 </p>
<p><strong>结构层：通过对语义的分析，可以对其划分结构。具有了结构的内容，将更容易阅读</strong></p>
 <img src="E:/%25E5%25AD%25A6%25E4%25B9%25A0%25E8%25B5%2584%25E6%2596%2599/1%25E3%2580%2581%25E9%25BB%2591%25E9%25A9%25ACweb%25E5%2589%258D%25E7%25AB%25AF%25E5%25BC%2580%25E5%258F%2591%25E5%2585%25A8%25E5%25A5%2597%25E8%25AF%25BE%25E7%25A8%258B/%25E3%2580%259027%25E3%2580%2591%25E6%25BA%2590%25E7%25A0%2581+%25E8%25AF%25BE%25E4%25BB%25B6+%25E8%25BD%25AF%25E4%25BB%25B6/01-03%2520%25E5%2589%258D%25E7%25AB%25AF%25E5%25BC%2580%25E5%258F%2591%25E5%259F%25BA%25E7%25A1%2580/01-03%2520%25E5%2589%258D%25E7%25AB%25AF%25E5%25BC%2580%25E5%258F%2591%25E5%259F%25BA%25E7%25A1%2580/01-HTML%25E8%25B5%2584%25E6%2596%2599/02.HTML-Day02/%25E7%25AC%2594%25E8%25AE%25B0/media/htmll.jpg" />



<p>表现标准：   <img src="E:/%25E5%25AD%25A6%25E4%25B9%25A0%25E8%25B5%2584%25E6%2596%2599/1%25E3%2580%2581%25E9%25BB%2591%25E9%25A9%25ACweb%25E5%2589%258D%25E7%25AB%25AF%25E5%25BC%2580%25E5%258F%2591%25E5%2585%25A8%25E5%25A5%2597%25E8%25AF%25BE%25E7%25A8%258B/%25E3%2580%259027%25E3%2580%2591%25E6%25BA%2590%25E7%25A0%2581+%25E8%25AF%25BE%25E4%25BB%25B6+%25E8%25BD%25AF%25E4%25BB%25B6/01-03%2520%25E5%2589%258D%25E7%25AB%25AF%25E5%25BC%2580%25E5%258F%2591%25E5%259F%25BA%25E7%25A1%2580/01-03%2520%25E5%2589%258D%25E7%25AB%25AF%25E5%25BC%2580%25E5%258F%2591%25E5%259F%25BA%25E7%25A1%2580/01-HTML%25E8%25B5%2584%25E6%2596%2599/02.HTML-Day02/%25E7%25AC%2594%25E8%25AE%25B0/media/hb2.png" width="300" />  决定你是否打扮的美丽外观</p>
<p><strong>表现层：是为了让网页就能展现出灵活多样的显示效果</strong></p>
 <img src="E:/%25E5%25AD%25A6%25E4%25B9%25A0%25E8%25B5%2584%25E6%2596%2599/1%25E3%2580%2581%25E9%25BB%2591%25E9%25A9%25ACweb%25E5%2589%258D%25E7%25AB%25AF%25E5%25BC%2580%25E5%258F%2591%25E5%2585%25A8%25E5%25A5%2597%25E8%25AF%25BE%25E7%25A8%258B/%25E3%2580%259027%25E3%2580%2591%25E6%25BA%2590%25E7%25A0%2581+%25E8%25AF%25BE%25E4%25BB%25B6+%25E8%25BD%25AF%25E4%25BB%25B6/01-03%2520%25E5%2589%258D%25E7%25AB%25AF%25E5%25BC%2580%25E5%258F%2591%25E5%259F%25BA%25E7%25A1%2580/01-03%2520%25E5%2589%258D%25E7%25AB%25AF%25E5%25BC%2580%25E5%258F%2591%25E5%259F%25BA%25E7%25A1%2580/01-HTML%25E8%25B5%2584%25E6%2596%2599/02.HTML-Day02/%25E7%25AC%2594%25E8%25AE%25B0/media/css.jpg" />



<p>行为标准：   <img src="E:/%25E5%25AD%25A6%25E4%25B9%25A0%25E8%25B5%2584%25E6%2596%2599/1%25E3%2580%2581%25E9%25BB%2591%25E9%25A9%25ACweb%25E5%2589%258D%25E7%25AB%25AF%25E5%25BC%2580%25E5%258F%2591%25E5%2585%25A8%25E5%25A5%2597%25E8%25AF%25BE%25E7%25A8%258B/%25E3%2580%259027%25E3%2580%2591%25E6%25BA%2590%25E7%25A0%2581+%25E8%25AF%25BE%25E4%25BB%25B6+%25E8%25BD%25AF%25E4%25BB%25B6/01-03%2520%25E5%2589%258D%25E7%25AB%25AF%25E5%25BC%2580%25E5%258F%2591%25E5%259F%25BA%25E7%25A1%2580/01-03%2520%25E5%2589%258D%25E7%25AB%25AF%25E5%25BC%2580%25E5%258F%2591%25E5%259F%25BA%25E7%25A1%2580/01-HTML%25E8%25B5%2584%25E6%2596%2599/02.HTML-Day02/%25E7%25AC%2594%25E8%25AE%25B0/media/hb3.jpg"  width="420"   />  决定你是否有吸引人的行为</p>
<p><strong>行为层：用户对网页进行操作，网页可以做出响应性的变化。</strong></p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul>
<li>web标准有三层结构，分别是结构（html）、表现（css）和行为（javascript）  </li>
<li>结构类似人的身体， 表现类似人的着装， 行为类似人的行为动作</li>
<li>理想状态下，他们三层都是独立的， 放到不同的文件里面</li>
</ul>
<h2 id="4-拓展"><a href="#4-拓展" class="headerlink" title="4. 拓展@"></a>4. 拓展@</h2><ul>
<li><p><strong>介绍一下你对浏览器内核的理解？常见的浏览器内核有哪些？</strong></p>
<p>浏览器内核包括两部分，渲染引擎和js引擎。渲染引擎负责读取网页内容，整理讯息，计算网页的显示方式并显示页面，js引擎是解析执行js获取网页的动态效果。 后来 JS 引擎越来越独立，内核就倾向于只指渲染引擎。<br>IE：Trident<br>firefox：Gecko<br>chrom、safari：webkit<br>Opera：Presto<br>Microsoft Edge：EdgeHTML</p>
<p>深度阅读：<a href="http://blog.csdn.net/summer_15/article/details/71249203">五大主流浏览器内核的源起以及国内各大浏览器内核总结</a> </p>
</li>
</ul>
<h1 id="1-HTML-初识"><a href="#1-HTML-初识" class="headerlink" title="1. HTML 初识"></a>1. HTML 初识</h1><ul>
<li>HTML 指的是超文本标记语言 (<strong>H</strong>yper <strong>T</strong>ext <strong>M</strong>arkup <strong>L</strong>anguage)是用来描述网页的一种语言。</li>
<li>HTML 不是一种编程语言，而是一种标记语言 (markup language)</li>
<li>标记语言是一套标记标签 (markup tag)</li>
</ul>
<p><strong>所谓超文本，有2层含义：</strong> </p>
<ol>
<li>因为它可以加入图片、声音、动画、多媒体等内容（**超越文本限制 **）</li>
<li>不仅如此，它还可以从一个文件跳转到另一个文件，与世界各地主机的文件连接（**超级链接文本 **）。</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span> 我是一个大标题 <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>网页是由网页元素组成的 ， 这些元素是利用html标签描述出来，然后通过浏览器解析，就可以显示给用户了。</p>
</blockquote>
<h2 id="1-1-HTML骨架格式"><a href="#1-1-HTML骨架格式" class="headerlink" title="1.1 HTML骨架格式"></a>1.1 HTML骨架格式</h2><p>日常生活的书信，我们要遵循共同的约定。 </p>
<img src="E:/%25E5%25AD%25A6%25E4%25B9%25A0%25E8%25B5%2584%25E6%2596%2599/1%25E3%2580%2581%25E9%25BB%2591%25E9%25A9%25ACweb%25E5%2589%258D%25E7%25AB%25AF%25E5%25BC%2580%25E5%258F%2591%25E5%2585%25A8%25E5%25A5%2597%25E8%25AF%25BE%25E7%25A8%258B/%25E3%2580%259027%25E3%2580%2591%25E6%25BA%2590%25E7%25A0%2581+%25E8%25AF%25BE%25E4%25BB%25B6+%25E8%25BD%25AF%25E4%25BB%25B6/01-03%2520%25E5%2589%258D%25E7%25AB%25AF%25E5%25BC%2580%25E5%258F%2591%25E5%259F%25BA%25E7%25A1%2580/01-03%2520%25E5%2589%258D%25E7%25AB%25AF%25E5%25BC%2580%25E5%258F%2591%25E5%259F%25BA%25E7%25A1%2580/01-HTML%25E8%25B5%2584%25E6%2596%2599/02.HTML-Day02/%25E7%25AC%2594%25E8%25AE%25B0/media/mess.png" alt="">

<p>同理：HTML 有自己的语言语法骨架格式：（要遵循，要专业） 要求务必非常流畅的默写下来。。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span>     </span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="html骨架标签总结"><a href="#html骨架标签总结" class="headerlink" title="html骨架标签总结"></a>html骨架标签总结</h4><table>
<thead>
<tr>
<th>标签名</th>
<th align="center">定义</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td><html></html></td>
<td align="center">HTML标签</td>
<td align="left">页面中最大的标签，我们成为  根标签</td>
</tr>
<tr>
<td><head></head></td>
<td align="center">文档的头部</td>
<td align="left">注意在head标签中我们必须要设置的标签是title</td>
</tr>
<tr>
<td><titile></title></td>
<td align="center">文档的标题</td>
<td align="left">让页面拥有一个属于自己的网页标题</td>
</tr>
<tr>
<td><body></body></td>
<td align="center">文档的主体</td>
<td align="left">元素包含文档的所有内容，页面内容 基本都是放到body里面的</td>
</tr>
<tr>
<td><titile></title></td>
<td align="center">文档的标题</td>
<td align="left">让页面拥有一个属于自己的网页标题</td>
</tr>
</tbody></table>
<p>**课堂练习1： **   </p>
<p>书写我们的第一个HTML 页面。</p>
<ol>
<li><p>新建一个demo 的 TXT 文件。</p>
</li>
<li><p>里面写入刚才的HTML 骨架。  </p>
</li>
<li><p>把后缀名改为 .HTML。</p>
</li>
<li><p>右击–谷歌浏览器打开。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span>     </span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>我的第一个页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">          黑马洗练  一飞冲天  月薪过万 你我之间 </span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
 <img src="E:/%25E5%25AD%25A6%25E4%25B9%25A0%25E8%25B5%2584%25E6%2596%2599/1%25E3%2580%2581%25E9%25BB%2591%25E9%25A9%25ACweb%25E5%2589%258D%25E7%25AB%25AF%25E5%25BC%2580%25E5%258F%2591%25E5%2585%25A8%25E5%25A5%2597%25E8%25AF%25BE%25E7%25A8%258B/%25E3%2580%259027%25E3%2580%2591%25E6%25BA%2590%25E7%25A0%2581+%25E8%25AF%25BE%25E4%25BB%25B6+%25E8%25BD%25AF%25E4%25BB%25B6/01-03%2520%25E5%2589%258D%25E7%25AB%25AF%25E5%25BC%2580%25E5%258F%2591%25E5%259F%25BA%25E7%25A1%2580/01-03%2520%25E5%2589%258D%25E7%25AB%25AF%25E5%25BC%2580%25E5%258F%2591%25E5%259F%25BA%25E7%25A1%2580/01-HTML%25E8%25B5%2584%25E6%2596%2599/02.HTML-Day02/%25E7%25AC%2594%25E8%25AE%25B0/media/01html%25E9%25AA%25A8%25E6%259E%25B6.jpg">

<p>为了便于记忆，我们请出刚才要辞职回家养猪的二师兄来帮忙， 我称之为  猪八戒记忆法</p>
<img src="E:/%25E5%25AD%25A6%25E4%25B9%25A0%25E8%25B5%2584%25E6%2596%2599/1%25E3%2580%2581%25E9%25BB%2591%25E9%25A9%25ACweb%25E5%2589%258D%25E7%25AB%25AF%25E5%25BC%2580%25E5%258F%2591%25E5%2585%25A8%25E5%25A5%2597%25E8%25AF%25BE%25E7%25A8%258B/%25E3%2580%259027%25E3%2580%2591%25E6%25BA%2590%25E7%25A0%2581+%25E8%25AF%25BE%25E4%25BB%25B6+%25E8%25BD%25AF%25E4%25BB%25B6/01-03%2520%25E5%2589%258D%25E7%25AB%25AF%25E5%25BC%2580%25E5%258F%2591%25E5%259F%25BA%25E7%25A1%2580/01-03%2520%25E5%2589%258D%25E7%25AB%25AF%25E5%25BC%2580%25E5%258F%2591%25E5%259F%25BA%25E7%25A1%2580/01-HTML%25E8%25B5%2584%25E6%2596%2599/02.HTML-Day02/%25E7%25AC%2594%25E8%25AE%25B0/media/pig.png" width="500" />



<h4 id="团队约定大小写"><a href="#团队约定大小写" class="headerlink" title="团队约定大小写"></a>团队约定大小写</h4><p>HTML标签名、类名、标签属性和大部分属性值统一用小写</p>
<p><em>推荐：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;     </span><br><span class="line">        &lt;title&gt;我的第一个页面&lt;&#x2F;title&gt;</span><br><span class="line"> &lt;&#x2F;head&gt;</span><br></pre></td></tr></table></figure>

<p><em>不推荐：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;HEAD&gt;     </span><br><span class="line">        &lt;TITLE&gt;我的第一个页面&lt;&#x2F;TITLE&gt;</span><br><span class="line">&lt;&#x2F;HEAD&gt;</span><br></pre></td></tr></table></figure>

<h2 id="1-2-HTML元素标签分类"><a href="#1-2-HTML元素标签分类" class="headerlink" title="1.2 HTML元素标签分类"></a>1.2 HTML元素标签分类</h2><p><strong>标签：</strong></p>
<p>在HTML页面中，带有“&lt; &gt;”符号的元素被称为HTML标签，如上面提到的 &lt;html&gt;、&lt;head&gt;、&lt;body&gt;都是HTML骨架结构标签。</p>
<p><strong>分类：</strong></p>
<ol>
<li>常规元素（双标签）</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;标签名&gt; 内容 &lt;/标签名&gt;   比如 <span class="tag">&lt;<span class="name">body</span>&gt;</span>  我是文字  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>该语法中“&lt;标签名&gt;”表示该标签的作用开始，一般称为“开始标签（start tag）”，“&lt;/标签名&gt;” 表示该标签的作用结束，一般称为“结束标签（end tag）”。</li>
<li>和开始标签相比，结束标签只是在前面加了一个关闭符“/”。</li>
<li>我们以后接触的基本都是双标签</li>
</ul>
<ol start="2">
<li>空元素（单标签）</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;标签名 /&gt;  比如  <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>空元素 用单标签来表示， 简单点说，就是里面不需要包含内容， 只有一个开始标签不需要关闭。</li>
<li>这种单身狗标签非常少，一共没多少，我们多记忆就好</li>
</ul>
<blockquote>
<p>世界上单身狗毕竟是少数的， 大部分还是喜欢成双成对，不要拉下你的另外一半，对待一个双标签要有始有终。</p>
</blockquote>
<h2 id="1-3-HTML标签关系"><a href="#1-3-HTML标签关系" class="headerlink" title="1.3 HTML标签关系"></a>1.3 HTML标签关系</h2><p>主要针对于<strong>双标签</strong> 的相互关系分为两种：  请大家务必熟悉记住这种标签关系，因为后面我们标签嵌套特别多，很容易弄混他们的关系。</p>
<ol>
<li>嵌套关系</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span> <span class="tag">&lt;/<span class="name">title</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>

<img src="E:/%25E5%25AD%25A6%25E4%25B9%25A0%25E8%25B5%2584%25E6%2596%2599/1%25E3%2580%2581%25E9%25BB%2591%25E9%25A9%25ACweb%25E5%2589%258D%25E7%25AB%25AF%25E5%25BC%2580%25E5%258F%2591%25E5%2585%25A8%25E5%25A5%2597%25E8%25AF%25BE%25E7%25A8%258B/%25E3%2580%259027%25E3%2580%2591%25E6%25BA%2590%25E7%25A0%2581+%25E8%25AF%25BE%25E4%25BB%25B6+%25E8%25BD%25AF%25E4%25BB%25B6/01-03%2520%25E5%2589%258D%25E7%25AB%25AF%25E5%25BC%2580%25E5%258F%2591%25E5%259F%25BA%25E7%25A1%2580/01-03%2520%25E5%2589%258D%25E7%25AB%25AF%25E5%25BC%2580%25E5%258F%2591%25E5%259F%25BA%25E7%25A1%2580/01-HTML%25E8%25B5%2584%25E6%2596%2599/02.HTML-Day02/%25E7%25AC%2594%25E8%25AE%25B0/media/father.jpg">

<p>2.并列关系</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<img src="E:/%25E5%25AD%25A6%25E4%25B9%25A0%25E8%25B5%2584%25E6%2596%2599/1%25E3%2580%2581%25E9%25BB%2591%25E9%25A9%25ACweb%25E5%2589%258D%25E7%25AB%25AF%25E5%25BC%2580%25E5%258F%2591%25E5%2585%25A8%25E5%25A5%2597%25E8%25AF%25BE%25E7%25A8%258B/%25E3%2580%259027%25E3%2580%2591%25E6%25BA%2590%25E7%25A0%2581+%25E8%25AF%25BE%25E4%25BB%25B6+%25E8%25BD%25AF%25E4%25BB%25B6/01-03%2520%25E5%2589%258D%25E7%25AB%25AF%25E5%25BC%2580%25E5%258F%2591%25E5%259F%25BA%25E7%25A1%2580/01-03%2520%25E5%2589%258D%25E7%25AB%25AF%25E5%25BC%2580%25E5%258F%2591%25E5%259F%25BA%25E7%25A1%2580/01-HTML%25E8%25B5%2584%25E6%2596%2599/02.HTML-Day02/%25E7%25AC%2594%25E8%25AE%25B0/media/xiong.jpg" width="500">

<p><strong>倡议：</strong> </p>
<blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">如果两个标签之间的关系是嵌套关系，子元素最好缩进一个tab键的身位（一个tab是4个空格）。如果是并列关系，最好上下对齐。</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>html双标签 可以分为  有 一种是 父子级 包含关系的标签      一种是 兄弟级 并列关系的标签</p>
</blockquote>
<h1 id="2-代码开发工具（书写代码）"><a href="#2-代码开发工具（书写代码）" class="headerlink" title="2. 代码开发工具（书写代码）"></a>2. 代码开发工具（书写代码）</h1><ul>
<li><p>为了提高我们的开发效率</p>
</li>
<li><p>减少代码的出错我们不提倡用记事本开发，我们有更好的犀利哥。</p>
</li>
<li><p>Dreamweaver</p>
</li>
<li><p>SublimeText</p>
</li>
<li><p>WebStorm</p>
</li>
<li><p>HBuilder</p>
</li>
<li><p>VScode</p>
</li>
</ul>
<p>有人说：</p>
<p>  普通青年    Dreamweaver</p>
<p>  文艺青年    sublime</p>
<p>  高手和傻子  用记事本</p>
<p>  其实。。。。</p>
  <img src="E:/%25E5%25AD%25A6%25E4%25B9%25A0%25E8%25B5%2584%25E6%2596%2599/1%25E3%2580%2581%25E9%25BB%2591%25E9%25A9%25ACweb%25E5%2589%258D%25E7%25AB%25AF%25E5%25BC%2580%25E5%258F%2591%25E5%2585%25A8%25E5%25A5%2597%25E8%25AF%25BE%25E7%25A8%258B/%25E3%2580%259027%25E3%2580%2591%25E6%25BA%2590%25E7%25A0%2581+%25E8%25AF%25BE%25E4%25BB%25B6+%25E8%25BD%25AF%25E4%25BB%25B6/01-03%2520%25E5%2589%258D%25E7%25AB%25AF%25E5%25BC%2580%25E5%258F%2591%25E5%259F%25BA%25E7%25A1%2580/01-03%2520%25E5%2589%258D%25E7%25AB%25AF%25E5%25BC%2580%25E5%258F%2591%25E5%259F%25BA%25E7%25A1%2580/01-HTML%25E8%25B5%2584%25E6%2596%2599/02.HTML-Day02/%25E7%25AC%2594%25E8%25AE%25B0/media/node.png" />


<p>感觉： 这个feel 倍儿爽 feel feel倍儿爽 爽爽爽爽！</p>
<p>常多的优点， 最开心的就是非常轻量级，打开速度超快，后面更高的功能，后面再接触。</p>
<p><strong>sublime生成html骨架小技巧</strong></p>
<ul>
<li> 双击打开软件</li>
<li> 新建文件（ctrl+n）</li>
<li> 保存（ctrl+s）,保存为：文件名.html （ 注意 后缀名必须是 .html ) </li>
<li> 放大缩小代码  ctrl+ 加号 键     和 ctrl +   减号键     或者 按住 ctrl  在 滚动鼠标滚轮</li>
<li>生成页面骨架结构<ul>
<li>html: 5    按下tab键    或者  </li>
<li>!    按下tab键</li>
</ul>
</li>
<li>在浏览器中预览页面<ul>
<li>右键在  浏览器中打开</li>
</ul>
</li>
</ul>
<h1 id="3-文档类型-lt-DOCTYPE-gt"><a href="#3-文档类型-lt-DOCTYPE-gt" class="headerlink" title="3. 文档类型&lt;!DOCTYPE&gt;"></a>3. 文档类型&lt;!DOCTYPE&gt;</h1><p>同学你用啥手机？你咋回答？</p>
<p><strong>用法：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<p><strong>作用：</strong></p>
<!DOCTYPE><p> 声明位于文档中的最前面的位置，处于 <html> 标签之前。此标签可告知浏览器文档使用哪种 HTML 或 XHTML 规范。</p>
<p>**注意：  **</p>
<p>一些老网站可能用的还是老版本的文档类型比如 XHTML之类的，但是我们学的是HTML5,而且HTML5的文档类型兼容很好(向下兼容的原则)，所以大家放心的使用HTML5的文档类型就好了。</p>
   <!DOCTYPE html><p>  就是告诉浏览器按照HTML5 规范解析页面.</p>
<p><strong>团队约定：</strong></p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HTML文件必须加上 DOCTYPE 声明，并统一使用 HTML5 的文档声明</span><br></pre></td></tr></table></figure>
</blockquote>
<h1 id="4-页面语言lang"><a href="#4-页面语言lang" class="headerlink" title="4. 页面语言lang"></a>4. 页面语言lang</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span>  指定html 语言种类</span><br></pre></td></tr></table></figure>

<p>最常见的2个：</p>
<ol>
<li><code>en</code>定义语言为英语</li>
<li><code>zh-CN</code>定义语言为中文</li>
</ol>
<blockquote>
 <html lang="zh-CN">  指定该html标签 内容 所用的语言为中文
</blockquote>
<p><strong>团队约定：</strong></p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">考虑浏览器和操作系统的兼容性，目前仍然使用 zh-CN 属性值</span><br></pre></td></tr></table></figure>
</blockquote>
<p><strong>@拓展阅读：</strong></p>
<p>简单来说，可能对于程序来说没有太大的作用，但是它可以告诉浏览器，搜索引擎，一些处理Html的程序对页面语言内容来做一些对应的处理或者事情。<br>比如可以</p>
<ul>
<li>根据根据lang属性来设定不同语言的css样式，或者字体</li>
<li>告诉搜索引擎做精确的识别</li>
<li>让语法检查程序做语言识别</li>
<li>帮助翻译工具做识别</li>
<li>帮助网页阅读程序做识别<br>等等</li>
</ul>
<h1 id="5-字符集"><a href="#5-字符集" class="headerlink" title="5. 字符集"></a>5. 字符集</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">字符集(Character set)是多个字符的集合。</span><br><span class="line"></span><br><span class="line">计算机要准确的处理各种字符集文字，需要进行字符编码，以便计算机能够识别和存储各种文字。</span><br></pre></td></tr></table></figure>

<p>utf-8是目前最常用的字符集编码方式，常用的字符集编码方式还有gbk和gb2312。</p>
<ul>
<li>gb2312 简单中文  包括6763个汉字</li>
<li>BIG5   繁体中文 港澳台等用</li>
<li>GBK包含全部中文字符    是GB2312的扩展，加入对繁体字的支持，兼容GB2312</li>
<li>UTF-8则基本包含全世界所有国家需要用到的字符</li>
<li><strong>这句代码非常关键， 是必须要写的代码，否则可能引起乱码的情况。</strong></li>
</ul>
<blockquote>
<p>这句话是让 html 文件是以 UTF-8 编码保存的， 浏览器根据编码去解码对应的html内容。</p>
</blockquote>
<p><strong>团队约定：</strong></p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一般情况下统一使用 &quot;UTF-8&quot; 编码, 请尽量统一写成标准的 &quot;UTF-8&quot;，不要写成 &quot;utf-8&quot; 或 &quot;utf8&quot; 或 &quot;UTF8&quot;。</span><br></pre></td></tr></table></figure>
</blockquote>
<h1 id="6-HTML标签的语义化"><a href="#6-HTML标签的语义化" class="headerlink" title="6. HTML标签的语义化"></a>6. HTML标签的语义化</h1><p>白话： 所谓标签语义化，就是指标签的含义。</p>
<ol>
<li>方便代码的阅读和维护</li>
<li>同时让浏览器或是网络爬虫可以很好地解析，从而更好分析其中的内容 </li>
<li>使用语义化标签会具有更好地搜索引擎优化 </li>
</ol>
<p>语义是否良好： 当我们去掉CSS之后，网页结构依然组织有序，并且有良好的可读性。(  裸奔起来一样好看 )</p>
<p>遵循的原则：先确定语义的HTML ，再选合适的CSS。所以，<strong>我们接下来学习html标签，要根据语义去记忆。</strong> HTML网页中任何元素的实现都要依靠HTML标签。</p>
<h1 id="7-拓展阅读"><a href="#7-拓展阅读" class="headerlink" title="7. 拓展阅读@"></a>7. 拓展阅读@</h1><h2 id="单身狗的由来"><a href="#单身狗的由来" class="headerlink" title="单身狗的由来"></a>单身狗的由来</h2><p>单身狗一词最早是出自网络社区，起源与大话西游有关。</p>
<p>大话西游之大圣娶亲最后一幕“他好像一条狗”由来。</p>
 <img src="E:/%25E5%25AD%25A6%25E4%25B9%25A0%25E8%25B5%2584%25E6%2596%2599/1%25E3%2580%2581%25E9%25BB%2591%25E9%25A9%25ACweb%25E5%2589%258D%25E7%25AB%25AF%25E5%25BC%2580%25E5%258F%2591%25E5%2585%25A8%25E5%25A5%2597%25E8%25AF%25BE%25E7%25A8%258B/%25E3%2580%259027%25E3%2580%2591%25E6%25BA%2590%25E7%25A0%2581+%25E8%25AF%25BE%25E4%25BB%25B6+%25E8%25BD%25AF%25E4%25BB%25B6/01-03%2520%25E5%2589%258D%25E7%25AB%25AF%25E5%25BC%2580%25E5%258F%2591%25E5%259F%25BA%25E7%25A1%2580/01-03%2520%25E5%2589%258D%25E7%25AB%25AF%25E5%25BC%2580%25E5%258F%2591%25E5%259F%25BA%25E7%25A1%2580/01-HTML%25E8%25B5%2584%25E6%2596%2599/02.HTML-Day02/%25E7%25AC%2594%25E8%25AE%25B0/media/dog.jpg">]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis基础应用</title>
    <url>/2021/03/20/MyBatis%E5%9F%BA%E7%A1%80%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<p>[TOC]</p>
<h2 id="1-MyBatis介绍"><a href="#1-MyBatis介绍" class="headerlink" title="1.MyBatis介绍"></a>1.MyBatis介绍</h2><p><img src="MyBatis%E5%9F%BA%E7%A1%80%E5%BA%94%E7%94%A8.assets/1595813426105.png" alt="1595813426105"></p>
<p>MyBatis 本是<strong>apache的一个开源项目iBatis</strong>, 2010年这个项目由<strong>apache software foundation</strong> 迁移到了<strong>google code</strong>，并且改名为<strong>MyBatis</strong> 。2013年11月迁移到Github。</p>
<span id="more"></span>

<p>IBATIS一词来源于“internet”和“abatis”的组合，是一个基于<strong>Java的持久层框架</strong>。iBATIS提供的持久层框架包括SQL Maps和Data Access Objects（DAO）</p>
<p>下载地址: MyBatis下载地址：<a href="https://github.com/mybatis/mybatis-3/releases">https://github.com/mybatis/mybatis-3/releases</a><br>使用版本:3.4.5</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hibernate 冬眠   全自动框架  SQL语句可以自动生成，不用人工书写SQL！ 笨重</span><br><span class="line"></span><br><span class="line">MyBatis        半自动  SQL语句还是需要自己书写，后期有一些插件可以自动生成SQL！ 灵活  定制SQL！ </span><br><span class="line">MyBatis Plus</span><br></pre></td></tr></table></figure>

<p><strong>ORM概念:  Object Ralation Mapping 对象关系映射</strong> 框架</p>
<blockquote>
<p>数据库类和程序中的实体类有对应关系(映射关系)的框架，叫做ORM框架(对象关系映射)</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">      数据库表------&gt;实体类</span><br><span class="line">​     数据库表中字段-----&gt;实体类的属性</span><br><span class="line">​     数据库表中字段的类型-----&gt;实体类中属性的类型</span><br><span class="line"></span><br><span class="line">数据库表和程序实体类有对应关系的持久层框架 就叫ORM框架！</span><br></pre></td></tr></table></figure>

<p><strong>常见的ORM框架哪些：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MyBatis</span><br><span class="line">Hibernate</span><br><span class="line">Spring Data  JPA</span><br><span class="line">......</span><br></pre></td></tr></table></figure>



<h2 id="2-MyBatis特点"><a href="#2-MyBatis特点" class="headerlink" title="2.MyBatis特点"></a>2.MyBatis特点</h2><ul>
<li><strong>简单易学</strong>：本身就很小且简单。没有任何第三方依赖，最简单安装只要两个jar文件+配置几个sql映射文件易于学习，易于使用，通过文档和源代码，可以比较完全的掌握它的设计思路和实现。</li>
<li><strong>灵活</strong>：mybatis不会对应用程序或者数据库的现有设计强加任何影响。 sql写在xml里，便于统一管理和优化。通过sql基本上可以实现我们不使用数据访问框架可以实现的所有功能，或许更多。<h2 id="3-MyBatis基础应用"><a href="#3-MyBatis基础应用" class="headerlink" title="3.MyBatis基础应用"></a>3.MyBatis基础应用</h2></li>
</ul>
<h3 id="3-1-搭建MyBatis环境"><a href="#3-1-搭建MyBatis环境" class="headerlink" title="3.1 搭建MyBatis环境"></a>3.1 搭建MyBatis环境</h3><h4 id="3-1-1-环境准备"><a href="#3-1-1-环境准备" class="headerlink" title="3.1.1 环境准备"></a>3.1.1 环境准备</h4><ul>
<li>Jdk环境：jdk1.8</li>
<li>Ide环境：IDEA</li>
<li>数据库环境：MySQL 5.1</li>
<li>Mybatis：3.4.5<h3 id="3-1-2-下载MyBatis"><a href="#3-1-2-下载MyBatis" class="headerlink" title="3.1.2 下载MyBatis"></a>3.1.2 下载MyBatis</h3></li>
</ul>
<p>mybaits的代码由github.com管理，下载地址：<a href="https://github.com/mybatis/mybatis-3/releases">https://github.com/mybatis/mybatis-3/releases</a><br>Mybatis-3.4.5.jar：mybatis的核心包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bruceliu.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-20190902<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--导入MyBatis开发环境的依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- myBatis --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- mysql驱动包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.38<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Junit测试 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--Lombok依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.16.18<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="3-1-4-准备数据库"><a href="#3-1-4-准备数据库" class="headerlink" title="3.1.4 准备数据库"></a>3.1.4 准备数据库</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS<span class="operator">=</span><span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for `user`</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `<span class="keyword">user</span>`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户名称&#x27;</span>,</span><br><span class="line">  `birthday` <span class="type">date</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;生日&#x27;</span>,</span><br><span class="line">  `sex` <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">  `address` <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;地址&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">27</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of user</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;王五&#x27;</span>, <span class="string">&#x27;2018-09-06&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;四川成都&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="string">&#x27;10&#x27;</span>, <span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;2014-07-10&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;北京市&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="string">&#x27;16&#x27;</span>, <span class="string">&#x27;张小明&#x27;</span>, <span class="string">&#x27;2018-09-06&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;河南郑州&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="string">&#x27;22&#x27;</span>, <span class="string">&#x27;陈小明&#x27;</span>, <span class="string">&#x27;2018-09-05&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;河南郑州&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="string">&#x27;24&#x27;</span>, <span class="string">&#x27;张三丰&#x27;</span>, <span class="string">&#x27;2018-09-13&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;河南郑州&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="string">&#x27;25&#x27;</span>, <span class="string">&#x27;陈小明&#x27;</span>, <span class="string">&#x27;2018-09-12&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;河南郑州&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="string">&#x27;26&#x27;</span>, <span class="string">&#x27;王五&#x27;</span>, <span class="string">&#x27;2018-09-05&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;河南郑州&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="3-1-5-创建主配置文件：mybatis-config-xml"><a href="#3-1-5-创建主配置文件：mybatis-config-xml" class="headerlink" title="3.1.5.创建主配置文件：mybatis-config.xml"></a>3.1.5.创建主配置文件：mybatis-config.xml</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">  <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 引入外部配置文件 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 环境 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span> /&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span> /&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span> /&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--映射Mapper文件--&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--引入映射文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/bruceliu/mapper/UserMappper.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>jdbc.properties：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">jdbc.driver=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql:<span class="comment">//127.0.0.1:3306/mybatisdb?useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=<span class="number">123</span></span><br></pre></td></tr></table></figure>
<h3 id="3-2-实现MyBatis的查询"><a href="#3-2-实现MyBatis的查询" class="headerlink" title="3.2 实现MyBatis的查询"></a>3.2 实现MyBatis的查询</h3><h4 id="3-2-1-获取SqlSession对象-核心对象"><a href="#3-2-1-获取SqlSession对象-核心对象" class="headerlink" title="3.2.1 获取SqlSession对象(核心对象)"></a>3.2.1 获取SqlSession对象(核心对象)</h4><p>MyBatis框架中涉及到的几个API<br>SqlSessionFactoryBuilder：该对象负责根据MyBatis配置文件mybatis-config.xml构建SqlSessionFactory实例  负责生产session<br>SqlSessionFactory：每一个MyBatis的应用程序都以一个SqlSessionFactory对象为核心。该对象负责创建SqlSession对象实例。<br>SqlSession：该对象包含了所有执行SQL操作的方法，用于执行已映射的SQL语句<br><img src="https://img-blog.csdnimg.cn/20190129103855441.png" alt="在这里插入图片描述"></p>
<h4 id="3-2-2-创建实体类-User"><a href="#3-2-2-创建实体类-User" class="headerlink" title="3.2.2 创建实体类 User"></a>3.2.2 创建实体类 User</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> Integer id;</span><br><span class="line">	<span class="keyword">private</span> String username;</span><br><span class="line">	<span class="keyword">private</span> Date birthday;</span><br><span class="line">	<span class="keyword">private</span> String sex;</span><br><span class="line">	<span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> id;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> username;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.username = username;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Date <span class="title">getBirthday</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> birthday;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(Date birthday)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> sex;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.sex = sex;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> address;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.address = address;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;User [id=&quot;</span> + id + <span class="string">&quot;, username=&quot;</span> + username + <span class="string">&quot;, birthday=&quot;</span> + birthday + <span class="string">&quot;, sex=&quot;</span> + sex + <span class="string">&quot;, address=&quot;</span> + address + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-2-3-创建接口层-UserMapper"><a href="#3-2-3-创建接口层-UserMapper" class="headerlink" title="3.2.3 创建接口层 UserMapper"></a>3.2.3 创建接口层 UserMapper</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: UserMapper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: BRUCELIU</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>:  2018年9月28日 下午5:17:06   </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:TODO </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getList</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">``</span><br><span class="line">#### 3.2.4 创建接口实现层 UserMapper实现层实现层</span><br><span class="line">​```java</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: UserMapperImpl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: BRUCELIU</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018年9月28日 下午5:17:46</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:TODO</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperImpl</span> <span class="keyword">implements</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">		SqlSessionFactory sqlSessionFactory = <span class="keyword">null</span>;</span><br><span class="line">		SqlSession session = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			String resource = <span class="string">&quot;mybatis-config.xml&quot;</span>; <span class="comment">// 配置文件</span></span><br><span class="line">			inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">			sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">			session = sqlSessionFactory.openSession();  <span class="comment">//获取session</span></span><br><span class="line"></span><br><span class="line">			List&lt;User&gt; list = session.selectList(<span class="string">&quot;com.bruceliu.dao.UserMapper.getList&quot;</span>);</span><br><span class="line">			<span class="keyword">return</span> list;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				session.close();</span><br><span class="line">				inputStream.close();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-2-5-创建接口Mapper文件"><a href="#3-2-5-创建接口Mapper文件" class="headerlink" title="3.2.5 创建接口Mapper文件"></a>3.2.5 创建接口Mapper文件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">  <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.bruceliu.dao.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 返回值类型 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.bruceliu.bean.User&quot;</span>&gt;</span></span><br><span class="line">       select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="3-2-6-测试类"><a href="#3-2-6-测试类" class="headerlink" title="3.2.6 测试类"></a>3.2.6 测试类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMyBatis</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	UserMapperImpl um = <span class="keyword">new</span> UserMapperImpl();</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		List&lt;User&gt; list = um.getList();</span><br><span class="line">		<span class="keyword">for</span> (User u : list) &#123;</span><br><span class="line">			System.out.println(u);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-2-6-Mybatis使用步骤总结："><a href="#3-2-6-Mybatis使用步骤总结：" class="headerlink" title="3.2.6.Mybatis使用步骤总结："></a>3.2.6.Mybatis使用步骤总结：</h4><ol>
<li>创建SqlSessionFactory</li>
<li>通过SqlSessionFactory创建SqlSession对象</li>
<li>通过SqlSession操作数据库</li>
<li>调用session.commit()提交事务</li>
<li>调用session.close()关闭会话</li>
</ol>
<h3 id="封装获取MyBatis中Session的工具类"><a href="#封装获取MyBatis中Session的工具类" class="headerlink" title="封装获取MyBatis中Session的工具类"></a>封装获取MyBatis中Session的工具类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> bruceliu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019-09-02 15:37</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 获取sesison和关闭session的工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 01-获取SqlSession</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession session=<span class="keyword">null</span>;</span><br><span class="line">        InputStream inputStream=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//配置文件的路径</span></span><br><span class="line">            String resource = <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">            <span class="comment">//加载配置文件，得到一个输入流</span></span><br><span class="line">            inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">            <span class="comment">//获取MyBatis的Session工厂</span></span><br><span class="line">            SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">            <span class="comment">//通过session工厂获取到一个session (此session非Servlet中Session，这个Session表示MyBatis框架和数据库的会话信息)</span></span><br><span class="line">            <span class="comment">//获取到session就表示MyBatis连接上数据库啦！！类似于JDBC中 Connection对象</span></span><br><span class="line">            session = sqlSessionFactory.openSession(<span class="keyword">true</span>);<span class="comment">//自动提交事务</span></span><br><span class="line">            <span class="comment">//调用session的查询集合方法</span></span><br><span class="line">            <span class="keyword">return</span> session;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                inputStream.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 02-关闭SqlSession</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeSession</span><span class="params">(SqlSession session)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(session!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            session.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="4-编写DAO的实现类发现的问题"><a href="#4-编写DAO的实现类发现的问题" class="headerlink" title="4.编写DAO的实现类发现的问题"></a>4.编写DAO的实现类发现的问题</h2><ul>
<li><strong>冗余的代码多；</strong></li>
<li><strong>调用Statement不方便</strong>；</li>
<li><strong>通用性不好，实现方法非常的类似</strong>；<h3 id="4-1-使用动态代理实现接口的实现类（不需要Mapper实现类）"><a href="#4-1-使用动态代理实现接口的实现类（不需要Mapper实现类）" class="headerlink" title="4.1 使用动态代理实现接口的实现类（不需要Mapper实现类）"></a>4.1 使用动态代理实现接口的实现类（不需要Mapper实现类）</h3>如何得到动态代理：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> bruceliu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019-09-02 10:58</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMybatis</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    SqlSession session=<span class="keyword">null</span>;</span><br><span class="line">    UserMappper um=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在每次调用测试方法之前，自动调用init()方法</span></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//MyBatis在底层使用动态代理(反射)自动生成Mapper实现类，不需要人工写实现类！</span></span><br><span class="line">        session = MyBatisUtils.getSession();</span><br><span class="line">        <span class="comment">//um就是Mapper的实现类</span></span><br><span class="line">        um = session.getMapper(UserMappper.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQuery</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; list = um.findList();</span><br><span class="line">        <span class="keyword">for</span> (User user : list) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * MyBatis增删改 需要手动提交事务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User u=<span class="keyword">new</span> User(<span class="string">&quot;刘老师&quot;</span>,<span class="keyword">new</span> Date(),<span class="string">&quot;女&quot;</span>,<span class="string">&quot;日本东京&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> count = um.addUser(u);</span><br><span class="line">        System.out.println(count&gt;<span class="number">0</span>?<span class="string">&quot;新增成功&quot;</span>:<span class="string">&quot;新增失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//每次调用测试方法之前，自动调用一下destory()</span></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destory</span><span class="params">()</span></span>&#123;</span><br><span class="line">        MyBatisUtils.closeSession(session);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
注意：<br>1、保证命名空间和接口的全路径一致；<br><img src="https://img-blog.csdnimg.cn/20190129113654994.png" alt="在这里插入图片描述"><br>2、Statement的id和接口中的方法名一致<br>3、加入到mybatis-config.xml中　　<br><img src="https://img-blog.csdnimg.cn/20190129113713930.png" alt="在这里插入图片描述"><h3 id="4-2-使用动态代理总结"><a href="#4-2-使用动态代理总结" class="headerlink" title="4.2 使用动态代理总结"></a>4.2 使用动态代理总结</h3>　　使用mapper接口不用写接口实现类即可完成数据库操作，使用非常简单，也是官方所推荐的使用方法。<br>　　使用mapper接口的必须具备以几个条件：<br>　　1) Mapper的namespace必须和mapper接口的全路径一致。<br>　　2) Mapper接口的方法名必须和sql定义的id一致。<br>　　3) Mapper接口中方法的输入参数类型必须和sql定义的parameterType一致。<br>　　4) Mapper接口中方法的输出参数类型必须和sql定义的resultType一致。<h2 id="5-Mybatis-Config配置"><a href="#5-Mybatis-Config配置" class="headerlink" title="5.Mybatis-Config配置"></a>5.Mybatis-Config配置</h2></li>
<li>properties 属性</li>
<li>settings 设置</li>
<li>typeAliases 类型别名</li>
<li>typeHandlers 类型处理器</li>
<li>objectFactory 对象工厂</li>
<li>plugins 插件</li>
<li>environments 环境<br>  environment 环境变量<br>transactionManager 事务管理器<br>dataSource 数据源</li>
<li>mappers 映射器<br>　Mybatis的配置文件中配置项是有顺序的，即按照上面的顺序；<h3 id="5-1-Properties"><a href="#5-1-Properties" class="headerlink" title="5.1 Properties"></a>5.1 Properties</h3><img src="https://img-blog.csdnimg.cn/20190129114007809.png" alt="在这里插入图片描述"><h3 id="5-2-typeAliases（别名）"><a href="#5-2-typeAliases（别名）" class="headerlink" title="5.2.typeAliases（别名）"></a>5.2.typeAliases（别名）</h3>　　类型别名是为 Java 类型命名一个短的名字。 它只和 XML 配置有关, 只用来减少类完全限定名的多余部分。<br>自定义别名：<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--实体类取别名--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--直接给所有的实体类取别名。默认的实体类的别名就是类名(不区分小大写)</span></span><br><span class="line"><span class="comment">         User实体类：User、user、USER</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.bruceliu.bean&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>
注意：<br>使用定义的别名是不区分大小写的，但一般按java规则去使用即可，即user或者User<h3 id="5-3-mappers"><a href="#5-3-mappers" class="headerlink" title="5.3.mappers"></a>5.3.mappers</h3>mapper映射文件的引入有3种方式：<br>路径相对于资源目录跟路径：<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/bruceliu/dao/UserMapper.xml&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>
使用完整的文件路径：<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.bruceliu.dao.UserMapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>
注意：此种方法要求mapper接口名称和mapper映射文件名称相同，且放在同一个目录中<br>可直接配个扫描包：<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入映射文件--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- &lt;mapper resource=&quot;com/bruceliu/mapper/UserMappper.xml&quot;&gt;&lt;/mapper&gt;--&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--&lt;mapper class=&quot;com.bruceliu.mapper.UserMappper&quot;&gt;&lt;/mapper&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!--直接映射包的名字，那么这个包下面所有的Mapper接口全部映射！--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.bruceliu.mapper&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="6-Mapper-XML-文件"><a href="#6-Mapper-XML-文件" class="headerlink" title="6.Mapper XML 文件"></a>6.Mapper XML 文件</h2>Mapper映射文件是在实际开发过程中使用最多的，也是我们学习的重点。<br>Mapper文件中包含的元素有：<br>cache – 配置给定命名空间的缓存。<br>cache-ref – 从其他命名空间引用缓存配置。<br>resultMap – 映射复杂的结果对象。<br>sql – 可以重用的 SQL 块,也可以被其他语句引用。<br>insert – 映射插入语句<br>update – 映射更新语句<br>delete – 映射删除语句<br>select – 映射查询语句<h3 id="6-1-CRUD"><a href="#6-1-CRUD" class="headerlink" title="6.1.CRUD"></a>6.1.CRUD</h3><h4 id="6-1-1-select"><a href="#6-1-1-select" class="headerlink" title="6.1.1.select"></a>6.1.1.select</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">      select * from user where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
select标签叫Statement<br>id，必要属性，在当前的命名空间下不能重复。<br>指定输出类型，resultType<br>parameterType （不是必须）如果不指定，自动识别。<h4 id="6-1-2-insert"><a href="#6-1-2-insert" class="headerlink" title="6.1.2. insert"></a>6.1.2. insert</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 增删改返回的都是int值 不用写返回值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span>&gt;</span></span><br><span class="line">   INSERT INTO USER VALUES (null,#&#123;username&#125;,#&#123;birthday&#125;,#&#123;sex&#125;,#&#123;address&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>
insert标签叫Statement<br>id，必要属性，在当前的命名空间下不能重复。<br>parameterType （不是必须）如果不指定，自动识别。<h4 id="6-1-3-如何获得到自增id"><a href="#6-1-3-如何获得到自增id" class="headerlink" title="6.1.3.如何获得到自增id"></a>6.1.3.如何获得到自增id</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 增删改返回的都是int值 不用写返回值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;User&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">   INSERT INTO USER VALUES (null,#&#123;username&#125;,#&#123;birthday&#125;,#&#123;sex&#125;,#&#123;address&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>
useGeneratedKeys：开启自增长映射<br>keyProperty：指定id所对应对象中的属性名</li>
</ul>
<p>当执行完saveUser()方法后，其返回值依然是执行sql影响的行数，并不是要获取的自增ID！Mybatis会自动将返回的主键值赋值给对象User的属性id，因此你可以通过属性的get方法获得插入的主键值： System.out.println(User.getId())；</p>
<ul>
<li>另外一种写法<br>在插入操作完成之前或之后，可以配置<selectKey>标签获得生成的主键的值，获得插入之前还是之后的值，可以通过配置order属性来指定。<br>LAST_INSERT_ID：该函数是mysql的函数，获取自增主键的ID，它必须配合insert语句一起使用<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 增删改返回的都是int值 不用写返回值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">       </span><br><span class="line">       <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">order</span>=<span class="string">&quot;AFTER&quot;</span>&gt;</span></span><br><span class="line">	        SELECT LAST_INSERT_ID() </span><br><span class="line">       <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">       INSERT INTO USER VALUES (null,#&#123;username&#125;,#&#123;birthday&#125;,#&#123;sex&#125;,#&#123;address&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="6-1-4-update"><a href="#6-1-4-update" class="headerlink" title="6.1.4.update"></a>6.1.4.update</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span> &gt;</span></span><br><span class="line">       update user set username=#&#123;username&#125;,birthday=#&#123;birthday&#125;,sex=#&#123;sex&#125;,address=#&#123;address&#125; where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>
update标签叫Statement<br>id，必要属性，在当前的命名空间下不能重复。<br>parameterType （不是必须）如果不指定，自动识别。<h4 id="6-1-5-删除"><a href="#6-1-5-删除" class="headerlink" title="6.1.5.删除"></a>6.1.5.删除</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">     delete from user where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>
delete标签叫Statement<br>id，必要属性，在当前的命名空间下不能重复。<br>parameterType （不是必须）如果不指定，自动识别。<h2 id="7-和-区别-面试题"><a href="#7-和-区别-面试题" class="headerlink" title="7. #和$区别(面试题)"></a>7. #和$区别(面试题)</h2>在映射文件配置<select>标签执行查询操作。<br>注意：</li>
<li>{}:相当于占位符<br>{id}：其中的id可以表示输入参数的名称，如果是简单类型名称可以任意</li>
<li>${}:表示拼接sql语句</li>
<li>${value}：表示输入参数的名称，如果参数是简单类型，参数名称必须是value<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">   <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">根据id查询用户，User findById(int id)</span></span><br><span class="line"><span class="comment">	select：配置查询语句</span></span><br><span class="line"><span class="comment">		id：可以通过id找到执行的statement，statement唯一标识</span></span><br><span class="line"><span class="comment">		parameterType:输入参数类型</span></span><br><span class="line"><span class="comment">		resultType:输出结果类型	</span></span><br><span class="line"><span class="comment">		#&#123;&#125;:相当于占位符</span></span><br><span class="line"><span class="comment">		#&#123;id&#125;：其中的id可以表示输入参数的名称，如果是简单类型名称可以任意</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span> &gt;</span></span><br><span class="line">	 select * from user where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">根据用户名称来模糊查询用户信息列表；</span></span><br><span class="line"><span class="comment">	$&#123;&#125;:表示拼接sql语句</span></span><br><span class="line"><span class="comment">	$&#123;value&#125;：表示输入参数的名称，如果参数是简单类型，参数名称必须是value</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByUsername&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.lang.String&quot;</span></span></span><br><span class="line"><span class="tag"> 	<span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line"> 	select * from user where username like &#x27;%$&#123;value&#125;%&#x27;	</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
　在Mybatis的mapper中，参数传递有2种方式，一种是#{}另一种是${}，两者有着很大的区别：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># &#123;&#125; 实现的是sql语句的预处理参数，之后执行sql中用?号代替，使用时不需要关注数据类型，Mybatis自动实现数据类型的转换。并且可以防止SQL注入。</span><br><span class="line">$&#123;&#125; 实现是sql语句的直接拼接，不做数据类型转换，需要自行判断数据类型。不能防止SQL注入。</span><br><span class="line">　　</span><br><span class="line">　　</span><br><span class="line">总结：</span><br><span class="line"># &#123;&#125; 占位符，用于参数传递。</span><br><span class="line">$&#123;&#125;用于SQL拼接。</span><br></pre></td></tr></table></figure>



<h2 id="8-parameterType的传入参数"><a href="#8-parameterType的传入参数" class="headerlink" title="8.parameterType的传入参数"></a>8.parameterType的传入参数</h2><p>　　传入类型有三种：<br>　　　　1、简单类型，string、long、integer等<br>　　　　2、Pojo类型，User等<br>　　　　3、HashMap类型。</p>
<h3 id="8-1-传入参数是HashMap类型"><a href="#8-1-传入参数是HashMap类型" class="headerlink" title="8.1 .传入参数是HashMap类型"></a>8.1 .传入参数是HashMap类型</h3><p>查询需求：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUsers&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    select * from user where birthday between #&#123;startdate&#125; and #&#123;enddate&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>查询测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span></span>&#123;</span><br><span class="line">	HashMap&lt;String, Object&gt; map=<span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">	map.put(<span class="string">&quot;startdate&quot;</span>, <span class="string">&quot;2018-09-07&quot;</span>);</span><br><span class="line">	map.put(<span class="string">&quot;enddate&quot;</span>, <span class="string">&quot;2018-09-25&quot;</span>);</span><br><span class="line">	List&lt;User&gt; users = mapper.getUsers(map);</span><br><span class="line">	<span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">		System.out.println(user);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：map的key要和sql中的占位符保持名字一致</p>
<h3 id="8-2-分页查询"><a href="#8-2-分页查询" class="headerlink" title="8.2 分页查询"></a>8.2 分页查询</h3><p>查询需求：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 分页：map传参 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAuthorByPage&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">	SELECT * FROM USER LIMIT #&#123;offset&#125;, #&#123;pagesize&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>接口：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">    * 根据分页参数查询</span><br><span class="line">    * @param paramList 分页参数</span><br><span class="line">    * @return 分页后的用户列表</span><br><span class="line">    */</span><br><span class="line">   List<span class="tag">&lt;<span class="name">User</span>&gt;</span> selectAuthorByPage(Map&lt;String, Object&gt; paramList);</span><br></pre></td></tr></table></figure>
<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectAuthorByPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">	map.put(<span class="string">&quot;offset&quot;</span>, <span class="number">0</span>);</span><br><span class="line">	map.put(<span class="string">&quot;pagesize&quot;</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">	List&lt;User&gt; authorList = mapper.selectAuthorByPage(map);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; authorList.size(); i++) &#123;</span><br><span class="line">		System.out.println(authorList.get(i));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="8-2-1使用注解"><a href="#8-2-1使用注解" class="headerlink" title="8.2.1使用注解"></a>8.2.1使用注解</h4><p>注意：mapper文件中的参数占位符的名字一定要和接口中参数的注解保持一致<br>mapper：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 分页：map传参 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUserByPage2&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">	SELECT * FROM USER LIMIT #&#123;offset&#125;, #&#123;pagesize&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据分页参数查询</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> offset 偏移量</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pagesize  每页条数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 分页后的用户列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">selectUserByPage2</span><span class="params">(<span class="meta">@Param(value = &quot;offset&quot;)</span> <span class="keyword">int</span> offset, <span class="meta">@Param(value = &quot;pagesize&quot;)</span> <span class="keyword">int</span> pagesize)</span></span>;</span><br></pre></td></tr></table></figure>
<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectAuthorByPage2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	List&lt;User&gt; authorList = mapper.selectUserByPage2(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; authorList.size(); i++) &#123;</span><br><span class="line">		System.out.println(authorList.get(i));</span><br><span class="line">		System.out.println(<span class="string">&quot;----------------------&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="8-2-2-使用参数顺序"><a href="#8-2-2-使用参数顺序" class="headerlink" title="8.2.2 使用参数顺序"></a>8.2.2 使用参数顺序</h4><p>注意：mapper文件中参数占位符的位置编号一定要和接口中参数的顺序保持一致<br>mapper：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 分页：传参顺序 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUserByPage3&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">       SELECT * FROM USER LIMIT #&#123;param1&#125;,#&#123;param2&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据分页参数查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> offset 偏移量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pagesize 每页条数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 分页后的用户列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">selectUserByPage3</span><span class="params">(<span class="keyword">int</span> offset, <span class="keyword">int</span> pagesize)</span></span>;</span><br></pre></td></tr></table></figure>
<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectAuthorByPage3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		List&lt;User&gt; users = mapper.selectUserByPage3(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; users.size(); i++) &#123;</span><br><span class="line">			System.out.println(users.get(i));</span><br><span class="line">			System.out.println(<span class="string">&quot;----------------------&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<h2 id="9-返回Map类型查询结果"><a href="#9-返回Map类型查询结果" class="headerlink" title="9.返回Map类型查询结果"></a>9.返回Map类型查询结果</h2><p>Mybatis中查询结果集为Map的功能,只需要重写ResultHandler接口，,然后用SqlSession 的select方法,将xml里面的映射文件的返回值配置成 HashMap 就可以了。具体过程如下</p>
<h3 id="9-1-xml文件配置"><a href="#9-1-xml文件配置" class="headerlink" title="9.1 xml文件配置"></a>9.1 xml文件配置</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;resultMap1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;HashMap&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;key&quot;</span> <span class="attr">column</span>=<span class="string">&quot;r1&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;value&quot;</span> <span class="attr">column</span>=<span class="string">&quot;r2&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getResult&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;resultMap1&quot;</span>&gt;</span></span><br><span class="line">	select count(*) r1, max(birthday) r2 from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> HashMap&lt;String, Object&gt; <span class="title">getResult</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test8</span><span class="params">()</span></span>&#123;</span><br><span class="line">	HashMap&lt;String, Object&gt; result = mapper.getResult();</span><br><span class="line">	System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>返回多个值：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">&quot;getResult&quot;</span> resultType=<span class="string">&quot;map&quot;</span>&gt;</span><br><span class="line">		<span class="function">select <span class="title">count</span><span class="params">(*)</span> r1, <span class="title">max</span><span class="params">(birthday)</span> r2,<span class="title">min</span><span class="params">(id)</span> r3 from user</span></span><br><span class="line"><span class="function">&lt;/select&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="10-解决数据库字段和实体类属性不同"><a href="#10-解决数据库字段和实体类属性不同" class="headerlink" title="10.解决数据库字段和实体类属性不同"></a>10.解决数据库字段和实体类属性不同</h2><p>在平时的开发中，我们表中的字段名和表对应实体类的属性名称不一定都是完全相同的，下面来演示一下这种情况下的如何解决字段名与实体类属性名不相同的冲突。</p>
<p>上面的测试代码演示当实体类中的属性名和表中的字段名不一致时，使用MyBatis进行查询操作时无法查询出相应的结果的问题以及针对问题采用的两种办法：</p>
<ul>
<li>解决办法一: 通过在查询的sql语句中定义字段名的别名，让字段名的别名和实体类的属性名一致，这样就可以表的字段名和实体类的属性名一一对应上了，这种方式是通过在sql语句中定义别名来解决字段名和属性名的映射关系的。<br><img src="https://img-blog.csdnimg.cn/20190129120036646.png" alt="在这里插入图片描述"></li>
<li>解决办法二: 通过<resultMap>来映射字段名和实体类属性名的一一对应关系。这种方式是使用MyBatis提供的解决方式来解决字段名和属性名的映射关系的。<br><img src="https://img-blog.csdnimg.cn/20190129120057415.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h2 id="11-MyBatis整体架构"><a href="#11-MyBatis整体架构" class="headerlink" title="11.MyBatis整体架构"></a>11.MyBatis整体架构</h2>Mybatis是一个类似于Hibernate的ORM持久化框架，支持普通SQL查询，存储过程以及高级映射。Mybatis通过使用简单的XML或注解用于配置和原始映射，将接口和POJO对象映射成数据库中的记录。<br>由于Mybatis是直接基于JDBC做了简单的映射包装，所有从性能角度来看：<br>JDBC &gt; Mybatis &gt; Hibernate<br><img src="https://img-blog.csdnimg.cn/20190129120118133.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>1、配置2类配置文件，其中一类是：Mybatis-Config.xml (名字不是写死，随便定义)，另一类：Mapper.xml(多个)，定义了sql片段；<br>2、通过配置文件得到SqlSessionFactory<br>3、通过SqlSessionFactory得到SqlSession（操作数据库）<br>4、通过底层的Executor（执行器）执行sql，Mybatis提供了2种实现，一种是基本实现，另一种带有缓存功能的实现；</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>SSM整合</title>
    <url>/2021/03/30/SSM%E6%95%B4%E5%90%88/</url>
    <content><![CDATA[<h2 id="整合SSM"><a href="#整合SSM" class="headerlink" title="整合SSM"></a>整合SSM</h2><p><strong>环境要求：</strong></p>
<ul>
<li>IDEA</li>
<li>MYSQL5.0以上</li>
<li>Tomcat9</li>
<li>Maven3.6</li>
</ul>
<p>要求：</p>
<ul>
<li>需要熟练掌握MySQL数据库，Spring，JavaWeb及Mybatis知识，简单的前端知识；</li>
</ul>
<span id="more"></span>

<p><strong>数据库环境：</strong></p>
<p>创建一个存放书籍的数据表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE &#96;ssmbuild&#96;;</span><br><span class="line"> </span><br><span class="line">USE &#96;ssmbuild&#96;;</span><br><span class="line"> </span><br><span class="line">DROP TABLE IF EXISTS &#96;books&#96;;</span><br><span class="line"> </span><br><span class="line">CREATE TABLE &#96;books&#96; (</span><br><span class="line">  &#96;bookID&#96; INT(10) NOT NULL AUTO_INCREMENT COMMENT &#39;书id&#39;,</span><br><span class="line">  &#96;bookName&#96; VARCHAR(100) NOT NULL COMMENT &#39;书名&#39;,</span><br><span class="line">  &#96;bookCounts&#96; INT(11) NOT NULL COMMENT &#39;数量&#39;,</span><br><span class="line">  &#96;detail&#96; VARCHAR(200) NOT NULL COMMENT &#39;描述&#39;,</span><br><span class="line">  KEY &#96;bookID&#96; (&#96;bookID&#96;)</span><br><span class="line">) ENGINE&#x3D;INNODB DEFAULT CHARSET&#x3D;utf8</span><br><span class="line"> </span><br><span class="line">INSERT  INTO &#96;books&#96;(&#96;bookID&#96;,&#96;bookName&#96;,&#96;bookCounts&#96;,&#96;detail&#96;)VALUES </span><br><span class="line">(1,&#39;Java&#39;,1,&#39;从入门到放弃&#39;),</span><br><span class="line">(2,&#39;MySQL&#39;,10,&#39;从删库到跑路&#39;),</span><br><span class="line">(3,&#39;Linux&#39;,5,&#39;从进门到进牢&#39;);</span><br></pre></td></tr></table></figure>

<p><strong>基本环境搭建：</strong></p>
<p>新建一个Maven项目，添加web支持</p>
<p>到入相关依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- java --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- c3p0 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- javax.servlet-api --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- jstl --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- mybatis-spring --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- mybatis --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- spring-webmvc --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- spring-jdbc --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- lombok --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>添加资源过滤设置：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>创建基本结构和配置框架：</strong></p>
<ul>
<li><p>com.test.pojo</p>
</li>
<li><p>com.test.mapper</p>
</li>
<li><p>com.test.service</p>
</li>
<li><p>com.test.controller</p>
</li>
<li><p>mybatis-config.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>applicationContext.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="mybatis层编写："><a href="#mybatis层编写：" class="headerlink" title="mybatis层编写："></a>mybatis层编写：</h3><ul>
<li>数据库配置文件database.properties</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">jdbc.driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/ssmbuil?duseUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=UTC&amp;allowPublicKeyRetrieval=true</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure>

<ul>
<li>编写MyBatis的核心配置文件</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.test.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/test/dao/BookMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>编写数据库对应的实体类com.test.pojo.Books</li>
<li>使用lombok插件</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.pojo;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Books</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> bookID;</span><br><span class="line">    <span class="keyword">private</span> String bookName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> bookCounts;</span><br><span class="line">    <span class="keyword">private</span> String detail;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>编写mapper层的Mapper接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.dao;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.test.pojo.Books;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookMapper</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//增加一个Book</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addBook</span><span class="params">(Books book)</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//根据id删除一个Book</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteBookById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//更新Book</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateBook</span><span class="params">(Books books)</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//根据id查询,返回一个Book</span></span><br><span class="line">    <span class="function">Books <span class="title">queryBookById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//查询全部Book,返回list集合</span></span><br><span class="line">    <span class="function">List&lt;Books&gt; <span class="title">queryAllBook</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>编写对应的xml文件，BooksMapper.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.test.dao.BookMapper&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!--增加一个Book--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addBook&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Books&quot;</span>&gt;</span></span><br><span class="line">        insert into ssmbuild.books(bookName,bookCounts,detail)</span><br><span class="line">        values (#&#123;bookName&#125;, #&#123;bookCounts&#125;, #&#123;detail&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!--根据id删除一个Book--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteBookById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">        delete from ssmbuild.books where bookID=#&#123;bookID&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!--更新Book--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBook&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Books&quot;</span>&gt;</span></span><br><span class="line">        update ssmbuild.books</span><br><span class="line">        set bookName = #&#123;bookName&#125;,bookCounts = #&#123;bookCounts&#125;,detail = #&#123;detail&#125;</span><br><span class="line">        where bookID = #&#123;bookID&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!--根据id查询,返回一个Book--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBookById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Books&quot;</span>&gt;</span></span><br><span class="line">        select * from ssmbuild.books</span><br><span class="line">        where bookID = #&#123;bookID&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!--查询全部Book--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryAllBook&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Books&quot;</span>&gt;</span></span><br><span class="line">        SELECT * from ssmbuild.books</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>编写service层的接口和实现类</p>
<p>接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.service;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.test.pojo.Books;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//BookService:底下需要去实现,调用dao层</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//增加一个Book</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addBook</span><span class="params">(Books book)</span></span>;</span><br><span class="line">    <span class="comment">//根据id删除一个Book</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteBookById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    <span class="comment">//更新Book</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateBook</span><span class="params">(Books books)</span></span>;</span><br><span class="line">    <span class="comment">//根据id查询,返回一个Book</span></span><br><span class="line">    <span class="function">Books <span class="title">queryBookById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    <span class="comment">//查询全部Book,返回list集合</span></span><br><span class="line">    <span class="function">List&lt;Books&gt; <span class="title">queryAllBook</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.service;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.test.dao.BookMapper;</span><br><span class="line"><span class="keyword">import</span> com.test.pojo.Books;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//调用dao层的操作，设置一个set接口，方便Spring管理</span></span><br><span class="line">    <span class="keyword">private</span> BookMapper bookMapper;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBookMapper</span><span class="params">(BookMapper bookMapper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bookMapper = bookMapper;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addBook</span><span class="params">(Books book)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookMapper.addBook(book);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteBookById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookMapper.deleteBookById(id);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateBook</span><span class="params">(Books books)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookMapper.updateBook(books);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Books <span class="title">queryBookById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookMapper.queryBookById(id);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Books&gt; <span class="title">queryAllBook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookMapper.queryAllBook();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Spring层"><a href="#Spring层" class="headerlink" title="Spring层"></a>Spring层</h3><ul>
<li><p>配置Spring整合MyBatis，这里数据源使用c3p0连接池；</p>
</li>
<li><p>编写Spring整合Mybatis的相关配置文件；applicationContext-mapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 配置整合mybatis --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.关联数据库文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:database.properties&quot;</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 2.数据库连接池 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--数据库连接池</span></span><br><span class="line"><span class="comment">        dbcp  半自动化操作  不能自动连接</span></span><br><span class="line"><span class="comment">        c3p0  自动化操作（自动的加载配置文件 并且设置到对象里面）</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置连接池属性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- c3p0连接池的私有属性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;30&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 关闭连接后不自动commit --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;autoCommitOnClose&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 获取连接超时时间 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;checkoutTimeout&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10000&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 当获取连接失败重试次数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;acquireRetryAttempts&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 3.配置SqlSessionFactory对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入数据库连接池 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置MyBaties全局配置文件:mybatis-config.xml --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--解释 ：https://www.cnblogs.com/jpfss/p/7799806.html--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入sqlSessionFactory --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 给出需要扫描Dao接口包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.test.dao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>Spring整合service层 applicationContext-service.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 扫描service相关的bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.test.service&quot;</span> /&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!--BookServiceImpl注入到IOC容器中--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;BookServiceImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.test.service.BookServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bookMapper&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookMapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入数据库连接池 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>Spring就是一个容器，大杂烩</p>
<h3 id="SpringMVC层"><a href="#SpringMVC层" class="headerlink" title="SpringMVC层"></a>SpringMVC层</h3><ul>
<li><p>web.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!--DispatcherServlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--一定要注意:我们这里加载的是所有配置文件--&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext-*.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--encodingFilter--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span></span><br><span class="line">            org.springframework.web.filter.CharacterEncodingFilter</span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--Session过期时间--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>15<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>SpringMvc-servlet.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">    https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 配置SpringMVC --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.开启SpringMVC注解驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2.静态资源默认servlet配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 3.配置jsp 显示ViewResolver视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;viewClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;org.springframework.web.servlet.view.JstlView&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 4.扫描web相关的bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.test.controller&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>Spring 整合配合文件，applicationContext-common.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;applicationContext-mapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;applicationContext-service.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;SpringMvc-servlet.xml&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>配置文件就差不多了</strong></p>
<h3 id="Controller和视图层的编写"><a href="#Controller和视图层的编写" class="headerlink" title="Controller和视图层的编写"></a>Controller和视图层的编写</h3><ul>
<li>BookController 类编写 ， 查询全部书籍</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/book&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookController</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;BookServiceImpl&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/allBook&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">list</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        List&lt;Books&gt; list = bookService.queryAllBook();</span><br><span class="line">        model.addAttribute(<span class="string">&quot;list&quot;</span>, list);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;allBook&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>编写首页 index.jsp</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span> %&gt;</span><br><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;首页&lt;/title&gt;</span><br><span class="line">    &lt;style type=<span class="string">&quot;text/css&quot;</span>&gt;</span><br><span class="line">        a &#123;</span><br><span class="line">            text-decoration: none;</span><br><span class="line">            color: black;</span><br><span class="line">            font-size: 18px;</span><br><span class="line">        &#125;</span><br><span class="line">        h3 &#123;</span><br><span class="line">            width: 180px;</span><br><span class="line">            height: 38px;</span><br><span class="line">            margin: 100px auto;</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 38px;</span><br><span class="line">            background: deepskyblue;</span><br><span class="line">            border-radius: 4px;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"> </span><br><span class="line">&lt;h3&gt;</span><br><span class="line">    &lt;a href=&quot;$&#123;pageContext.request.contextPath&#125;/book/allBook&quot;&gt;点击进入列表页&lt;/a&gt;</span><br><span class="line">&lt;/h3&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>书籍列表页面 allbook.jsp</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;书籍列表&lt;/title&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;!-- 引入 Bootstrap --&gt;</span><br><span class="line">    &lt;link href=<span class="string">&quot;https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"> </span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;row clearfix&quot;</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;col-md-12 column&quot;</span>&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;page-header&quot;</span>&gt;</span><br><span class="line">                &lt;h1&gt;</span><br><span class="line">                    &lt;small&gt;书籍列表 —— 显示所有书籍&lt;/small&gt;</span><br><span class="line">                &lt;/h1&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;row&quot;</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;col-md-4 column&quot;</span>&gt;</span><br><span class="line">            &lt;a class=&quot;btn btn-primary&quot; href=&quot;$&#123;pageContext.request.contextPath&#125;/book/toAddBook&quot;&gt;新增&lt;/a&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;row clearfix&quot;</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;col-md-12 column&quot;</span>&gt;</span><br><span class="line">            &lt;table <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;table table-hover table-striped&quot;</span>&gt;</span><br><span class="line">                &lt;thead&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;th&gt;书籍编号&lt;/th&gt;</span><br><span class="line">                    &lt;th&gt;书籍名字&lt;/th&gt;</span><br><span class="line">                    &lt;th&gt;书籍数量&lt;/th&gt;</span><br><span class="line">                    &lt;th&gt;书籍详情&lt;/th&gt;</span><br><span class="line">                    &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">                &lt;/thead&gt;</span><br><span class="line">                &lt;tbody&gt;</span><br><span class="line">                &lt;c:forEach <span class="keyword">var</span>=<span class="string">&quot;book&quot;</span> items=<span class="string">&quot;$&#123;requestScope.get(&#x27;list&#x27;)&#125;&quot;</span>&gt;</span><br><span class="line">                    &lt;tr&gt;</span><br><span class="line">                        &lt;td&gt;$&#123;book.getBookID()&#125;&lt;/td&gt;</span><br><span class="line">                        &lt;td&gt;$&#123;book.getBookName()&#125;&lt;/td&gt;</span><br><span class="line">                        &lt;td&gt;$&#123;book.getBookCounts()&#125;&lt;/td&gt;</span><br><span class="line">                        &lt;td&gt;$&#123;book.getDetail()&#125;&lt;/td&gt;</span><br><span class="line">                        &lt;td&gt;</span><br><span class="line">                            &lt;a href=&quot;$&#123;pageContext.request.contextPath&#125;/book/toUpdateBook?id=$&#123;book.getBookID()&#125;&quot;&gt;更改&lt;/a&gt; |</span><br><span class="line">                            &lt;a href=&quot;$&#123;pageContext.request.contextPath&#125;/book/del/$&#123;book.getBookID()&#125;&quot;&gt;删除&lt;/a&gt;</span><br><span class="line">                        &lt;/td&gt;</span><br><span class="line">                    &lt;/tr&gt;</span><br><span class="line">                &lt;/c:forEach&gt;</span><br><span class="line">                &lt;/tbody&gt;</span><br><span class="line">            &lt;/table&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>BookController类编写：添加书籍</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/toAddBook&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toAddPaper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;addBook&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@RequestMapping(&quot;/addBook&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">addPaper</span><span class="params">(Books books)</span> </span>&#123;</span><br><span class="line">    System.out.println(books);</span><br><span class="line">    bookService.addBook(books);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/book/allBook&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>添加书籍页面：addBook.jsp</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line"> </span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;新增书籍&lt;/title&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;!-- 引入 Bootstrap --&gt;</span><br><span class="line">    &lt;link href=<span class="string">&quot;https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;row clearfix&quot;</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;col-md-12 column&quot;</span>&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;page-header&quot;</span>&gt;</span><br><span class="line">                &lt;h1&gt;</span><br><span class="line">                    &lt;small&gt;新增书籍&lt;/small&gt;</span><br><span class="line">                &lt;/h1&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/book/addBook&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">        书籍名称：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;bookName&quot;</span>&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">        书籍数量：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;bookCounts&quot;</span>&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">        书籍详情：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;detail&quot;</span>&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;添加&quot;</span>&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>BookController 类编写 ，修改书籍</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/toUpdateBook&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toUpdateBook</span><span class="params">(Model model, <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    Books books = bookService.queryBookById(id);</span><br><span class="line">    System.out.println(books);</span><br><span class="line">    model.addAttribute(<span class="string">&quot;book&quot;</span>,books );</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;updateBook&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@RequestMapping(&quot;/updateBook&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">updateBook</span><span class="params">(Model model, Books book)</span> </span>&#123;</span><br><span class="line">    System.out.println(book);</span><br><span class="line">    bookService.updateBook(book);</span><br><span class="line">    Books books = bookService.queryBookById(book.getBookID());</span><br><span class="line">    model.addAttribute(<span class="string">&quot;books&quot;</span>, books);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/book/allBook&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>修改书籍页面  updateBook.jsp</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;修改信息&lt;/title&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;!-- 引入 Bootstrap --&gt;</span><br><span class="line">    &lt;link href=<span class="string">&quot;https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;row clearfix&quot;</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;col-md-12 column&quot;</span>&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;page-header&quot;</span>&gt;</span><br><span class="line">                &lt;h1&gt;</span><br><span class="line">                    &lt;small&gt;修改信息&lt;/small&gt;</span><br><span class="line">                &lt;/h1&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/book/updateBook&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;hidden&quot;</span> name=<span class="string">&quot;bookID&quot;</span> value=<span class="string">&quot;$&#123;book.getBookID()&#125;&quot;</span>/&gt;</span><br><span class="line">        书籍名称：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;bookName&quot;</span> value=<span class="string">&quot;$&#123;book.getBookName()&#125;&quot;</span>/&gt;</span><br><span class="line">        书籍数量：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;bookCounts&quot;</span> value=<span class="string">&quot;$&#123;book.getBookCounts()&#125;&quot;</span>/&gt;</span><br><span class="line">        书籍详情：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;detail&quot;</span> value=<span class="string">&quot;$&#123;book.getDetail() &#125;&quot;</span>/&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>/&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>BookController 类编写，删除书籍</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/del/&#123;bookId&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">deleteBook</span><span class="params">(<span class="meta">@PathVariable(&quot;bookId&quot;)</span> <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    bookService.deleteBookById(id);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/book/allBook&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="配置tomcat运行测试"><a href="#配置tomcat运行测试" class="headerlink" title="配置tomcat运行测试"></a>配置tomcat运行测试</h3>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>SSM整合</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC常用注解</title>
    <url>/2021/03/20/SpringMVC%E4%B8%93%E9%A2%98(%E5%9B%9B)-SpringMVC%E7%9A%84%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<p>[TOC]</p>
<h3 id="1-RequestMapping-注解"><a href="#1-RequestMapping-注解" class="headerlink" title="1.RequestMapping 注解"></a>1.RequestMapping 注解</h3><h4 id="1-1-使用说明"><a href="#1-1-使用说明" class="headerlink" title="1.1.使用说明"></a>1.1.使用说明</h4><ul>
<li><p>源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Mapping</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RequestMapping &#123; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>作用：<br>用于建立请求 URL 和处理请求方法之间的对应关系。</p>
</li>
<li><p>出现位置：</p>
<span id="more"></span></li>
</ul>
<p>类上：</p>
<blockquote>
<p>请求 URL 的第一级访问目录。此处不写的话，就相当于应用的根目录。写的话需要以/开头。<br>它出现的目的是为了使我们的 URL 可以按照模块化管理:<br>例如：<br>账户模块：<br>/account/add<br>/account/update<br>/account/delete<br>…<br>订单模块：<br>/order/add<br>/order/update<br>/order/delete<br>红色的部分就是把 RequsetMappding 写在类上，使我们的 URL 更加精细。</p>
</blockquote>
<p>方法上：</p>
<blockquote>
<p>请求 URL 的第二级访问目录。</p>
</blockquote>
<ul>
<li>属性：<blockquote>
<p>value：用于指定请求的 URL。它和 path 属性的作用是一样的。<br>method：用于指定请求的方式。<br>params：用于指定限制请求参数的条件。它支持简单的表达式。要求请求参数的 key 和 value 必须和<br>配置的一模一样。<br>例如：<br>params = {“accountName”}，表示请求参数必须有 accountName<br>params = {“moeny!100”}，表示请求参数中 money 不能是 100。<br>headers：用于指定限制请求消息头的条件。<br>注意：<br>以上四个属性只要出现 2 个或以上时，他们的关系是与的关系。</p>
</blockquote>
<h4 id="1-2-使用示例"><a href="#1-2-使用示例" class="headerlink" title="1.2.使用示例"></a>1.2.使用示例</h4><h5 id="1-2-1-出现位置的示例："><a href="#1-2-1-出现位置的示例：" class="headerlink" title="1.2.1.出现位置的示例："></a>1.2.1.出现位置的示例：</h5></li>
<li>控制器代码:<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* RequestMapping 注解出现的位置</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Controller(&quot;accountController&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/account&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line">	<span class="meta">@RequestMapping(&quot;/findAccount&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">findAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;查询了账户。。。。&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>jsp 中的代码：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class="line">pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">title</span>&gt;</span>requestmapping 的使用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 第一种访问方式 --&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/account/findAccount&quot;</span>&gt;</span>查询账户<span class="tag">&lt;/<span class="name">a</span>&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--第二种访问方式 --&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;account/findAccount&quot;</span>&gt;</span>查询账户<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
注意：<blockquote>
<p>当我们使用此种方式配置时，在 jsp 中第二种写法时，不要在访问 URL 前面加/，否则无法找到资源。</p>
</blockquote>
</li>
</ul>
<h5 id="1-2-2-method-属性的示例："><a href="#1-2-2-method-属性的示例：" class="headerlink" title="1.2.2.method 属性的示例："></a>1.2.2.method 属性的示例：</h5><ul>
<li>控制器代码：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 保存账户</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping(value=&quot;/saveAccount&quot;,method=RequestMethod.POST)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">saveAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;保存了账户&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;success&quot;</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>jsp 代码：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 请求方式的示例 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;account/saveAccount&quot;</span>&gt;</span>保存账户，get 请求<span class="tag">&lt;/<span class="name">a</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;account/saveAccount&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;保存账户，post 请求&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
注意：<br>当使用 get 请求时，提示错误信息是 405，信息是方法不支持 get 方式请求<br><img src="https://img-blog.csdnimg.cn/20190720175605578.png" alt="在这里插入图片描述"><h5 id="1-2-3-params-属性的示例："><a href="#1-2-3-params-属性的示例：" class="headerlink" title="1.2.3.params 属性的示例："></a>1.2.3.params 属性的示例：</h5></li>
<li>控制器的代码：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 删除账户</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping(value=&quot;/removeAccount&quot;,params&#123;&quot;accountName&quot;,&quot;money&gt;100&quot;&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">removeAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;删除了账户&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;success&quot;</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>jsp 中的代码：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 请求参数的示例 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;account/removeAccount?accountName=aaa&amp;money&gt;100&quot;</span>&gt;</span>删除账户，金额 100<span class="tag">&lt;/<span class="name">a</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;account/removeAccount?accountName=aaa&amp;money&gt;150&quot;</span>&gt;</span>删除账户，金额 150<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>注意：<br>当我们点击第一个超链接时,可以访问成功。<br>当我们点击第二个超链接时，无法访问。如下图：</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20190720175830405.png" alt="在这里插入图片描述"></p>
<h3 id="2-RequestParam注解"><a href="#2-RequestParam注解" class="headerlink" title="2.RequestParam注解"></a>2.RequestParam注解</h3><h4 id="2-1-使用说明"><a href="#2-1-使用说明" class="headerlink" title="2.1.使用说明"></a>2.1.使用说明</h4><ul>
<li>作用：<br>把请求中指定名称的参数给控制器中的形参赋值。</li>
<li>属性：<br>value：请求参数中的名称。<br>required：请求参数中是否必须提供此参数。默认值：true。表示必须提供，如果不提供将报错。<h4 id="2-2-使用示例"><a href="#2-2-使用示例" class="headerlink" title="2.2.使用示例"></a>2.2.使用示例</h4></li>
<li>jsp<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- requestParams 注解的使用 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;springmvc/useRequestParam?name=test&quot;</span>&gt;</span>requestParam 注解<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>控制器中的代码：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* requestParams 注解的使用</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/useRequestParam&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">useRequestParam</span><span class="params">(<span class="meta">@RequestParam(&quot;name&quot;)</span>String username,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="meta">@RequestParam(value=&quot;age&quot;,required=false)</span>Integer age)</span></span>&#123;</span><br><span class="line">	System.out.println(username+<span class="string">&quot;,&quot;</span>+age);</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;success&quot;</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>运行结果：</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/2019072018024467.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="3-RequestBody注解"><a href="#3-RequestBody注解" class="headerlink" title="3.RequestBody注解"></a>3.RequestBody注解</h3><h4 id="3-1-使用说明"><a href="#3-1-使用说明" class="headerlink" title="3.1.使用说明"></a>3.1.使用说明</h4><ul>
<li>作用：<br>用于获取请求体内容。直接使用得到是 key=value&amp;key=value…结构的数据。<br>get 请求方式不适用。</li>
<li>属性：<br>required：是否必须有请求体。默认值是:true。当取值为 true 时,get 请求方式会报错。如果取值为 false，get 请求得到是 null。<h4 id="3-2-使用示例"><a href="#3-2-使用示例" class="headerlink" title="3.2.使用示例"></a>3.2.使用示例</h4></li>
<li>post 请求 jsp 代码：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- request body 注解 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;springmvc/useRequestBody&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">	用户名称：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> &gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">	用户密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> &gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">	用户年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> &gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;保存&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>get 请求 jsp 代码：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;springmvc/useRequestBody?body=test&quot;</span>&gt;</span>requestBody 注解 get 请求<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>控制器代码：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* RequestBody 注解</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/useRequestBody&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">useRequestBody</span><span class="params">(<span class="meta">@RequestBody(required=false)</span> String body)</span></span>&#123;</span><br><span class="line">	System.out.println(body);</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;success&quot;</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>post 请求运行结果：</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20190720180632557.png" alt="在这里插入图片描述"></p>
<ul>
<li>get 请求运行结果:</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20190720180724254.png" alt="在这里插入图片描述"></p>
<h3 id="4-PathVaribale注解"><a href="#4-PathVaribale注解" class="headerlink" title="4.PathVaribale注解"></a>4.PathVaribale注解</h3><h4 id="4-1-使用说明"><a href="#4-1-使用说明" class="headerlink" title="4.1.使用说明"></a>4.1.使用说明</h4><ul>
<li>作用：<br>用于绑定 url 中的占位符。例如：请求 url 中 /delete/{id}，这个{id}就是 url 占位符。<br>url 支持占位符是 spring3.0 之后加入的。是 springmvc 支持 rest 风格 URL 的一个重要标志。</li>
<li>属性：<br>value：用于指定 url 中占位符名称。<br>required：是否必须提供占位符。<h4 id="4-2-使用示例"><a href="#4-2-使用示例" class="headerlink" title="4.2.使用示例"></a>4.2.使用示例</h4></li>
<li>jsp代码:<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- PathVariable 注解 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;springmvc/usePathVariable/100&quot;</span>&gt;</span>pathVariable 注解<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>控制器代码：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* PathVariable 注解</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/usePathVariable/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">usePathVariable</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">   System.out.println(id);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>运行结果：</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20190720181004887.png" alt="在这里插入图片描述"></p>
<h4 id="4-3-REST-风格-URL"><a href="#4-3-REST-风格-URL" class="headerlink" title="4.3.REST 风格 URL"></a>4.3.REST 风格 URL</h4><h5 id="4-3-1-什么是-rest"><a href="#4-3-1-什么是-rest" class="headerlink" title="4.3.1.什么是 rest"></a>4.3.1.什么是 rest</h5><p>REST（英文：Representational State Transfer，简称 REST）描述了一个架构样式的网络系统，<br>比如 web 应用程序。它首次出现在 2000 年 Roy Fielding 的博士论文中，他是 HTTP 规范的主要编写者之一。在目前主流的三种 Web 服务交互方案中，REST 相比于 SOAP（Simple Object Access protocol，简单对象访问协议）以及 XML-RPC 更加简单明了，无论是对 URL 的处理还是对 Payload 的编码，REST 都倾向于用更加简单轻量的方法设计和实现。值得注意的是 REST 并没有一个明确的标准，而更像是一种设计的风格。它本身并没有什么实用性，其核心价值在于如何设计出符合 REST 风格的网络接口。</p>
<h5 id="4-3-2-restful-的优点"><a href="#4-3-2-restful-的优点" class="headerlink" title="4.3.2.restful 的优点"></a>4.3.2.restful 的优点</h5><p>它结构清晰、符合标准、易于理解、扩展方便，所以正得到越来越多网站的采用。</p>
<h5 id="4-3-2-restful-的特性"><a href="#4-3-2-restful-的特性" class="headerlink" title="4.3.2.restful 的特性"></a>4.3.2.restful 的特性</h5><ul>
<li>资源（Resources）：网络上的一个实体，或者说是网络上的一个具体信息。<br>它可以是一段文本、一张图片、一首歌曲、一种服务，总之就是一个具体的存在。可以用一个 URI（统一资源定位符）指向它，每种资源对应一个特定的 URI 。要获取这个资源，访问它的 URI 就可以，因此 URI 即为每一个资源的独一无二的识别符。 </li>
<li>表现层（Representation）：把资源具体呈现出来的形式，叫做它的表现层 （Representation）。<br>比如，文本可以用 txt 格式表现，也可以用 HTML 格式、XML 格式、JSON 格式表现，甚至可以采用二进制格式。</li>
<li>状态转化（State Transfer）：每 发出一个请求，就代表了客户端和服务器的一次交互过程。<br>HTTP 协议，是一个无状态协议，即所有的状态都保存在服务器端。因此，如果客户端想要操作服务器，必须通过某种手段，让服务器端发生“状态转化”（State Transfer）。而这种转化是建立在表现层之上的，所以就是 “表现层状态转化”。具体说，就是 HTTP 协议里面，四个表示操作方式的动词：GET 、POST 、PUT、DELETE。它们分别对应四种基本操作：GET 用来获取资源，POST 用来新建资源，PUT 用来更新资源，DELETE 用来删除资源。<h5 id="4-3-3-restful-的示例："><a href="#4-3-3-restful-的示例：" class="headerlink" title="4.3.3.restful 的示例："></a>4.3.3.restful 的示例：</h5>/account/1 HTTP GET ：       得到 id = 1 的 account<br>/account/1 HTTP DELETE： 删除 id = 1 的 account<br>/account/1 HTTP PUT：        更新 id = 1 的 account<br>/account HTTP POST：         新增 account<h4 id="4-4-基于-HiddentHttpMethodFilter-的示例"><a href="#4-4-基于-HiddentHttpMethodFilter-的示例" class="headerlink" title="4.4. 基于 HiddentHttpMethodFilter 的示例"></a>4.4. 基于 HiddentHttpMethodFilter 的示例</h4></li>
<li>作用：<br>由于浏览器 form 表单只支持 GET 与 POST 请求，而 DELETE、PUT 等 method 并不支持，Spring3.0 添加了一个过滤器，可以将浏览器请求改为指定的请求方式，发送给我们的控制器方法，使得支持 GET、POST、PUT<br>与 DELETE 请求。</li>
<li>使用方法：<br>第一步：在 web.xml 中配置该过滤器。<br>第二步：请求方式必须使用 post 请求。<br>第三步：按照要求提供_method 请求参数，该参数的取值就是我们需要的请求方式。</li>
<li>源码分析：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> javax.servlet.Filter&#125; that converts posted method parameters into HTTP methods,</span></span><br><span class="line"><span class="comment"> * retrievable via &#123;<span class="doctag">@link</span> HttpServletRequest#getMethod()&#125;. Since browsers currently only</span></span><br><span class="line"><span class="comment"> * support GET and POST, a common technique - used by the Prototype library, for instance -</span></span><br><span class="line"><span class="comment"> * is to use a normal POST with an additional hidden form field (&#123;<span class="doctag">@code</span> _method&#125;)</span></span><br><span class="line"><span class="comment"> * to pass the &quot;real&quot; HTTP method along. This filter reads that parameter and changes</span></span><br><span class="line"><span class="comment"> * the &#123;<span class="doctag">@link</span> HttpServletRequestWrapper#getMethod()&#125; return value accordingly.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The name of the request parameter defaults to &#123;<span class="doctag">@code</span> _method&#125;, but can be</span></span><br><span class="line"><span class="comment"> * adapted via the &#123;<span class="doctag">@link</span> #setMethodParam(String) methodParam&#125; property.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;&lt;b&gt;<span class="doctag">NOTE:</span> This filter needs to run after multipart processing in case of a multipart</span></span><br><span class="line"><span class="comment"> * POST request, due to its inherent need for checking a POST body parameter.&lt;/b&gt;</span></span><br><span class="line"><span class="comment"> * So typically, put a Spring &#123;<span class="doctag">@link</span> org.springframework.web.multipart.support.MultipartFilter&#125;</span></span><br><span class="line"><span class="comment"> * &lt;i&gt;before&lt;/i&gt; this HiddenHttpMethodFilter in your &#123;<span class="doctag">@code</span> web.xml&#125; filter chain.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Arjen Poutsma</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Juergen Hoeller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 3.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HiddenHttpMethodFilter</span> <span class="keyword">extends</span> <span class="title">OncePerRequestFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/** Default method parameter: &#123;<span class="doctag">@code</span> _method&#125; */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_METHOD_PARAM = <span class="string">&quot;_method&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> String methodParam = DEFAULT_METHOD_PARAM;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Set the parameter name to look for HTTP methods.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@see</span> #DEFAULT_METHOD_PARAM</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMethodParam</span><span class="params">(String methodParam)</span> </span>&#123;</span><br><span class="line">		Assert.hasText(methodParam, <span class="string">&quot;&#x27;methodParam&#x27; must not be empty&quot;</span>);</span><br><span class="line">		<span class="keyword">this</span>.methodParam = methodParam;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">		HttpServletRequest requestToUse = request;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (<span class="string">&quot;POST&quot;</span>.equals(request.getMethod()) &amp;&amp; request.getAttribute(WebUtils.ERROR_EXCEPTION_ATTRIBUTE) == <span class="keyword">null</span>) &#123;</span><br><span class="line">			String paramValue = request.getParameter(<span class="keyword">this</span>.methodParam);</span><br><span class="line">			<span class="keyword">if</span> (StringUtils.hasLength(paramValue)) &#123;</span><br><span class="line">				requestToUse = <span class="keyword">new</span> HttpMethodRequestWrapper(request, paramValue);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		filterChain.doFilter(requestToUse, response);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Simple &#123;<span class="doctag">@link</span> HttpServletRequest&#125; wrapper that returns the supplied method for</span></span><br><span class="line"><span class="comment">	 * &#123;<span class="doctag">@link</span> HttpServletRequest#getMethod()&#125;.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpMethodRequestWrapper</span> <span class="keyword">extends</span> <span class="title">HttpServletRequestWrapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">private</span> <span class="keyword">final</span> String method;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="title">HttpMethodRequestWrapper</span><span class="params">(HttpServletRequest request, String method)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">super</span>(request);</span><br><span class="line">			<span class="keyword">this</span>.method = method.toUpperCase(Locale.ENGLISH);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> String <span class="title">getMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">this</span>.method;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>jsp中示例代码:<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 保存 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;springmvc/testRestPOST&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">	用户名称：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- &lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;POST&quot;&gt; --&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;保存&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 更新 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;springmvc/testRestPUT/1&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">	用户名称：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;PUT&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;更新&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 删除 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;springmvc/testRestDELETE/1&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;DELETE&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;删除&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 查询一个 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;springmvc/testRestGET/1&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;GET&quot;</span>&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;查询&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>控制器中示例代码<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* post 请求：保存</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping(value=&quot;/testRestPOST&quot;,method=RequestMethod.POST)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testRestfulURLPOST</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;rest post&quot;</span>+user);</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;success&quot;</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* put 请求：更新</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping(value=&quot;/testRestPUT/&#123;id&#125;&quot;,method=RequestMethod.PUT)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testRestfulURLPUT</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span>Integer id,User user)</span></span>&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;rest put &quot;</span>+id+<span class="string">&quot;,&quot;</span>+user);</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;success&quot;</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* post 请求：删除</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping(value=&quot;/testRestDELETE/&#123;id&#125;&quot;,method=RequestMethod.DELETE)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testRestfulURLDELETE</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span>Integer id)</span></span>&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;rest delete &quot;</span>+id);</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* post 请求：查询</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping(value=&quot;/testRestGET/&#123;id&#125;&quot;,method=RequestMethod.GET)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testRestfulURLGET</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span>Integer id)</span></span>&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;rest get &quot;</span>+id);</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;success&quot;</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>运行结果<br><img src="https://img-blog.csdnimg.cn/20190720182613743.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h3 id="5-RequestHeader注解"><a href="#5-RequestHeader注解" class="headerlink" title="5.RequestHeader注解"></a>5.RequestHeader注解</h3><h4 id="5-1-使用说明"><a href="#5-1-使用说明" class="headerlink" title="5.1.使用说明"></a>5.1.使用说明</h4></li>
<li>作用：<br>用于获取请求消息头。</li>
<li>属性：<br>value：提供消息头名称<br>required：是否必须有此消息头</li>
</ul>
<blockquote>
<p>注：在实际开发中一般不怎么用。</p>
</blockquote>
<h4 id="5-2-使用示例"><a href="#5-2-使用示例" class="headerlink" title="5.2.使用示例"></a>5.2.使用示例</h4><ul>
<li>jsp中代码<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- RequestHeader 注解 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;springmvc/useRequestHeader&quot;</span>&gt;</span>获取请求消息头<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>控制器中代码:<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* RequestHeader 注解</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/useRequestHeader&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">useRequestHeader</span><span class="params">(<span class="meta">@RequestHeader(value=&quot;Accept-Language&quot;,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="meta">required=false)</span>String requestHeader)</span></span>&#123;</span><br><span class="line">	System.out.println(requestHeader);</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;success&quot;</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>运行结果：<br><img src="https://img-blog.csdnimg.cn/20190720185048450.png" alt="在这里插入图片描述"><h3 id="6-CookieValue注解"><a href="#6-CookieValue注解" class="headerlink" title="6.CookieValue注解"></a>6.CookieValue注解</h3><h4 id="6-1-使用说明"><a href="#6-1-使用说明" class="headerlink" title="6.1.使用说明"></a>6.1.使用说明</h4></li>
<li>作用：<br>用于把指定 cookie 名称的值传入控制器方法参数。</li>
<li>属性：<br>value：指定 cookie 的名称。<br>required：是否必须有此 cookie。<h4 id="6-2-使用示例"><a href="#6-2-使用示例" class="headerlink" title="6.2.使用示例"></a>6.2.使用示例</h4></li>
<li>jsp中代码：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- CookieValue 注解 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;springmvc/useCookieValue&quot;</span>&gt;</span>绑定 cookie 的值<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>控制器中的代码：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Cookie 注解注解</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/useCookieValue&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">useCookieValue</span><span class="params">(<span class="meta">@CookieValue(value=&quot;JSESSIONID&quot;,required=false)</span> </span></span></span><br><span class="line"><span class="function"><span class="params">String cookieValue)</span></span>&#123;</span><br><span class="line">	System.out.println(cookieValue);</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;success&quot;</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>运行结果：</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/2019072018531510.png" alt="在这里插入图片描述"></p>
<h3 id="7-ModelAttribute注解"><a href="#7-ModelAttribute注解" class="headerlink" title="7.ModelAttribute注解"></a>7.ModelAttribute注解</h3><h4 id="7-1-使用说明"><a href="#7-1-使用说明" class="headerlink" title="7.1.使用说明"></a>7.1.使用说明</h4><ul>
<li>作用：<br>该注解是 SpringMVC4.3 版本以后新加入的。它可以用于修饰方法和参数。<br>出现在方法上，表示当前方法会在控制器的方法执行之前，先执行。它可以修饰没有返回值的方法，也可以修饰有具体返回值的方法。出现在参数上，获取指定的数据给参数赋值。</li>
<li>属性：<br>value：用于获取数据的 key。key 可以是 POJO 的属性名称，也可以是 map 结构的 key。</li>
<li>应用场景：<br>当表单提交数据不是完整的实体类数据时，保证没有提交数据的字段使用数据库对象原来的数据。</li>
<li>例如：<br>我们在编辑一个用户时，用户有一个创建信息字段，该字段的值是不允许被修改的。在提交表单数据是肯定没有此字段的内容，一旦更新会把该字段内容置为 null，此时就可以使用此注解解决问题。<h4 id="7-2-使用示例"><a href="#7-2-使用示例" class="headerlink" title="7.2.使用示例"></a>7.2.使用示例</h4><h5 id="7-2-1-基于-POJO-属性的基本使用"><a href="#7-2-1-基于-POJO-属性的基本使用" class="headerlink" title="7.2.1.基于 POJO 属性的基本使用"></a>7.2.1.基于 POJO 属性的基本使用</h5></li>
<li>jps 代码：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- ModelAttribute 注解的基本使用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;springmvc/testModelAttribute?username=test&quot;</span>&gt;</span>测试 modelattribute<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>控制器代码：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 被 ModelAttribute 修饰的方法</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@ModelAttribute</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showModel</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;执行了 showModel 方法&quot;</span>+user.getUsername());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 接收请求的方法</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/testModelAttribute&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testModelAttribute</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;执行了控制器的方法&quot;</span>+user.getUsername());</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;success&quot;</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>运行结果：</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20190720210850616.png" alt="在这里插入图片描述"></p>
<h5 id="7-2-2-基于-Map-的应用场景-示例1"><a href="#7-2-2-基于-Map-的应用场景-示例1" class="headerlink" title="7.2.2.基于 Map 的应用场景 示例1"></a>7.2.2.基于 Map 的应用场景 示例1</h5><p>示例 1：ModelAttribute 修饰方法带返回值</p>
<ul>
<li>需求：修改用户信息，要求用户的密码不能修改</li>
<li>jsp代码:<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 修改用户信息 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;springmvc/updateUser&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">	用户名称：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> &gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">	用户年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> &gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;保存&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>控制的代码：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 查询数据库中用户信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@ModelAttribute</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">showModel</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//模拟去数据库查询</span></span><br><span class="line">	User abc = findUserByName(username);</span><br><span class="line">	System.out.println(<span class="string">&quot;执行了 showModel 方法&quot;</span>+abc);</span><br><span class="line">	<span class="keyword">return</span> abc; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 模拟修改用户方法</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/updateUser&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testModelAttribute</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;控制器中处理请求的方法：修改用户：&quot;</span>+user);</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;success&quot;</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 模拟去数据库查询</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> User <span class="title">findUserByName</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">	User user = <span class="keyword">new</span> User();</span><br><span class="line">	user.setUsername(username);</span><br><span class="line">	user.setAge(<span class="number">19</span>);</span><br><span class="line">	user.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> user; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>运行结果：</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20190720211330571.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h5 id="7-2-3-基于-Map-的应用场景-示例2"><a href="#7-2-3-基于-Map-的应用场景-示例2" class="headerlink" title="7.2.3.基于 Map 的应用场景 示例2"></a>7.2.3.基于 Map 的应用场景 示例2</h5><p>示例 1：ModelAttribute 修饰方法不带返回值</p>
<ul>
<li>需求：修改用户信息，要求用户的密码不能修改</li>
<li>jsp 中的代码：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 修改用户信息 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;springmvc/updateUser&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">	用户名称：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> &gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">	用户年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> &gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;保存&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>控制器中的代码：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 查询数据库中用户信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@ModelAttribute</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showModel</span><span class="params">(String username,Map&lt;String,User&gt; map)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//模拟去数据库查询</span></span><br><span class="line">	User user = findUserByName(username);</span><br><span class="line">	System.out.println(<span class="string">&quot;执行了 showModel 方法&quot;</span>+user);</span><br><span class="line">	map.put(<span class="string">&quot;abc&quot;</span>,user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 模拟修改用户方法</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/updateUser&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testModelAttribute</span><span class="params">(<span class="meta">@ModelAttribute(&quot;abc&quot;)</span>User user)</span> </span>&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;控制器中处理请求的方法：修改用户：&quot;</span>+user);</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;success&quot;</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 模拟去数据库查询</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> User <span class="title">findUserByName</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">	User user = <span class="keyword">new</span> User();</span><br><span class="line">	user.setUsername(username);</span><br><span class="line">	user.setAge(<span class="number">19</span>);</span><br><span class="line">	user.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> user; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>运行结果:</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20190720211806458.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="8-SessionAttribute注解"><a href="#8-SessionAttribute注解" class="headerlink" title="8.SessionAttribute注解"></a>8.SessionAttribute注解</h3><h4 id="8-1-使用说明"><a href="#8-1-使用说明" class="headerlink" title="8.1.使用说明"></a>8.1.使用说明</h4><ul>
<li>作用：<br>用于多次执行控制器方法间的参数共享。</li>
<li>属性：<br>value：用于指定存入的属性名称<br>type：用于指定存入的数据类型。<h4 id="8-2-使用示例"><a href="#8-2-使用示例" class="headerlink" title="8.2.使用示例"></a>8.2.使用示例</h4></li>
<li>jsp中的代码:<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- SessionAttribute 注解的使用 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;springmvc/testPut&quot;</span>&gt;</span>存入 SessionAttribute<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;springmvc/testGet&quot;</span>&gt;</span>取出 SessionAttribute<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;springmvc/testClean&quot;</span>&gt;</span>清除 SessionAttribute<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>控制器中的代码：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* SessionAttribute 注解的使用</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Controller(&quot;sessionAttributeController&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/springmvc&quot;)</span></span><br><span class="line"><span class="meta">@SessionAttributes(value =&#123;&quot;username&quot;,&quot;password&quot;&#125;,types=&#123;Integer.class&#125;)</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionAttributeController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	* 把数据存入 SessionAttribute</span></span><br><span class="line"><span class="comment">	* <span class="doctag">@param</span> model</span></span><br><span class="line"><span class="comment">	* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	* Model 是 spring 提供的一个接口，该接口有一个实现类 ExtendedModelMap</span></span><br><span class="line"><span class="comment">	* 该类继承了 ModelMap，而 ModelMap 就是 LinkedHashMap 子类</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="meta">@RequestMapping(&quot;/testPut&quot;)</span> </span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">testPut</span><span class="params">(Model model)</span></span>&#123; </span><br><span class="line">		model.addAttribute(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;泰斯特&quot;</span>); </span><br><span class="line">		model.addAttribute(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;123456&quot;</span>); </span><br><span class="line">		model.addAttribute(<span class="string">&quot;age&quot;</span>, <span class="number">31</span>); </span><br><span class="line">		<span class="comment">//跳转之前将数据保存到 username、password 和 age 中，因为注解@SessionAttribute 中有这几个参数</span></span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;success&quot;</span>; </span><br><span class="line">	&#125; </span><br><span class="line"></span><br><span class="line">	<span class="meta">@RequestMapping(&quot;/testGet&quot;)</span> </span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">testGet</span><span class="params">(ModelMap model)</span></span>&#123;System.out.println(model.get(<span class="string">&quot;username&quot;</span>)+<span class="string">&quot;;&quot;</span>+model.get(<span class="string">&quot;password&quot;</span>)+<span class="string">&quot;;&quot;</span>+model.get(<span class="string">&quot;a</span></span><br><span class="line"><span class="string">	ge&quot;</span>)); </span><br><span class="line">	    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>; </span><br><span class="line">	&#125; </span><br><span class="line"></span><br><span class="line">	<span class="meta">@RequestMapping(&quot;/testClean&quot;)</span> </span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">complete</span><span class="params">(SessionStatus sessionStatus)</span></span>&#123; </span><br><span class="line">		sessionStatus.setComplete(); </span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;success&quot;</span>; </span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>运行结果：</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20190720212248298.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>SpringMVC框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring事务管理</title>
    <url>/2021/03/20/Spring%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h1 id="1-事务-Transaction-介绍"><a href="#1-事务-Transaction-介绍" class="headerlink" title="1.事务(Transaction)介绍"></a>1.事务(Transaction)介绍</h1><p>事务（Transaction），一般是指要做的或所做的事情。**在计算机术语中是指访问并可能更新数据库中各种数据项的一个程序执行单元(unit)**。</p>
<span id="more"></span>

<blockquote>
<p>大象装进冰箱：</p>
<p>1.开门</p>
<p>2.装大象</p>
<p>3.关门</p>
</blockquote>
<p>这里我们以取钱的例子来讲解：比如你去ATM机取1000块钱，大体有两个步骤：第一步输入密码金额，银行卡扣掉1000元钱；第二步从ATM出1000元钱。这两个步骤必须是要么都执行要么都不执行。如果银行卡扣除了1000块但是ATM出钱失败的话，你将会损失1000元；如果银行卡扣钱失败但是ATM却出了1000块，那么银行将损失1000元。</p>
<p>如何保证这两个步骤不会出现一个出现异常了，而另一个执行成功呢？事务就是用来解决这样的问题。事务是一系列的动作，它们综合在一起才是一个完整的工作单元，这些动作必须全部完成，如果有一个失败的话，那么事务就会回滚到最开始的状态，仿佛什么都没发生过一样。 在企业级应用程序开发中，事务管理是必不可少的技术，用来确保数据的完整性和一致性。</p>
<blockquote>
<p>红包</p>
</blockquote>
<h1 id="2-事务的四个特性（ACID）"><a href="#2-事务的四个特性（ACID）" class="headerlink" title="2.事务的四个特性（ACID）"></a>2.事务的四个特性（ACID）</h1><p>①、原子性（Atomicity）：事务是一个原子操作，由一系列动作组成。事务的原子性确保动作要么全部完成，要么完全不起作用。</p>
<p>②、一致性（Consistency）：一旦事务完成（不管成功还是失败），系统必须确保它所建模的业务处于一致的状态，而不会是部分完成部分失败。在现实中的数据不应该被破坏。</p>
<p>③、隔离性（Isolation）：可能有许多事务会同时处理相同的数据，因此每个事务都应该与其他事务隔离开来，防止数据损坏。</p>
<p><img src="Spring%E6%A1%86%E6%9E%B6%E4%B8%93%E9%A2%98(%E5%85%AB)-Spring%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86.assets/src=http___s9.rr.itc.cn_r_wapChange_20176_3_21_a9r1vm1707938946563.jpg&refer=http___s9.rr.itc.jpg" alt="img"></p>
<p>④、持久性（Durability）：一旦事务完成，无论发生什么系统错误，它的结果都不应该受到影响，这样就能从任何系统崩溃中恢复过来。通常情况下，事务的结果被写到持久化存储器中。</p>
<h1 id="3-Spring-事务管理的核心接口"><a href="#3-Spring-事务管理的核心接口" class="headerlink" title="3.Spring 事务管理的核心接口"></a>3.Spring 事务管理的核心接口</h1><p>首先我们创建一个Java工程，然后导入 Spring 核心事务包<br><img src="https://img-blog.csdnimg.cn/20190922232456932.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">我们打开Spring的核心事务包，查看如下类：org.springframework.transaction,以下三个类是Spring中事务的顶级接口！<br><img src="https://img-blog.csdnimg.cn/20190922232617910.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>上面所示的三个类文件便是Spring的事务管理接口。如下图所示：下面我们分别对这三个接口进行简单的介绍<br><img src="https://img-blog.csdnimg.cn/20190922232732510.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="3-基本事务属性的定义"><a href="#3-基本事务属性的定义" class="headerlink" title="3.基本事务属性的定义"></a>3.基本事务属性的定义</h2><p>上面讲到的事务管理器接口<code>PlatformTransactionManager</code>通过<code>getTransaction(TransactionDefinition definition)</code>方法来得到事务，这个方法里面的参数是TransactionDefinition类，这个类就定义了一些基本的事务属性。 </p>
<p>那么什么是事务属性呢？事务属性可以理解成事务的一些基本配置，描述了事务策略如何应用到方法上。事务属性包含了5个方面，如图所示：<br><img src="https://img-blog.csdnimg.cn/20190922233924429.png" alt="在这里插入图片描述"><br>TransactionDefinition 接口方法如下：<br><img src="https://img-blog.csdnimg.cn/20190922233946403.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="3-3-1-传播行为（面试题）"><a href="#3-3-1-传播行为（面试题）" class="headerlink" title="3.3.1.传播行为（面试题）"></a>3.3.1.传播行为（面试题）</h3><p>传播行为：<strong>当事务方法被另一个事务方法调用时，必须指定事务应该如何传播。</strong></p>
<p>Spring 定义了如下七中传播行为，这里以A业务和B业务之间如何传播事务为例说明：<br>B包容A<br>①、<strong>PROPAGATION_REQUIRED</strong> ：required , 必须。默认值，A如果有事务，B将使用该事务；如果A没有事务，B将创建一个新的事务。<br>②、PROPAGATION_SUPPORTS：supports ，支持。A如果有事务，B将使用该事务；如果A没有事务，B将以非事务执行。<br>③、PROPAGATION_MANDATORY：mandatory ，强制。A如果有事务，B将使用该事务；如果A没有事务，B将抛异常。<br>④、<strong>PROPAGATION_REQUIRES_NEW</strong> ：requires_new，必须新的。如果A有事务，将A的事务挂起，B创建一个新的事务；如果A没有事务，B创建一个新的事务。<br>⑤、PROPAGATION_NOT_SUPPORTED ：not_supported ,不支持。如果A有事务，将A的事务挂起，B将以非事务执行；如果A没有事务，B将以非事务执行。<br>⑥、PROPAGATION_NEVER ：never，从不。如果A有事务，B将抛异常；如果A没有事务，B将以非事务执行。<br>⑦、PROPAGATION_NESTED ：nested ，嵌套。如果A当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与PROPAGATION_REQUIRED类似的操作。</p>
<h3 id="3-3-2-隔离级别"><a href="#3-3-2-隔离级别" class="headerlink" title="3.3.2.隔离级别"></a>3.3.2.隔离级别</h3><p>   隔离级别：<strong>定义了一个事务可能受其他并发事务影响的程度。</strong></p>
<p><strong>并发事务引起的问题：</strong><br>在典型的应用程序中，多个事务并发运行，经常会操作相同的数据来完成各自的任务。并发虽然是必须的，但可能会导致以下的问题。<br>①、<strong>脏读（Dirty reads）</strong>——脏读发生在一个事务读取了另一个事务改写但尚未提交的数据时。如果改写在稍后被回滚了，那么第一个事务获取的数据就是无效的。<br>②、<strong>不可重复读（Nonrepeatable read）</strong>——不可重复读发生在一个事务执行相同的查询两次或两次以上，但是每次都得到不同的数据时。这通常是因为另一个并发事务在两次查询期间进行了更新。<br>③、<strong>幻读（Phantom read）</strong>——幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录。<br>注意：不可重复读重点是修改，而幻读重点是新增或删除。</p>
<p><strong>在 Spring 事务管理中，为我们定义了如下的隔离级别：</strong><br>①、<strong>ISOLATION_DEFAULT</strong>：使用后端数据库默认的隔离级别(不同的数据隔离级别不同)<br>②、<strong>ISOLATION_READ_UNCOMMITTED</strong>：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读<br>③、<strong>ISOLATION_READ_COMMITTED</strong>（Oracle）：允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生<br>④、<strong>ISOLATION_REPEATABLE_READ</strong>（mysql）：对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生<br>⑤、<strong>ISOLATION_SERIALIZABLE</strong>：最高的隔离级别，完全服从ACID的隔离级别，确保阻止脏读、不可重复读以及幻读，也是最慢的事务隔离级别，因为它通常是通过完全锁定事务相关的数据库表来实现的。</p>
<p>上面定义的隔离级别，在 Spring 的 TransactionDefinition.class 中也分别用常量 -1,0,1,2,4,8表示。比如 ISOLATION_DEFAULT 的定义：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Use the default isolation level of the underlying datastore.</span></span><br><span class="line"><span class="comment"> * All other levels correspond to the JDBC isolation levels.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> java.sql.Connection</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">int</span> ISOLATION_DEFAULT = -<span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<h3 id="3-3-3-只读"><a href="#3-3-3-只读" class="headerlink" title="3.3.3.只读"></a>3.3.3.只读</h3><p>这是事务的第三个特性，是否为只读事务。如果事务只对后端的数据库进行该操作，数据库可以利用事务的只读特性来进行一些特定的优化。通过将事务设置为只读，你就可以给数据库一个机会，让它应用它认为合适的优化措施。<br><strong>Spring会管理事务，但是查询一般都设置成只读事务，性能会高！</strong></p>
<h3 id="3-3-4-事务超时"><a href="#3-3-4-事务超时" class="headerlink" title="3.3.4.事务超时"></a>3.3.4.事务超时</h3><p>为了使应用程序很好地运行，事务不能运行太长的时间。因为事务可能涉及对后端数据库的锁定，所以长时间的事务会不必要的占用数据库资源。事务超时就是事务的一个定时器，在特定时间内事务如果没有执行完毕，那么就会自动回滚，而不是一直等待其结束。</p>
<h3 id="3-3-5-回滚规则"><a href="#3-3-5-回滚规则" class="headerlink" title="3.3.5.回滚规则"></a>3.3.5.回滚规则</h3><p>事务五边形的最后一个方面是一组规则，这些规则定义了哪些异常会导致事务回滚而哪些不会。默认情况下，事务只有遇到运行期异常时才会回滚，而在遇到检查型异常时不会回滚（这一行为与EJB的回滚行为是一致的） 。但是你可以声明事务在遇到特定的检查型异常时像遇到运行期异常那样回滚。同样，你还可以声明事务遇到特定的异常不回滚，即使这些异常是运行期异常。<br>可以指定何种类型的异常西是否需要回滚撤销！！</p>
<h1 id="4-转账案例（不用事务实现转账）"><a href="#4-转账案例（不用事务实现转账）" class="headerlink" title="4. 转账案例（不用事务实现转账）"></a>4. 转账案例（不用事务实现转账）</h1><p>我们还是以转账为实例。不用事务看如何实现转账。在数据库中有如下表 account ,内容如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `ar_account` (</span><br><span class="line">  `id` <span class="type">INT</span>(<span class="number">10</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `username` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `money` <span class="type">DECIMAL</span>(<span class="number">10</span>,<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB AUTO_INCREMENT<span class="operator">=</span><span class="number">3</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Data for the table `ar_account` */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span>  <span class="keyword">INTO</span> `ar_account`(`id`,`username`,`money`) <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">&#x27;cat&#x27;</span>,<span class="string">&#x27;1000.00&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span>  <span class="keyword">INTO</span> `ar_account`(`id`,`username`,`money`) <span class="keyword">VALUES</span> (<span class="number">2</span>,<span class="string">&#x27;Tom&#x27;</span>,<span class="string">&#x27;1000.00&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p><strong>创建Mapper接口：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> bruceliu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019-09-22 23:49</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加钱方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">increaseMoney</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Integer id, <span class="meta">@Param(&quot;money&quot;)</span> Double money)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 减钱方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">decreaseMoney</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Integer id, <span class="meta">@Param(&quot;money&quot;)</span> Double money)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>创建XML文件：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.ssm.mapper.AccountMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;increaseMoney&quot;</span>&gt;</span></span><br><span class="line">        update ar_account set money=money+#&#123;money&#125; where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;decreaseMoney&quot;</span>&gt;</span></span><br><span class="line">        update ar_account set money=money-#&#123;money&#125; where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>创建Service接口：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> bruceliu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019-09-22 23:53</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 转账业务</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">transfer</span><span class="params">(Integer from, Integer to, Double money)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>创建Service接口实现层：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> bruceliu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019-09-22 23:54</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AccountMapper accountMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(Integer from, Integer to, Double money)</span> </span>&#123;</span><br><span class="line">        accountMapper.decreaseMoney(from, money);</span><br><span class="line">        accountMapper.increaseMoney(to, money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>测试类：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> bruceliu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019-09-17 11:58</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 启动Spring框架测试</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:applicationContext.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSpring</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        accountService.transfer(<span class="number">1</span>, <span class="number">2</span>, <span class="number">100.0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>查看数据库表 account</strong><br><img src="https://img-blog.csdnimg.cn/20190922235909608.png" alt="在这里插入图片描述"><br>上面的结果和我们想的一样，Tom 账户 money 减少了1000块。而 Marry 账户金额增加了1000块。</p>
<p>这时候问题来了，比如在 Tom 账户 money 减少了1000块正常。而 Marry 账户金额增加时发生了异常，实际应用中比如断电（这里我们人为构造除数不能为0的异常），如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(Integer from, Integer to, Double money)</span> </span>&#123;</span><br><span class="line">       accountMapper.decreaseMoney(from, money);</span><br><span class="line">       System.out.println(<span class="number">100</span>/<span class="number">0</span>);</span><br><span class="line">       accountMapper.increaseMoney(to, money);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>那么这时候我们执行测试程序，很显然会报错，那么数据库是什么情况呢？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java.lang.ArithmeticException: &#x2F; by zero</span><br><span class="line"></span><br><span class="line">	at com.ssm.service.impl.AccountServiceImpl.transfer(AccountServiceImpl.java:22)</span><br><span class="line">	at com.ssm.test.TestSpring.test1(TestSpring.java:25)</span><br><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class="line">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">	at java.lang.reflect.Method.invoke(Method.java:497)</span><br><span class="line">	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)</span><br><span class="line">	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)</span><br><span class="line">	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)</span><br><span class="line">	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)</span><br><span class="line">	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:75)</span><br><span class="line">	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)</span><br><span class="line">	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)</span><br><span class="line">	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)</span><br><span class="line">	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:252)</span><br><span class="line">	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:94)</span><br><span class="line">	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)</span><br><span class="line">	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)</span><br><span class="line">	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)</span><br><span class="line">	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)</span><br><span class="line">	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)</span><br></pre></td></tr></table></figure>
<p><strong>数据库account ：</strong><br><img src="https://img-blog.csdnimg.cn/20190923000123576.png" alt="在这里插入图片描述"><br>我们发现，程序执行报错了，但是数据库 Tom 账户金额依然减少了 1000 块，但是 Marry 账户的金额却没有增加。这在实际应用中肯定是不允许的，那么如何解决呢？</p>
<h1 id="5-声明式事务处理实现转账（基于AOP的-xml-配置）"><a href="#5-声明式事务处理实现转账（基于AOP的-xml-配置）" class="headerlink" title="5. 声明式事务处理实现转账（基于AOP的 xml 配置）"></a>5. 声明式事务处理实现转账（基于AOP的 xml 配置）</h1><h2 id="5-1-TransactionManager"><a href="#5-1-TransactionManager" class="headerlink" title="5.1.TransactionManager"></a>5.1.TransactionManager</h2><p>在不同平台，操作事务的代码各不相同，因此spring提供了一个 TransactionManager 接口：<br><strong>DateSourceTransactionManager</strong> 用于 JDBC 的事务管理</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;ds&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>HibernateTransactionManager</strong> 用于 Hibernate 的事务管理<br><strong>JpaTransactionManager</strong> 用于 Jpa 的事务管理<br><img src="https://img-blog.csdnimg.cn/20190201124220135.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="5-2-添加tx命名空间"><a href="#5-2-添加tx命名空间" class="headerlink" title="5.2.添加tx命名空间"></a>5.2.添加tx命名空间</h2><p>事务基础组件，对 DAO 的支持<br>修改 applicationContext.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span> <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span> <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans-4.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context-4.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop/spring-aop-4.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx/spring-tx-4.2.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="5-3-添加事务相关配置"><a href="#5-3-添加事务相关配置" class="headerlink" title="5.3.添加事务相关配置"></a>5.3.添加事务相关配置</h2><p>修改applicationContext.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置事务:</span></span><br><span class="line"><span class="comment">       Spring事务配置有2种方案：</span></span><br><span class="line"><span class="comment">          1.使用XML来配置声明式事务！</span></span><br><span class="line"><span class="comment">          2.使用注解来配置声明式事务！(推荐)</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--事务平台管理器 Spring框架管理事务，有一个核心的接口：PlatformTransactionManager 这个接口有很多实现类，其中有一个专门是JDBC事务管理的类：DataSourceTransactionManager--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--如果是MyBatis框架，那么事务管理器：DataSourceTransactionManager--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;ds&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--将事务织入到目标方法之上--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;advice&quot;</span>  <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--指定事务管理器--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--转账方法需要事务  propagation=&quot;REQUIRED&quot; 默认值! 必须在事务中进行，有事务那么就是使用，没有就创建</span></span><br><span class="line"><span class="comment">                isolation=&quot;DEFAULT&quot; 数据库的四大隔离级别，如果不配置就是默认</span></span><br><span class="line"><span class="comment">                Mysql默认隔离级别：REPEATABLE_READ</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                timeout=&quot;-1&quot; 事务超时机制，没有超时  timeout=&quot;3&quot; 目标方法3秒之后超时，自动回滚！</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                no-rollback-for=&quot;java.lang.ArithmeticException&quot; 配置具体的某一个异常 不回滚  默认是所有的异常都回滚！</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;transferMoney&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span> <span class="attr">isolation</span>=<span class="string">&quot;DEFAULT&quot;</span> <span class="attr">timeout</span>=<span class="string">&quot;30&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;add*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span> <span class="attr">isolation</span>=<span class="string">&quot;REPEATABLE_READ&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;insert*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span> <span class="attr">isolation</span>=<span class="string">&quot;REPEATABLE_READ&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;update*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span> <span class="attr">isolation</span>=<span class="string">&quot;REPEATABLE_READ&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;del*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span> <span class="attr">isolation</span>=<span class="string">&quot;REPEATABLE_READ&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--查询的话，不需要在事务中进行 查询配置只读事务read-only=&quot;true&quot;--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;find*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;NOT_SUPPORTED&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span> <span class="attr">isolation</span>=<span class="string">&quot;REPEATABLE_READ&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;search*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;NOT_SUPPORTED&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span> <span class="attr">isolation</span>=<span class="string">&quot;REPEATABLE_READ&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--propagation=&quot;SUPPORTS&quot; 可有可无--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;SUPPORTS&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span> <span class="attr">isolation</span>=<span class="string">&quot;REPEATABLE_READ&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置切面--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.ssm.service.impl.*.*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;advice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>配置介绍:</strong></p>
<blockquote>
<p>tx:advice 是用于配置事务相关信息, transaction-manager属性是引入对应类型的事务管理;<br>​jdbc/mybatias : DataSourceTransactionManager</p>
<p>hibernate: HibernateTransactionManager</p>
<p>JPA:JPATransactionManager</p>
<hr>
<p>​    tx:attributes 此标签所配置的是 哪些方法可以作为事务方法(为后面切点进行补充)</p>
<hr>
<p>​        tx:method 标签设置具体要添加事务的方法和其他属性</p>
<p>​          name 是必须的,表示与事务属性关联的方法名(业务方法名),对切入点进行细化。通配符*可以用来指定一批关联到相同的事务属性的方法。如：’get*‘、’handle*‘、’on*Event’等等.</p>
<p>​             propagation  不是必须的 ，默认值是REQUIRED  表示事务传播行为, 包括REQUIRED,SUPPORTS,MANDATORY,REQUIRES_NEW,NOT_SUPPORTED,NEVER,NESTED<br><img src="https://img-blog.csdnimg.cn/20190923235522783.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>​        </p>
<p>isolation    不是必须的 默认值DEFAULT<br><img src="https://img-blog.csdnimg.cn/20190923235549453.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>​            timeout      不是必须的 默认值-1(永不超时)                            表示事务超时的时间（以秒为单位） </p>
<p>​        read-only    不是必须的 默认值false不是只读的                             表示事务是否只读？ </p>
<p>​        rollback-for 不是必须的                               表示将被触发进行回滚的 Exception(s)；以逗号分开。                            如：’com.itqf.MyBusinessException,ServletException’ </p>
<p>​        no-rollback-for 不是必须的                                表示不被触发进行回滚的 Exception(s)；以逗号分开。                              如：’com.foo.MyBusinessException,ServletException’ </p>
<p>aop:config标签 设置事务的切点,配置参与事务的类和对应的方法.</p>
</blockquote>
<pre><code>注意:
aop:config和tx:advice 但是两者并不冲突, aop:config面向切面编程的切点,选择对应的方法进行切入,而tx:adivce是设置事务的相关的属性和描述,换句话说,aop:config选择了对应的切入点,tx:advice是在这些切入点上根据 method name属性再次进行筛选!!!　
</code></pre>
<h1 id="6-配置声明事务（基于AOP的-注解-配置）"><a href="#6-配置声明事务（基于AOP的-注解-配置）" class="headerlink" title="6.配置声明事务（基于AOP的 注解 配置）"></a>6.配置声明事务（基于AOP的 注解 配置）</h1><p>除了基于XML的事务配置,Spring还提供了基于注解的事务配置,即通过@Transactional对需要事务增强的Bean接口,实现类或者方法进行标注,在容器中配置基于注解的事务增强驱动,即可启用注解的方式声明事务!</p>
<h2 id="6-1-使用-Transactional注解"><a href="#6-1-使用-Transactional注解" class="headerlink" title="6.1.使用@Transactional注解"></a>6.1.使用@Transactional注解</h2><p>顺着原来的思路,使用<code>@Transactional</code>对基于aop/tx命名空间的事务配置进行改造!<br><strong>修改service类添加@Transactional注解</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对业务类进行事务增强的标注</span></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 转账方法</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> fromName</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> toName</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> money</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Transactional(propagation= Propagation.REQUIRED,isolation = Isolation.DEFAULT,readOnly = false,timeout = -1,rollbackFor = Exception.class)</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">transferMoney</span><span class="params">(String fromName, String toName, Double money)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> count1 = accountMapper.OutMoney(fromName, money);</span><br><span class="line">       <span class="keyword">int</span> i=<span class="number">100</span>/<span class="number">0</span>;</span><br><span class="line">       <span class="keyword">int</span> count2 = accountMapper.InMoney(toName, money);</span><br><span class="line">       <span class="keyword">return</span> count1+count2;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>  因为注解本身具有一组默认的事务属性,所以往往只要在需要事务的业务类中添加一个@Transactional注解,就完成了业务类事务属性的配置!<br>当然,注解只能提供元数据,它本身并不能完成事务切面织入的功能.因此,还需要在Spring的配置中通过一行配置’通知’Spring容器对标注@Transactional注解的Bean进行加工处理!<br><strong>配置:</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 平台事务管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--对标注@Transactional注解的Bean进行加工处理,以织入事物管理切面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>在默认情况, <code>&lt;tx:annotation-driven  /&gt;</code> 中transaction-manager属性会自动使用名为 “transactionManager” 的事务管理器.所以,如果用户将事务管理器的id定义为 transactionManager , 则可以进一步将①处的配置简化为 <strong>&lt;tx:annotation-driven /&gt;.</strong></p>
<p>使用以上测试用例即可使用以上测试用例即可</p>
<h2 id="6-2-Transactional其他方面介绍"><a href="#6-2-Transactional其他方面介绍" class="headerlink" title="6.2.@Transactional其他方面介绍"></a>6.2.@Transactional其他方面介绍</h2><ul>
<li>关于@Transactional的属性<br>基于@Transactional注解的配置和基于xml的配置一样,它拥有一组普适性很强的默认事务属性,往往可以直接使用默认的属性.</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 事务传播行为: PROPAGATION_REQUIRED.</span><br><span class="line">- 事务隔离级别: ISOLATION_DEFAULT.</span><br><span class="line">- 读写事务属性:读&#x2F;写事务.</span><br><span class="line">- 超时时间:依赖于底层的事务系统默认值</span><br><span class="line">- 回滚设置:任何运行期异常引发回滚,任何检查型异常不会引发回滚.</span><br></pre></td></tr></table></figure>

<p>  默认值可能适应大部分情况,但是我们依然可以可以自己设定属性,具体属性表如下:<br>  <img src="https://img-blog.csdnimg.cn/20190201124943969.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<ul>
<li><strong>在方法使用注解</strong><br>方法出添加注解会覆盖类定义处的注解,如果有写方法需要使用特殊的事务属性,则可以在类注解的基础上提供方法注解,如下:<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional(propagation= Propagation.NOT_SUPPORTED,readOnly = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AccountMapper accountMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional(propagation= Propagation.REQUIRED,isolation = Isolation.DEFAULT,readOnly = false,timeout = -1,rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountMapper.addAccount(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转账方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fromName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> toName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional(propagation= Propagation.REQUIRED,isolation = Isolation.DEFAULT,readOnly = false,timeout = -1,rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">transferMoney</span><span class="params">(String fromName, String toName, Double money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count1 = accountMapper.OutMoney(fromName, money);</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">100</span>/<span class="number">0</span>;</span><br><span class="line">        <span class="comment">/*try &#123;</span></span><br><span class="line"><span class="comment">            Thread.sleep(6000);</span></span><br><span class="line"><span class="comment">        &#125; catch (InterruptedException e) &#123;</span></span><br><span class="line"><span class="comment">            e.printStackTrace();</span></span><br><span class="line"><span class="comment">        &#125; finally &#123;</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        <span class="keyword">int</span> count2 = accountMapper.InMoney(toName, money);</span><br><span class="line">        <span class="keyword">return</span> count1+count2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>  ​</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>Spring框架</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringIOC实操</title>
    <url>/2021/03/20/Spring%E6%A1%86%E6%9E%B6%E4%B9%8BIOC%E5%AE%9E%E6%93%8D/</url>
    <content><![CDATA[<p>[TOC]</p>
<h1 id="1-引言"><a href="#1-引言" class="headerlink" title="1.引言"></a>1.引言</h1><p>前面花大量内容，重点学习了 Spring入门 的一些思想，以及简单的学习了 IOC基础 以及基于XML的配置方式和注解方式。下面就来完成一个对单表进行 CURD 的案例，加深IOC的理解。</p>
<span id="more"></span>

<h1 id="2-准备代码与环境"><a href="#2-准备代码与环境" class="headerlink" title="2.准备代码与环境"></a>2.准备代码与环境</h1><h2 id="2-1-添加必要的依赖"><a href="#2-1-添加必要的依赖" class="headerlink" title="2.1.添加必要的依赖"></a>2.1.添加必要的依赖</h2><ul>
<li>spring-context</li>
<li>mysql-connector-java</li>
<li>c3p0（数据库连接池）</li>
<li>commons-dbutils（简化JDBC的工具）</li>
<li>junit （单元自测）</li>
</ul>
<blockquote>
<p>说明：由于我这里创建的是一个Maven项目，所以在这里修改 pom.xml 添加一些必要的依赖坐标就可以。如果创建时没有使用依赖的朋友，去下载我们所需要的 jar 包导入就可以了</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>简单看一下，spring核心的一些依赖，以及数据库相关的依赖等就都导入进来了。<br><img src="https://img-blog.csdnimg.cn/2020122915090717.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="2-2-创建账户表以及实体"><a href="#2-2-创建账户表以及实体" class="headerlink" title="2.2.创建账户表以及实体"></a>2.2.创建账户表以及实体</h2><p><strong>A：创建 Account 表</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for account</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `account`  (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">32</span>),</span><br><span class="line">  `balance` <span class="type">float</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p><strong>B.创建 Account 类</strong><br>没什么好说的，对应着我们的表创出实体</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span>  Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Float balance;</span><br><span class="line">    ......补充 get set toString 方法</span><br></pre></td></tr></table></figure>
<h2 id="2-3-创建Service以及Dao"><a href="#2-3-创建Service以及Dao" class="headerlink" title="2.3.创建Service以及Dao"></a>2.3.创建Service以及Dao</h2><p><strong>A：AccountService 接口</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(Integer accpuntId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Account <span class="title">findById</span><span class="params">(Integer accountId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>B：AccountServiceImpl 实现类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccountDao</span><span class="params">(AccountDao accountDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accountDao = accountDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        accountDao.addAccount(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Integer accpuntId)</span> </span>&#123;</span><br><span class="line">        accountDao.deleteAccount(accpuntId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        accountDao.updateAccount(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountDao.findAllAccount();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findById</span><span class="params">(Integer accountId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountDao.findAccountById(accountId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>C：AccountDao 接口</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteAccount</span><span class="params">(Integer accountId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">findAllAccount</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Account <span class="title">findAccountById</span><span class="params">(Integer accountId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>D：AccountDaoImpl 实现类</strong><br>由于今天要完成的是一个增删改查的操作，所以我们引入了 DBUtils 这样一个操作数据库的工具，它的作用就是封装代码，达到简化 JDBC 操作的目的，由于以后整合 SSM 框架的时候，持久层的事情就可以交给 MyBatis 来做，而今天我们重点还是讲解 Spring 中的知识，所以这部分会用就可以了，重点看 XML 与 注解 两种配置方式</p>
<p><strong>用到的内容基本讲解：</strong></p>
<ul>
<li><code>QueryRunner</code> 提供对 sql 语句进行操作的 API （insert delete update）</li>
<li><code>ResultSetHander</code> 接口，定义了查询后，如何封装结果集（仅提供了我们用到的）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BeanHander：将结果集中第第一条记录封装到指定的 JavaBean 中</span><br><span class="line">BeanListHandler：将结果集中的所有记录封装到指定的 JavaBean 中，并且将每一个 JavaBean封装到 List 中去</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> QueryRunner runner;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRunner</span><span class="params">(QueryRunner runner)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.runner = runner;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            runner.update(<span class="string">&quot;insert into account(name,balance)values(?,?)&quot;</span>, account.getName(), account.getBalance());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            runner.update(<span class="string">&quot;update account set name=?,balance=? where id=?&quot;</span>, account.getName(), account.getBalance(), account.getId());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteAccount</span><span class="params">(Integer accountId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            runner.update(<span class="string">&quot;delete from account where id=?&quot;</span>, accountId);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAllAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> runner.query(<span class="string">&quot;select * from account&quot;</span>, <span class="keyword">new</span> BeanListHandler&lt;Account&gt;(Account.class));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountById</span><span class="params">(Integer accountId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> runner.query(<span class="string">&quot;select * from account where id = ? &quot;</span>, <span class="keyword">new</span> BeanHandler&lt;Account&gt;(Account.class), accountId);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="3-XML配置方式"><a href="#3-XML配置方式" class="headerlink" title="3.XML配置方式"></a>3.XML配置方式</h1><p>在这里有两基本的方式，一是通过构造函数注入，另一种就是通过Set注入，实际上所做的就是，使用类的构造函数或者Set给成员变量进行赋值，但特别的是，这里是通过配置，使用 Spring 框架进行注入首先就是头部的依赖信息，顺便提一句，当然我们可以去官网查找贴过来.<br><img src="https://img-blog.csdnimg.cn/20201229151453396.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>先把针对上面功能的具体配置代码贴出来</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置Service--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.ideal.service.impl.AccountServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;accountDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;accountDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置Dao--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.ideal.dao.impl.AccountDaoImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;runner&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;runner&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置 QueryRunner--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;runner&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.commons.dbutils.QueryRunner&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注入数据源--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;ds&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/ideal_spring&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root99&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="3-1-Set方式"><a href="#3-1-Set方式" class="headerlink" title="3.1.Set方式"></a>3.1.Set方式</h2><p>顾名思义，就是通过去找你给出对应的 Set 方法，然后对成员变量进行赋值，先看下类中的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">	<span class="comment">//成员</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line">	<span class="comment">//Set方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccountDao</span><span class="params">(AccountDao accountDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accountDao = accountDao;</span><br><span class="line">    &#125;</span><br><span class="line"> 	</span><br><span class="line">    ...... 下面是增删改查的方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这是 bean.xml 中的配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置Service--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.ideal.service.impl.AccountServiceImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;accountDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;accountDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后 property 配置的过程中，有一些属性需要说一下</p>
<ul>
<li>name：与成员变量名无关，与set方法后的名称有关，例如 setAccountDao() 获取到的就是accountDao，并且已经小写了开头</li>
<li>value：这里可以写基本数据类型和 String</li>
<li>ref：这里可以引入另一个bean，帮助我们给其他类型赋值 （例如这里就通过 ref 引入了下面 id 值为accountDao的 bean）<br>当然，以后可能会见到一种方式就是 使用 p名称空间注入数据 (本质还是set)</li>
</ul>
<p>头部中需要修改引入这一句</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br></pre></td></tr></table></figure>
<p>直接拿以前一个例子：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">&quot; http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> </span></span><br><span class="line"><span class="tag">	<span class="attr">class</span>=<span class="string">&quot;cn.ideal.service.impl.AccountServiceImpl&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;汤姆&quot;</span> <span class="attr">p:age</span>=<span class="string">&quot;21&quot;</span> <span class="attr">p:birthday-ref</span>=<span class="string">&quot;nowdt&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;nowdt&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.util.Date&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="3-2-构造函数方式"><a href="#3-2-构造函数方式" class="headerlink" title="3.2.构造函数方式"></a>3.2.构造函数方式</h2><p>下面就是使用构造函数的一种方式，这一种的前提就是：类中必须提供一个和参数列表相对应的构造函数</p>
<p>由于我们选择的是 DBUtils 这样一个工具，而它为我们提供了两种构造函数，即带参和无参，所以我们可以在其中注入数据源，也可以使得每一条语句都独立事务</p>
<p>还有一点需要说明的就是：我们下面的数据源使用了 c3p0 这只是一种选择方式，并不是一定的，是因为使用 DBUtils 的时候需要手动传递一个 Connection 对象！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置 QueryRunner--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;runner&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.commons.dbutils.QueryRunner&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注入数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;ds&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>来说一下所涉及到的标签：</p>
<ul>
<li>constructor-arg（放在 bean 标签内） 再说一说其中的一些属性值</li>
<li>给谁赋值：<br><code>index</code>：指定参数在构造函数参数列表的索引位置<br><code>type</code>：指定参数在构造函数中的数据类型<br><code>name</code>：指定参数在构造函数中的名称（更常用）</li>
<li>赋什么值：<br><code>value</code>：这里可以写基本数据类型和 String<br><code>ref</code>：这里可以引入另一个bean，帮助我们给其他类型赋值<h2 id="3-3-测试代码"><a href="#3-3-测试代码" class="headerlink" title="3.3.测试代码"></a>3.3.测试代码</h2></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> AccountService as = ac.getBean(<span class="string">&quot;accountService&quot;</span>, AccountService.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Account account = <span class="keyword">new</span> Account();</span><br><span class="line">        account.setName(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">        account.setBalance(<span class="number">1000f</span>);</span><br><span class="line">        as.add(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Account account = as.findById(<span class="number">4</span>);</span><br><span class="line">        account.setName(<span class="string">&quot;杰克&quot;</span>);</span><br><span class="line">        account.setBalance(<span class="number">1500f</span>);</span><br><span class="line">        as.update(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Account&gt; list = as.findAll();</span><br><span class="line">        <span class="keyword">for</span>(Account account : list) &#123;</span><br><span class="line">            System.out.println(account);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span></span>&#123;</span><br><span class="line">        as.delete(<span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-4-执行效果"><a href="#3-4-执行效果" class="headerlink" title="3.4.执行效果"></a>3.4.执行效果</h2><p>添加，修改（包含了查询指定id），删除<br><img src="https://img-blog.csdnimg.cn/20201229152104492.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>查询所有<br><img src="https://img-blog.csdnimg.cn/20201229152118339.png" alt="在这里插入图片描述"></p>
<h1 id="4-注解配置方式"><a href="#4-注解配置方式" class="headerlink" title="4.注解配置方式"></a>4.注解配置方式</h1><p>首先，我们先将上面的例子使用注解来实现一下，再来具体的讲解：</p>
<h2 id="4-1-改造原程序为注解配置"><a href="#4-1-改造原程序为注解配置" class="headerlink" title="4.1.改造原程序为注解配置"></a>4.1.改造原程序为注解配置</h2><p>首先需要为 Dao 和 Service 的实现类中 添加注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;accountService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"> 	</span><br><span class="line">   	下面的原封不动</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository(&quot;accountDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> QueryRunner runner;</span><br><span class="line">   </span><br><span class="line">    下面的原封不动</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--开启扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;cn.ideal&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置 QueryRunner--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;runner&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.commons.dbutils.QueryRunner&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注入数据源--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;ds&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/ideal_spring&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root99&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>到这里，一个最基本的注解改造就完成了，大家可以用前面的测试类进行一下测试<br>下面我们回顾说一下注解配置相关的知识!</p>
<h2 id="4-2-常用注解"><a href="#4-2-常用注解" class="headerlink" title="4.2.常用注解"></a>4.2.常用注解</h2><p><strong>A：创建对象</strong></p>
<p><strong>@Component</strong></p>
<ul>
<li>让Spring 来管理资源，相当于XML 中配置一个 bean <bean id="" class=""></li>
<li>可以在括号内指定 value 值，即指定 bean 的 id ，如果不指定就会默认的使用当前类的类名</li>
<li>如果注解中只有一个value属性要赋值，value可以不写，直接写名称，如上面例子中</li>
</ul>
<p><strong>@Controller @Service @Repository</strong></p>
<p>对于创建对象的注解，Spring 还提供了三种更加明确的说法，作用是完全相同的，但是针对不同的场景起了不同的叫法罢了</p>
<ul>
<li>@Controller：一般用于表现层</li>
<li>@Service：一般用于业务层</li>
<li>@Repository：一般用于持久层</li>
</ul>
<p><strong>B：注入数据</strong></p>
<p><strong>@Autowired</strong><br>自动按类型注入，相当于XML 中配置一个 bean <code>&lt;property name=&quot;&quot; ref=&quot;&quot;&gt;</code> 或者 <code>&lt;property name=&quot;&quot; value=&quot;&quot;&gt;</code></p>
<p>容器中有一个唯一的 bean 对象类型和注入的变量类型一致，则注入成功</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository(&quot;accountDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">AccountDao</span> </span>&#123;......&#125;</span><br></pre></td></tr></table></figure>
<p>比如上面的例子，Spring的IOC中容器是一个Map的结构，字符串“accountDao” 以及这个可以认为是 AccountDao 类型的 AccountDaoImpl 类就被以键值对的形式存起来，被注解 @Autowired的地方，会直接去容器的 value 部分去找 AccountDao 这个类型的类</p>
<p>当 IoC 中匹配到了多个符合的，就会根据变量名去找，找不到则报错：例如下面，根据 AccountDao类型匹配到了两个类，所以根据变量名去找找到了 AccountDaoImplA 这个类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> AccountDao accountDaoA;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository(&quot;accountDaoA&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImplA</span> <span class="keyword">implements</span> <span class="title">AccountDao</span> </span>&#123;......&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository(&quot;accountDaoB&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImplB</span> <span class="keyword">implements</span> <span class="title">AccountDao</span> </span>&#123;......&#125;</span><br></pre></td></tr></table></figure>
<p>可以对类的成员变量、方法以及构造函数进行标注，完成自动装配，使用此注解可以省略 set 方法</p>
<p><strong>@Qualifier</strong></p>
<ul>
<li>在自动按类型注入的基础之上，按照 Bean 的 id 注入，给字段注入的时候不能够单独使用，需要配合上面的 @Autiwire 使用，但是给方法参数注入的时候，可以独立使用</li>
<li>使用时：value 值指定 bean 的 id它有时候必须配合别的注解使用，有没有一个标签可以解决这个问题呢？答案就是 @Resource</li>
</ul>
<p><strong>@Resource</strong></p>
<ul>
<li>直接按照 bean 的 id 注入，不过只能注入其他 bean 类型</li>
<li>使用时：name 值指定 bean 的 id<blockquote>
<p>前面三个都是用来注入其他的 bean 类型的数据，下面来说一说，基本类型以及String的实现(特别说明：集合类型的注入只能通过 XML 来实现)</p>
</blockquote>
</li>
</ul>
<p><strong>@Value</strong></p>
<ul>
<li>这个注解就是用来注入基本数据类型和 String 类型数据的</li>
<li>使用时：value 属性用于指定值</li>
</ul>
<p><strong>C：改变作用范围</strong></p>
<p><strong>@Scope</strong></p>
<ul>
<li>指定 bean 的作用范围 相当于XML 中配置一个 &lt;bean id=”” class=”” scope</li>
<li>使用时：value 属性用于指定范围的值（singleton prototype request session globalsession）</li>
</ul>
<p><strong>D：生命周期相关</strong></p>
<ul>
<li>相当于：<code>&lt;bean id=&quot;&quot; class=&quot;&quot; init-method=&quot;&quot; destroy-method=&quot;&quot; /&gt;</code></li>
</ul>
<p><strong>@PostConstruct</strong></p>
<ul>
<li>指定初始化方法</li>
</ul>
<p><strong>@PreDestroy</strong></p>
<ul>
<li>指定销毁方法<h1 id="5-XML和注解的对比与选择"><a href="#5-XML和注解的对比与选择" class="headerlink" title="5.XML和注解的对比与选择"></a>5.XML和注解的对比与选择</h1><h2 id="5-1-优缺点"><a href="#5-1-优缺点" class="headerlink" title="5.1.优缺点"></a>5.1.优缺点</h2>一般来说，我们两种配置方式都是有人使用的，不过我个人更习惯使用注解的方式</li>
</ul>
<p><strong>XML</strong>：</p>
<ul>
<li>类之间的松耦合关系，扩展性强，利于更换修改</li>
<li>对象之间的关系清晰明了</li>
</ul>
<p><strong>注解</strong>：</p>
<ul>
<li>简化配置，并且使用起来也容易，效率会高一些</li>
<li>在类中就能找对配置，清晰明了</li>
<li>类型安全</li>
</ul>
<h2 id="5-2-两者对比"><a href="#5-2-两者对比" class="headerlink" title="5.2.两者对比"></a>5.2.两者对比</h2><table>
<thead>
<tr>
<th></th>
<th>XML配置</th>
<th>注解配置</th>
</tr>
</thead>
<tbody><tr>
<td>创建对象</td>
<td><code>&lt;bean id=&quot;&quot; class=&quot;&quot;&gt;</code></td>
<td>@Controller @Service @Repository@Component</td>
</tr>
<tr>
<td>指定名称</td>
<td>通过 id 或者 name 值指定</td>
<td>@Controller(“指定的名称”)</td>
</tr>
<tr>
<td>注入数据象</td>
<td><code>&lt;property name=&quot;&quot; ref=&quot;&quot;&gt;</code></td>
<td>@Autowired @Qualifier @Resource @Value</td>
</tr>
<tr>
<td>作用范围</td>
<td><code>&lt;bean id=&quot;&quot; class=&quot;&quot; scope&gt;</code></td>
<td>@Scope</td>
</tr>
<tr>
<td>生命周期</td>
<td><code>&lt;bean id=&quot;&quot; class=&quot;&quot; init-method=&quot;&quot; destroy-method=&quot;&quot;/&gt;</code></td>
<td>@PostConstruct @PreDestroy</td>
</tr>
</tbody></table>
<h1 id="6-补充新注解"><a href="#6-补充新注解" class="headerlink" title="6.补充新注解"></a>6.补充新注解</h1><p>为什么要补充新注解呢？ 在我们使用注解时，在书写代码时，简化了很多，但是我们在 bean.xml 文件中 仍然需要 开启扫描、 进行配置QueryRunner 以及 数据源，如何彻底摆脱 xml 配置全面使用注解呢？</p>
<p>这也就是我们将要补充的几个新注解，作用就是让我们全面使用注解进行开发</p>
<h2 id="6-1-配置类注解"><a href="#6-1-配置类注解" class="headerlink" title="6.1.配置类注解"></a>6.1.配置类注解</h2><p><strong>@Configuration</strong></p>
<ul>
<li>指定当前类是 spring 的一个配置类，相当于 XML中的 bean.xml 文件</li>
<li>获取容器时需要使用下列形式</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> ApplicationContext ac = <span class="keyword">new</span> AnnotationConfigApplicationContext(SpringConfiguration.class);</span><br></pre></td></tr></table></figure>
<p>依旧使用上方的 CURD 的案例代码进行修改，首先与cn同级创建了一个名为 config 的包，然后编写一个名为 SpringConfiguration 的类，当然实际上这两个名字无所谓的，添加注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfiguration</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="6-2-指定扫描包注解"><a href="#6-2-指定扫描包注解" class="headerlink" title="6.2.指定扫描包注解"></a>6.2.指定扫描包注解</h2><p><strong>@ComponentScan</strong></p>
<p>@Configuration 相当于已经帮我们把 bean.xml 文件创立好了，按照我们往常的步骤，应该指定扫描的包了，这也就是我们这个注解的作用</p>
<ul>
<li>指定 spring 在初始化容器时要扫描的包，在 XML 中相当于：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启扫描--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;cn.ideal&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>其中 basePackages 用于指定扫描的包，和这个注解中value属性的作用是一致的</li>
</ul>
<p>具体使用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;cn.ideal&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfiguration</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="6-3-创建对象"><a href="#6-3-创建对象" class="headerlink" title="6.3.创建对象"></a>6.3.创建对象</h2><p><strong>@Bean</strong></p>
<p>写好了配置类，以及指定了扫描的包，下面该做的就是配置 QueryRunner 以及数据源了，在 XML 中我们会通过书写 bean 标签来配置，而 Spring 为我们提供了 @Bean 这个注解来替代原来的标签</p>
<ul>
<li>将注解写在方法上（只能是方法），也就是代表用这个方法创建一个对象，然后放到 Spring 的容器中去</li>
<li>通过 name 属性 给这个方法指定名称，也就是我们 XML 中 bean 的 id</li>
</ul>
<p>具体使用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.QueryRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建一个 QueryRunner对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataSource</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;runner&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> QueryRunner <span class="title">creatQueryRunner</span><span class="params">(DataSource dataSource)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">new</span> QueryRunner(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建数据源，并且存入spring</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;dataSource&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">createDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ComboPooledDataSource ds = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">            ds.setUser(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">            ds.setPassword(<span class="string">&quot;1234&quot;</span>);</span><br><span class="line">            ds.setDriverClass(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">            ds.setJdbcUrl(<span class="string">&quot;jdbc:mysql:///spring_day02&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> ds;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="6-4-配置-properties文件"><a href="#6-4-配置-properties文件" class="headerlink" title="6.4.配置 properties文件"></a>6.4.配置 properties文件</h2><p><strong>@PropertySource</strong></p>
<p>上面在创建数据源的时候，都是直接把配置信息写死了，如果想要使用 properties 进行内容的配置，在这时候就需要，使用 @PropertySource 这个注解</p>
<ul>
<li>用于加载 .properties 文件中的配置</li>
<li>value [] 指定 properties 文件位置，在类路径下，就需要加上 classpath</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;cn.ideal&quot;)</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbcConfig.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfiguration</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建一个 QueryRunner对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataSource</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;runner&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> QueryRunner <span class="title">creatQueryRunner</span><span class="params">(DataSource dataSource)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">new</span> QueryRunner(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建数据源，并且存入spring</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;dataSource&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">createDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ComboPooledDataSource ds = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">            ds.setUser(username);</span><br><span class="line">            ds.setPassword(password);</span><br><span class="line">            ds.setDriverClass(driver);</span><br><span class="line">            ds.setJdbcUrl(url);</span><br><span class="line">            <span class="keyword">return</span> ds;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="6-5-导入其他配置类"><a href="#6-5-导入其他配置类" class="headerlink" title="6.5.导入其他配置类"></a>6.5.导入其他配置类</h2><p><strong>@Import</strong></p>
<p>这样看来一个 JdbcConfig 就基本写好了，我们在其中配置了 QueryRunner 对象，以及数据源，这个时候，实际上我们原先的 bean.xml 就可以删掉了，但是我们虽然写好了 JdbcConfig 但是如何将两个配置文件联系起来呢？这也就是这个注解的作用\</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;cn.ideal&quot;)</span></span><br><span class="line"><span class="meta">@Import(JdbcConfig.class)</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbcConfig.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfiguration</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="7-注解获取容器"><a href="#7-注解获取容器" class="headerlink" title="7.注解获取容器"></a>7.注解获取容器</h1><p>修改获取容器的方式后，就可以进行测试了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> ApplicationContext ac = <span class="keyword">new</span> AnnotationConfigApplicationContext(SpringConfiguration.class);</span><br><span class="line"><span class="keyword">private</span> AccountService as = ac.getBean(<span class="string">&quot;accountService&quot;</span>, AccountService.class);</span><br></pre></td></tr></table></figure>
<h1 id="8-Spring单元测试改进"><a href="#8-Spring单元测试改进" class="headerlink" title="8.Spring单元测试改进"></a>8.Spring单元测试改进</h1><p>由于我们需要通过上面测试中两行代获取到容器，为了不每一次都写这两行代码，所以我们在前面将其定义在了成员位置，但是有没有办法可以省掉这个步骤呢？</p>
<p>也就是说，我们想要程序自动创建容器，但是原来的 junit 很显然是实现不了的，因为它并不会知道我们是否使用了 spring ，不过 junit 提供了一个注解让我们替换它的运行器，转而由 spring 提供</p>
<p>首先需要导入 jar 包 或者说导入依赖坐标</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>使用 @RunWith 注解替换原有运行器 然后使用 @ContextConfiguration 指定 spring 配置文件的位置，然后使用 @Autowired 给变量注入数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = SpringConfiguration.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountService as;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>Spring框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring_IOC控制反转</title>
    <url>/2021/03/20/Spring%E6%A1%86%E6%9E%B6%E4%B9%8BIoC%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%AC/</url>
    <content><![CDATA[<p>[TOC]</p>
<h1 id="1-耦合"><a href="#1-耦合" class="headerlink" title="1.耦合"></a>1.耦合</h1><p><img src="https://img-blog.csdnimg.cn/20201228164929762.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70,#pic_left" alt="在这里插入图片描述"></p>
<blockquote>
<p>Spring框架是 Java 平台的一个开源的全栈（Full-stack）应用程序框架和控制反转容器实现，一般被直接称为 Spring。该框架的一些核心功能理论上可用于任何 Java 应用，但 Spring 还为基于Java企业版平台构建的 Web 应用提供了大量的拓展支持。虽然 Spring 没有直接实现任何的编程模型，但它已经在 Java 社区中广为流行，基本上完全代替了企业级JavaBeans（EJB）模型                                 —— 维基百科</p>
</blockquote>
<p>耦合，就是模块间关联的程度，每个模块之间的联系越多，也就是其耦合性越强，那么独立性也就越差了，所以我们在软件设计中，应该尽量做到<font color=red>低耦合，高内聚</font>！</p>
<span id="more"></span>

<p>高内聚与低耦合是每个软件开发者追求的目标，那么内聚和耦合分别是什么意思呢？<br><img src="https://img-blog.csdnimg.cn/20201229094008395.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<blockquote>
<p>内聚是从功能角度来度量模块内的联系，一个好的内聚模块应当恰好做一件事。它描述的是模块内的功能联系。</p>
</blockquote>
<blockquote>
<p>耦合是软件结构中各模块之间相互连接的一种度量，耦合强弱取决于模块间接口的复杂程度、进入或访问一个模块的点以及通过接口的数据。</p>
</blockquote>
<p><strong>生活中的例子</strong>：家里有一条串灯，上面有很多灯泡，如果灯坏了，你需要将整个灯带都换掉，这就是高耦合的表现，因为灯和灯带之间是紧密相连，不可分割的，但是如果灯泡可以随意拆卸，并不影响整个灯带，那么这就叫做低耦合！</p>
<p><strong>代码中的例子</strong>：来看一个多态的调用，前提是B继承 A，引用了很多次</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">A a = <span class="keyword">new</span> B();  <span class="comment">// 父类引用 指向子类对象   里式替换原则</span></span><br><span class="line">a.method();</span><br><span class="line"></span><br><span class="line">A a = <span class="keyword">new</span> C();  <span class="comment">// 父类引用 指向子类对象   里式替换原则</span></span><br><span class="line">a.method();</span><br><span class="line"></span><br><span class="line">重新编译  Web源码---打包war---&gt;编译<span class="class"><span class="keyword">class</span>----&gt;上线部署!</span></span><br></pre></td></tr></table></figure>
<p>如果你想要把B变成C，就需要修改所有<code>new B()</code> 的地方为 <code>new C()</code> 这也就是高耦合</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">A a = BeanFactory().getBean(B名称);   <span class="comment">// B名称 ----&gt;可以写到配置文件中!!</span></span><br><span class="line">a.method();</span><br></pre></td></tr></table></figure>
<p>这个时候，我们只需要将B名称改为C，同时将配置文件中的B改为C就可以了.</p>
<h1 id="2-分析耦合及改进"><a href="#2-分析耦合及改进" class="headerlink" title="2.分析耦合及改进"></a>2.分析耦合及改进</h1><p>首先，我们简单的模拟一个对账户进行添加的操作，我们先采用我们以前常常使用的方式进行模拟，然后再给出改进方案，再引出今天要将的 Spring 框架，能帮助更好的理解这个框架!</p>
<h2 id="2-1-以前的程序"><a href="#2-1-以前的程序" class="headerlink" title="2.1.以前的程序"></a>2.1.以前的程序</h2><p>首先，按照我们常规的方式先模拟，我们先将一套基本流程走下来</p>
<p><strong>A：Dao 层</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户持久层接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addAccount</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户持久层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;添加用户成功！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>B：Service 层</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户业务层接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addAccount</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户业务层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> AccountDao accountDao = <span class="keyword">new</span> AccountDaoImpl();</span><br><span class="line">	</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        accountDao.addAccount();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>C：调用</strong><br>由于，我们创建的Maven工程并不是一个web工程，我们也只是为了简单模拟，所以在这里，创建了一个 Client 类，作为客户端，来测试我们的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		AccountService  as = <span class="keyword">new</span> AccountServiceImpl();</span><br><span class="line">		as.addAccount();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行的结果，就是在屏幕上输出一个添加用户成功的字样</p>
<p><strong>D：分析：new 的问题</strong><br>上面的这段代码，应该是比较简单也容易想到的一种实现方式了，但是它的耦合性却是很高的，其中这两句代码，就是造成耦合性高的根由，因为业务层（service）调用持久层（dao），这个时候业务层将很大的依赖于持久层的接口（AccountDao）和实现类（AccountDaoImpl）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> AccountDao accountDao = <span class="keyword">new</span> AccountDaoImpl();</span><br><span class="line">AccountService as = <span class="keyword">new</span> AccountServiceImpl();</span><br></pre></td></tr></table></figure>
<p>这种通过 new 对象的方式，使得不同类之间的依赖性大大增强，其中一个类的问题，就会直接导致出现全局的问题，如果我们将被调用的方法进行错误的修改，或者说删掉某一个类，执行的结果就是：<br><img src="https://img-blog.csdnimg.cn/20201229101038715.png" alt="在这里插入图片描述"><br>在<strong>编译期</strong>就出现了错误，而我们作为一个开发者，我们应该努力让程序在编译期不依赖，而运行时才可以有一些必要的依赖（依赖是不可能完全消除的）</p>
<p>所以，我们应该想办法进行解耦，要解耦就要使<strong>调用者</strong>和<strong>被调用者</strong>之间没有什么直接的联系，那么<strong>工厂模式</strong>就可以帮助我们很好的解决这个问题.  </p>
<p>应该大家在 JavaWeb 或者 JavaSE的学习中，或多或少是有接触过工厂这个设计模式的，而工厂模式，我们简单提一下，工厂就是在调用者和被调用者之间起一个连接枢纽的作用，调用者和被调用者都只与工厂进行联系，从而减少了两者之间直接的依赖（如果有一些迷茫的朋友，可以了解一下这种设计模式)</p>
<p><strong>传统模式：</strong><br><img src="https://img-blog.csdnimg.cn/20201229101207675.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>工厂模式：</strong><br><img src="https://img-blog.csdnimg.cn/20201229101221104.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="2-2-工厂模式改进"><a href="#2-2-工厂模式改进" class="headerlink" title="2.2.工厂模式改进"></a>2.2.工厂模式改进</h2><p><strong>A：BeanFactory</strong><br>具体怎么实现呢？在这里可以将 serivice 和 dao 均配置到配置文件中去（<code>xml/properties</code>)，通过一个类读取配置文件中的内容，并使用反射技术创建对象，然后存起来，完成这个操作的类就是我们的工厂!</p>
<blockquote>
<p>注：在这里我们使用了 properties ，主要是为了实现方便，xml还涉及到解析的一些代码，相对麻烦一些，不过我们下面要说的 Spring 就是使用了 xml做配置文件</p>
</blockquote>
<ul>
<li>bean.properties：先写好配置文件，将 service 和 dao 以 key=value 的格式配置好</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">accountService=cn.ideal.service.impl.AccountServiceImpl</span><br><span class="line">accountDao=cn.ideal.dao.impl.AccountDaoImpl</span><br></pre></td></tr></table></figure>
<ul>
<li>BeanFactory</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义一个Properties对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Properties properties;</span><br><span class="line">    <span class="comment">//使用静态代码块为Properties对象赋值</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//实例化对象</span></span><br><span class="line">            properties = <span class="keyword">new</span> Properties();</span><br><span class="line">            <span class="comment">//获取properties文件的流对象</span></span><br><span class="line">            InputStream in = BeanFactory.class.getClassLoader().getResourceAsStream(<span class="string">&quot;bean.properties&quot;</span>);</span><br><span class="line">            properties.load(in);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="keyword">throw</span>  <span class="keyword">new</span> ExceptionInInitializerError(<span class="string">&quot;初始化properties失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>简单的解释一下这部分代码（当然还没写完）：首先就是要将配置文件中的内容读入，这里通过类加载器的方式操作，读入一个流文件，然后从中读取键值对，由于只需要执一次，所以放在静态代码块中，又因为 properties 对象在后面的方法中还要用，所以写在成员的位置.</p>
<p>接着在 BeanFactory 中继续编写一个 getBean 方法其中有两句核心代码的意义就是：</p>
<p>通过方法参数中传入的字符串，找到对应的全类名路径，实际上也就是通过刚才获取到的配置内容，通过key 找到 value值<br><img src="https://img-blog.csdnimg.cn/20201229101604832.png" alt="在这里插入图片描述"><br>下一句就是通过 Class 的加载方法加载这个类，实例化后返回</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getBean</span><span class="params">(String beanName)</span></span>&#123;</span><br><span class="line">    Object bean = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//根据key获取value</span></span><br><span class="line">        String beanPath = properties.getProperty(beanName);</span><br><span class="line">        bean = Class.forName(beanPath).newInstance();</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>B：测试代码：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AccountService as = 					   (AccountService)BeanFactory.getBean(<span class="string">&quot;accountService&quot;</span>);</span><br><span class="line">        as.addAccount();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>C：执行效果：</strong><br>当我们按照同样的操作，删除掉被调用的 dao 的实现类，可以看到，这时候编译期错误已经消失了，而报出来的只是一个运行时异常，这样就解决了前面所思考的问题!<br><img src="https://img-blog.csdnimg.cn/20201229101647261.png" alt="在这里插入图片描述"></p>
<blockquote>
<p>我们应该努力让程序在编译期不依赖，而运行时才可以有一些必要的依赖（依赖是不可能完全消除的）</p>
</blockquote>
<h2 id="2-3-小总结"><a href="#2-3-小总结" class="headerlink" title="2.3.小总结"></a>2.3.小总结</h2><p><strong>为什么使用工厂模式替代了 new 的方式？</strong></p>
<p>打个比方，在你的程序中，如果一段时间后，你发现在你 new 的这个对象中存在着bug或者不合理的地方，或者说你甚至想换一个持久层的框架，这种情况下，没办法，只能修改源码了，然后重新编译，部署，但是如果你使用工厂模式，你只需要重新将想修改的类，单独写好，编译后放到文件中去，只需要修改一下配置文件就可以了</p>
<p>【<strong>new 对象依赖的是具体事物，而不 new 则是依赖抽象事物</strong>】</p>
<blockquote>
<p>依赖具体事物，这个很好理解，你依赖的是一个具体的，实实在在内容，它与你系相关，所以有什么问题，都是连环的，可能为了某个点，我们需要修改 N 个地方，绝望</p>
</blockquote>
<blockquote>
<p>依赖抽象事物，你所调用的并不是一个直接就可以触手可及的东西，是一个抽象的概念，所以不存在上面那种情况下的连环反应</p>
</blockquote>
<h2 id="2-4-再分析问题"><a href="#2-4-再分析问题" class="headerlink" title="2.4.再分析问题"></a>2.4.再分析问题</h2><p>到这里，似乎还不错，不过我们的程序还能够继续优化！ 来分析一下：</p>
<p>首先在测试中，多打印几次，工厂所创建出的对象，我们写个for循环打印下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line">	AccountService as = (AccountService)BeanFactory.getBean(<span class="string">&quot;accountService&quot;</span>);</span><br><span class="line">	System.out.println(as);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看下结果：特别显眼的四次输出，我们的问题也就出来了，我所创建的4个对象是不同的，也就是说，每一次调用，都会实例化一个新的对象，这也叫做<strong>多例</strong><br><img src="https://img-blog.csdnimg.cn/20201229101906596.png" alt="在这里插入图片描述"><br>这有什么问题吗？</p>
<p>①：多次创建对象的代价就是消耗性能，导致效率会低一些<br>②：相比较单例，jvm会回收较多的垃圾<br>③：获取速度比单例慢，因为单例除了第一次，其后都是从缓存中获取</p>
<p>所以，我们要试着将它改成单例的，单例从表现上来看，我们查询到的对象都应该是一个</p>
<h2 id="2-5-多例-gt-单例之再改进"><a href="#2-5-多例-gt-单例之再改进" class="headerlink" title="2.5.多例-&gt;单例之再改进"></a>2.5.多例-&gt;单例之再改进</h2><p><strong>A：分析：</strong><br>前面我们每一次调用都要将类进行 newInstance()，也就是实例化，想要不再创建新的对象，只需要将我们第一次创建的对象，在创建后就存到一个集合（容器）中，由于我们有查询的需求所以在 Map 和 List 中选择了 Map</p>
<p><strong>B：代码：</strong><br>简单解读一下：</p>
<ul>
<li><p>首先在成员位置定义一个 Map，称作beans，至于实例化就不说了</p>
</li>
<li><p>通过 keys 方法，取出所有的 配置中所有的key，然后进行遍历出每一个key</p>
</li>
<li><p>通过每个 key 从配置中取出对应的 value 在这里就是对应类的全类名</p>
</li>
<li><p>将每个取出的 value，使用反射创建出对象 obj</p>
</li>
<li><p>将 key 与 obj 存入Map容器</p>
</li>
<li><p>在 getBean 方法中只需要从 Map中取就可以了</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义一个Properties对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Properties properties;</span><br><span class="line">    <span class="comment">//定义Map，作为存放对象的容器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Object&gt; beans;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用静态代码块为Properties对象赋值</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//实例化对象</span></span><br><span class="line">            properties = <span class="keyword">new</span> Properties();</span><br><span class="line">            <span class="comment">//获取properties文件的流对象</span></span><br><span class="line">            InputStream in = BeanFactory.class.getClassLoader().getResourceAsStream(<span class="string">&quot;bean.properties&quot;</span>);</span><br><span class="line">            properties.load(in);</span><br><span class="line">            <span class="comment">//实例化容器</span></span><br><span class="line">            beans = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">            <span class="comment">//取出所有key</span></span><br><span class="line">            Enumeration keys = properties.keys();</span><br><span class="line">            <span class="comment">//遍历枚举</span></span><br><span class="line">            <span class="keyword">while</span> (keys.hasMoreElements()) &#123;</span><br><span class="line">                String key = keys.nextElement().toString();</span><br><span class="line">                <span class="comment">//根据获取到的key获取对应value</span></span><br><span class="line">                String beanPath = properties.getProperty(key);</span><br><span class="line">                <span class="comment">//反射创对象</span></span><br><span class="line">                Object obj = Class.forName(beanPath).newInstance();</span><br><span class="line">                beans.put(key, obj);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ExceptionInInitializerError(<span class="string">&quot;初始化properties失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getBean</span><span class="params">(String beanName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> beans.get(beanName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>C：执行效果：</strong><br><img src="https://img-blog.csdnimg.cn/20201229102106787.png" alt="在这里插入图片描述"><br>测试结果已经变成了单例的</p>
<p><strong>D：单例的劣势：</strong><br>单例一个很明显的问题，就是在并发情况下，可能会出现线程安全问题</p>
<p>因为由于单例情况下，对象只会被实例化一次，这也就说，所有请求都会共享一个 bean 实例，若一个请求改变了对象的状态，同时对象又处理别的请求，之前的请求造成的对象状态改变，可能会影响在操作时，对别的请求做了错误的处理</p>
<p><strong>举个简单的例子帮助理解：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line">	<span class="comment">//定义一个类成员</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;添加用户成功！&quot;</span>);</span><br><span class="line">        System.out.println(i);</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试中依旧是哪个循环，不过这次执行一下 addAccount() 方法<br><img src="https://img-blog.csdnimg.cn/20201229102235221.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>通过测试可以看到，单例的情况下，我在dao实现类中 添加了一个类成员 i，然后在方法中对其进行累加并输出操作，每一个值都会被修改，这就出现了我们担心的问题</p>
<p>但是回顾我们从前的编程习惯，似乎我们从未在 service 或 dao 中书写过 类成员，并在方法中对其进行操作，我们一般都是在方法内定义，而这种习惯，也保证了我们现在不会出现这样的问题</p>
<p>将变量定义到方法内</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;添加用户成功！&quot;</span>);</span><br><span class="line">        System.out.println(i);</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试一下<br><img src="https://img-blog.csdnimg.cn/20201229102259392.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>好了这样就没有问题了！</p>
<p>讲这么多，就是为了配合 Spring 的学习，前面我们使用工厂模式对传统的程序进行了改造，程序不再与众多资源等直接联系，而是通过工厂进行提供分配，这种被动接受获取对象的方式就是控制反转，也是它的核心之一，现在就可以开始进入正题了</p>
<h1 id="3-IOC控制反转"><a href="#3-IOC控制反转" class="headerlink" title="3.IOC控制反转"></a>3.IOC控制反转</h1><p>控制反转（IoC，<strong>Inversion of Control</strong>），是一个概念，是一种思想。指将传统上由程序代码直接操控的对象调用权交给<strong>容器</strong>，通过容器来实现对象的装配和管理。控制反转就是对对象控制权的转移，从程序代码本身反转到了外部容器。通过容器实现对象的创建，属性赋值，依赖的管理。</p>
<p>IoC 是一个概念，是一种思想，其实现方式多种多样。当前比较流行的实现方式是依赖注入。应用广泛。</p>
<p><strong>依赖</strong>：classA 类中含有 classB 的实例，在 classA 中调用 classB 的方法完成功能，即 classA对 classB 有依赖。</p>
<p><strong>Ioc 的实现：</strong></p>
<p>依赖注入：DI(Dependency Injection)，程序代码不做定位查询，这些工作由容器自行完成。依赖注入 DI 是指程序运行过程中，若需要调用另一个对象协助时，无须在代码中创建被调用者，而是依赖于外部容器，由外部容器创建后传递给程序。</p>
<p>Spring 的依赖注入对调用者与被调用者几乎没有任何要求，完全支持对象之间依赖关系<br>的管理。</p>
<p><font color=red>Spring 框架使用依赖注入（DI）实现 IoC。</font></p>
<p>Spring 容器是一个超级大工厂，负责创建、管理所有的 Java 对象，这些 Java 对象被称为 Bean。Spring 容器管理着容器中 Bean 之间的依赖关系，Spring 使用“依赖注入”的方式。来管理 Bean 之间的依赖关系。<font color=red>使用 IoC 实现对象之间的解耦和</font>。</p>
<h2 id="3-1-第一个入门程序"><a href="#3-1-第一个入门程序" class="headerlink" title="3.1.第一个入门程序"></a>3.1.第一个入门程序</h2><p>现在我们就正式开始进入到 Spring 框架的学习中去，而在这部分，并不是说做增删改查，而是通过 Spring 解决依赖的问题，这也就是我们上面众多铺垫内容的原因</p>
<p>由于我们使用的是 maven 创建出一个普通的 java 工程就可以了，不需要创建 java web工程，当然如果不是使用 maven的朋友可以去官网下载jar包 将需要的 bean context core spel log4j 等放到lib中</p>
<p><strong>A：Maven 导入坐标</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>B：添加配置文件bean.xml</strong></p>
<ul>
<li>引入头部文件</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>bean.xml</strong></p>
<ul>
<li>使用spring管理对象创建 (在beans标签中添加 bean标签)</li>
<li>也就是说在配置文件中，对service和dao进行配置</li>
<li>id：对象的唯一标识</li>
<li>class：指定要创建的对象的全限定类名</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--把对象的创建交给spring来管理--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.ideal.service.impl.AccountServiceImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.ideal.dao.impl.AccountDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>C：测试代码</strong><br>为什么用这些，等运行后说，先让程序跑起来</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取核心容器</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//根据id后去Bean对象,下面两种方式都可以</span></span><br><span class="line">        AccountService as = (AccountService)ac.getBean(<span class="string">&quot;accountService&quot;</span>);</span><br><span class="line">        AccountDao ad = ac.getBean(<span class="string">&quot;accountDao&quot;</span>, AccountDao.class);</span><br><span class="line">        System.out.println(as);</span><br><span class="line">        System.out.println(ad);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>D：执行效果</strong><br>程序运行起来是没有问题的，到这里一个入门例程就跑起来了<br><img src="https://img-blog.csdnimg.cn/20201229103753362.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h1 id="4-ApplicationContext"><a href="#4-ApplicationContext" class="headerlink" title="4.ApplicationContext"></a>4.ApplicationContext</h1><p>首先我们来分析一下在调用时的一些内容，测试时，第一个内容，就是获取核心容器，通过了一个 ApplicationContext 进行接收，那么它是什么呢?</p>
<p><strong>A：与 BeanFactory 的区别</strong><br>首先看一下这个图<br><img src="https://img-blog.csdnimg.cn/20201229105046763.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可以看到 BeanFactory 才是 Spring 管理 Bean 的顶级接口，它提供了实例化对象和取出对象的功能，但是由于BeanFactory的简单与一些局限性，有时候并不是很适合于大型企业级的开发，因此，Spring提供了一个新的内容也就是 ApplicationContext：它是一个更加高级的容器，并且功能更加分丰富!</p>
<p>在使用时最明显的一个区别就是：<strong>两者创建对象的时间点不一样!</strong></p>
<p><strong>ApplicationContext：单例对象适用采用此接口</strong></p>
<ul>
<li>构建核心容器时，创建对象时采用立即加载的方式。即：只要一读取完配置文件马上就创建配置文件中配置的对象</li>
</ul>
<p><strong>BeanFactory：多例对象适合</strong></p>
<ul>
<li>构建核心容器时，创建对象时采用延迟加载的方式。即：什么时候根据id获取对象，什么时候才真正的创建对象</li>
</ul>
<p>下面是使用 BeanFactory 进行测试的代码，不过有一些方法已经过时了，给大家参考使用，可以使用打断点的方式进行测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Resource resource = <span class="keyword">new</span> ClassPathResource(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line">BeanFactory factory = <span class="keyword">new</span> XmlBeanFactory(resource);</span><br><span class="line">AccountService as  = (AccountService)factory.getBean(<span class="string">&quot;accountService&quot;</span>);</span><br><span class="line">System.out.println(as);</span><br></pre></td></tr></table></figure>
<h2 id="4-1-ApplicationContext三个实现类"><a href="#4-1-ApplicationContext三个实现类" class="headerlink" title="4.1.ApplicationContext三个实现类"></a>4.1.ApplicationContext三个实现类</h2><p>查看 ApplicationContext 的实现类我们要说的就是红框中的几个<br><img src="https://img-blog.csdnimg.cn/20201229105244537.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ClassPathXmlApplicationContext：可以加载类路径下的配置文件，当然配置文件必须在类路径下（用的更多）</span><br></pre></td></tr></table></figure>
<p>FileSystemXmlApplicationContext：可以加载磁盘任意路径下的配置文件（有磁盘访问权限）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AnnotationConfigApplicationContext：读取注解创建容器</span><br></pre></td></tr></table></figure>
<p>我们由于这篇文章中并没有说注解的问题，所以我们先只看前两个</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;bean.xml&quot;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext ac = <span class="keyword">new</span> FileSystemXmlApplicationContext(<span class="string">&quot;D:\\bean.xml&quot;</span>);</span><br></pre></td></tr></table></figure>
<h2 id="4-2-bean标签以及一些小细节"><a href="#4-2-bean标签以及一些小细节" class="headerlink" title="4.2.bean标签以及一些小细节"></a>4.2.bean标签以及一些小细节</h2><p>配置文件中的bean标签，它的作用是配置对象，方便 spring进行创建，介绍一下其中的常用属性:</p>
<ul>
<li>id：对象的唯一标识</li>
<li>class：指定要创建的对象的全限定类名</li>
<li>scope：指定对象的作用范围</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">- singleton：单例的（默认）</span><br><span class="line">- prototype：多例的</span><br><span class="line">- request：WEB 项目中，Spring 创建 Bean 对象，将对象存入到 request 域中</span><br><span class="line">- session：WEB 项目中，Spring 创建 Bean 的对象，将对象存入到 session 域中</span><br><span class="line">- global session：WEB 项目中， Portlet 环境使用，若没有 Portlet 环境那么globalSession 相当于 session</span><br></pre></td></tr></table></figure>

<ul>
<li>init-method：指定类中的初始化方法名称</li>
<li>destroy-method：指定类中销毁方法名称</li>
</ul>
<p>在Spring 中默认是单例的，这也就是我们在前面的自定义工厂过程中所做的，在Spring中还需要说明，补充一下：</p>
<p><strong>作用范围：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">单例对象：在一个应用中只会有一个对象的实例，它的作用范围就是整个引用</span><br><span class="line">多例对象：每一次访问调用对象，会重新创建对象的实例</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>生命周期：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">单例对象：创建容器时出生，容器在则活着，销毁容器时死亡</span><br><span class="line">多例对象：使用对象时出生，堆在在则或者，当对象长时间不使用，被垃圾回收回收时死亡</span><br></pre></td></tr></table></figure>
<h2 id="4-3-实例化Bean的三种方式"><a href="#4-3-实例化Bean的三种方式" class="headerlink" title="4.3.实例化Bean的三种方式"></a>4.3.实例化Bean的三种方式</h2><p><strong>①：使用默认无参构造函数</strong><br>根据默认无参构造函数来创建类对象，若没有无参构造函数，则会创建失败</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;bean id=&quot;accountService&quot; class=&quot;cn.ideal.service.impl.AccountServiceImpl&quot;&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure>
<p>在某些情况下，例如我们想要使用一些别人封装好的方法，很有可能存在于jar包中，并且都是    一些字节码文件，我们是没有修改的权利了，那这时候我们想要使用还可以使用下面两种方法!</p>
<p><strong>②：Spring 实例工厂</strong><br>使用普通工厂中的方法创建对象，存入Spring</p>
<ul>
<li>id：指定实例工厂中 bean 的 id</li>
<li>class：实例工厂的全限定类名</li>
<li>factory-method：指定实例工厂中创建对象的方法</li>
</ul>
<p>模拟一个实例工厂，创建业务层实现类，这种情况下，必须先有工厂实例对象，才能调用方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InstanceFactory</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> AccountService <span class="title">createAccountService</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> AccountServiceImpl();</span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;instancFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.ideal.factory.InstanceFactory&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span><span class="attr">factory-bean</span>=<span class="string">&quot;instancFactory&quot;</span><span class="attr">factory-method</span>=<span class="string">&quot;createAccountService&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>③：Spring 静态工厂</strong><br>使用工厂中的静态方法创建对象</p>
<ul>
<li>id：指定 bean id</li>
<li>class：静态工厂的全限定类名</li>
<li>factory-method：指定生产对象的静态方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticFactory</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IAccountService <span class="title">createAccountService</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> AccountServiceImpl();</span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;bean id=<span class="string">&quot;accountService&quot;</span><span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;cn.ideal.factory.StaticFactory&quot;</span></span><br><span class="line"> factory-method=&quot;createAccountService&quot;&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>Spring框架</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序</title>
    <url>/2021/04/01/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<h2 id="微信小程序"><a href="#微信小程序" class="headerlink" title="微信小程序"></a>微信小程序</h2><h3 id="标签及属性"><a href="#标签及属性" class="headerlink" title="标签及属性:"></a>标签及属性:</h3><p><strong>view标签：</strong>块级标签</p>
<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">类型</th>
<th align="center">默认值</th>
<th align="center">必填</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">hover-class</td>
<td align="center">String</td>
<td align="center">none</td>
<td align="center">否</td>
<td align="center">指定按下去的样式类，当hover-class=”none”时，没有点击效果</td>
</tr>
<tr>
<td align="center">hover-stop-propagation</td>
<td align="center">boolean</td>
<td align="center">false</td>
<td align="center">否</td>
<td align="center">指定是否阻止本节点的祖先节点出现点击状态（阻止冒泡）</td>
</tr>
<tr>
<td align="center">hover-start-time</td>
<td align="center">number</td>
<td align="center">50</td>
<td align="center">否</td>
<td align="center">按住后多久出现点击态，单位毫秒</td>
</tr>
<tr>
<td align="center">hover-stay-time</td>
<td align="center">number</td>
<td align="center">400</td>
<td align="center">否</td>
<td align="center">手指松开后点击态保留时间，单位毫秒</td>
</tr>
</tbody></table>
<span id="more"></span>

<p><strong>text标签：</strong>文本标签</p>
<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">类型</th>
<th align="center">默认值</th>
<th align="center">必填</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">selectable</td>
<td align="center">boolean</td>
<td align="center">false</td>
<td align="center">否</td>
<td align="center">文本是否可选</td>
</tr>
<tr>
<td align="center"><strong>space</strong></td>
<td align="center">string</td>
<td align="center"></td>
<td align="center">否</td>
<td align="center">显示连续空格</td>
</tr>
<tr>
<td align="center">decode</td>
<td align="center">boolean</td>
<td align="center">false</td>
<td align="center">否</td>
<td align="center">是否解码</td>
</tr>
</tbody></table>
<p><strong>space</strong>属性的合法值：</p>
<table>
<thead>
<tr>
<th align="center">值</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">ensp</td>
<td align="center">中文字符空格一半大小</td>
</tr>
<tr>
<td align="center">emsp</td>
<td align="center">中文字符空格大小</td>
</tr>
<tr>
<td align="center">nbsp</td>
<td align="center">根据字体设置的空格大小</td>
</tr>
</tbody></table>
<p><strong>image标签：</strong></p>
<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">类型</th>
<th align="center">默认值</th>
<th align="center">必填</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">src</td>
<td align="center">string</td>
<td align="center"></td>
<td align="center">否</td>
<td align="center">图片资源地址</td>
</tr>
<tr>
<td align="center">mode</td>
<td align="center">string</td>
<td align="center">scaleToFill</td>
<td align="center">否</td>
<td align="center">图片裁剪，缩放的模式</td>
</tr>
<tr>
<td align="center">webp</td>
<td align="center">boolean</td>
<td align="center">false</td>
<td align="center">否</td>
<td align="center">默认不解析webp格式只支持网诺资源</td>
</tr>
<tr>
<td align="center">lazy-load</td>
<td align="center">boolean</td>
<td align="center">false</td>
<td align="center">否</td>
<td align="center">图片懒加载，在即将进入一定范围（上下三屏）时才开始加载</td>
</tr>
<tr>
<td align="center">show-menu-by-longpress</td>
<td align="center">boolean</td>
<td align="center">false</td>
<td align="center">否</td>
<td align="center">开启长按图片显示识别小程序码菜单</td>
</tr>
<tr>
<td align="center">binderror</td>
<td align="center">eventhandle</td>
<td align="center"></td>
<td align="center">否</td>
<td align="center">当错误发生时触发，event.detail={errMsg}</td>
</tr>
<tr>
<td align="center">bindload</td>
<td align="center">eventhandle</td>
<td align="center"></td>
<td align="center">否</td>
<td align="center">当图片载入完毕时触发，event.detail = {height, width}</td>
</tr>
</tbody></table>
<p>mode的合法值：</p>
<table>
<thead>
<tr>
<th align="center">值</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">scaleToFill</td>
<td align="center">缩放模式，不保持纵横比缩放图片，使图片的宽高完全拉伸至填满 image 元素</td>
</tr>
<tr>
<td align="center">aspectFit</td>
<td align="center">缩放模式，保持纵横比缩放图片，使图片的长边能完全显示出来。也就是说，可以完整地将图片显示出来。</td>
</tr>
<tr>
<td align="center">aspectFill</td>
<td align="center">缩放模式，保持纵横比缩放图片，只保证图片的短边能完全显示出来。也就是说，图片通常只在水平或垂直方向是完整的，另一个方向将会发生截取。</td>
</tr>
<tr>
<td align="center">widthFix</td>
<td align="center">缩放模式，宽度不变，高度自动变化，保持原图宽高比不变</td>
</tr>
<tr>
<td align="center">heightFix</td>
<td align="center">缩放模式，高度不变，宽度自动变化，保持原图宽高比不变</td>
</tr>
<tr>
<td align="center">top</td>
<td align="center">裁剪模式，不缩放图片，只显示图片的顶部区域</td>
</tr>
<tr>
<td align="center">bottom</td>
<td align="center">裁剪模式，不缩放图片，只显示图片的底部区域</td>
</tr>
<tr>
<td align="center">center</td>
<td align="center">裁剪模式，不缩放图片，只显示图片的中间区域</td>
</tr>
<tr>
<td align="center">left</td>
<td align="center">裁剪模式，不缩放图片，只显示图片的左边区域</td>
</tr>
<tr>
<td align="center">right</td>
<td align="center">裁剪模式，不缩放图片，只显示图片的右边区域</td>
</tr>
<tr>
<td align="center">top left</td>
<td align="center">裁剪模式，不缩放图片，只显示图片的左上边区域</td>
</tr>
<tr>
<td align="center">top right</td>
<td align="center">裁剪模式，不缩放图片，只显示图片的右上边区域</td>
</tr>
<tr>
<td align="center">bottom left</td>
<td align="center">裁剪模式，不缩放图片，只显示图片的左下边区域</td>
</tr>
<tr>
<td align="center">bottom right</td>
<td align="center">裁剪模式，不缩放图片，只显示图片的右下边区域</td>
</tr>
</tbody></table>
<p><strong>navigator（块元素）：</strong>页面链接</p>
<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">类型</th>
<th align="center">默认值</th>
<th align="center">必填</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">target</td>
<td align="center">string</td>
<td align="center">self</td>
<td align="center">否</td>
<td align="center">在哪个目标上发生跳转，默认当前小程序</td>
</tr>
<tr>
<td align="center">url</td>
<td align="center">string</td>
<td align="center"></td>
<td align="center">否</td>
<td align="center">当前小程序内的跳转链接</td>
</tr>
<tr>
<td align="center">open-type</td>
<td align="center">spring</td>
<td align="center">navigate</td>
<td align="center">否</td>
<td align="center">跳转方式</td>
</tr>
<tr>
<td align="center">delta</td>
<td align="center">number</td>
<td align="center">1</td>
<td align="center">否</td>
<td align="center">当 open-type 为 ‘navigateBack’ 时有效，表示回退的层数</td>
</tr>
<tr>
<td align="center">app-id</td>
<td align="center">string</td>
<td align="center"></td>
<td align="center">否</td>
<td align="center">当<code>target=&quot;miniProgram&quot;</code>时有效，要打开的小程序 appId</td>
</tr>
<tr>
<td align="center">path</td>
<td align="center">string</td>
<td align="center"></td>
<td align="center">否</td>
<td align="center">当<code>target=&quot;miniProgram&quot;</code>时有效，打开的页面路径，如果为空则打开首页</td>
</tr>
<tr>
<td align="center">extra-data</td>
<td align="center">object</td>
<td align="center"></td>
<td align="center">否</td>
<td align="center">当<code>target=&quot;miniProgram&quot;</code>时有效，需要传递给目标小程序的数据，目标小程序可在 <code>App.onLaunch()</code>，<code>App.onShow()</code> 中获取到这份数据</td>
</tr>
<tr>
<td align="center">version</td>
<td align="center">string</td>
<td align="center">release</td>
<td align="center">否</td>
<td align="center">当<code>target=&quot;miniProgram&quot;</code>时有效，要打开的小程序版本</td>
</tr>
<tr>
<td align="center">hover-class</td>
<td align="center">string</td>
<td align="center">navigator-hover</td>
<td align="center">否</td>
<td align="center">指定点击时的样式类，当<code>hover-class=&quot;none&quot;</code>时，没有点击态效果</td>
</tr>
<tr>
<td align="center">hover-stop-propagation</td>
<td align="center">boolean</td>
<td align="center">false</td>
<td align="center">否</td>
<td align="center">指定是否阻止本节点的祖先节点出现点击态</td>
</tr>
<tr>
<td align="center">hover-start-time</td>
<td align="center">number</td>
<td align="center">50</td>
<td align="center">否</td>
<td align="center">按住后多久出现点击态，单位毫秒</td>
</tr>
<tr>
<td align="center">hover-stay-time</td>
<td align="center">number</td>
<td align="center">600</td>
<td align="center">否</td>
<td align="center">手指松开后点击态保留时间，单位毫秒</td>
</tr>
<tr>
<td align="center">bindsuccess</td>
<td align="center">string</td>
<td align="center"></td>
<td align="center">否</td>
<td align="center">当<code>target=&quot;miniProgram&quot;</code>时有效，跳转小程序成功</td>
</tr>
<tr>
<td align="center">bindfail</td>
<td align="center">string</td>
<td align="center"></td>
<td align="center">否</td>
<td align="center">当<code>target=&quot;miniProgram&quot;</code>时有效，跳转小程序失败</td>
</tr>
<tr>
<td align="center">bindcomplete</td>
<td align="center">string</td>
<td align="center"></td>
<td align="center">否</td>
<td align="center">当<code>target=&quot;miniProgram&quot;</code>时有效，跳转小程序完成</td>
</tr>
</tbody></table>
<p>target的合法值：</p>
<table>
<thead>
<tr>
<th align="center">值</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">self</td>
<td align="center">当前小程序</td>
</tr>
<tr>
<td align="center">miniProgram</td>
<td align="center">其他小程序</td>
</tr>
</tbody></table>
<p>open-type的合法值:</p>
<table>
<thead>
<tr>
<th align="center">值</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">navigate</td>
<td align="center">对应 <a href="https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateTo.html">wx.navigateTo</a> 或 <a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/miniprogram-navigate/wx.navigateToMiniProgram.html">wx.navigateToMiniProgram</a> 的功能</td>
</tr>
<tr>
<td align="center">redirect</td>
<td align="center">对应 <a href="https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.redirectTo.html">wx.redirectTo</a> 的功能</td>
</tr>
<tr>
<td align="center">switchTab</td>
<td align="center">对应 <a href="https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.switchTab.html">wx.switchTab</a> 的功能</td>
</tr>
<tr>
<td align="center">reLaunch</td>
<td align="center">对应 <a href="https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.reLaunch.html">wx.reLaunch</a> 的功能</td>
</tr>
<tr>
<td align="center">navigateBack</td>
<td align="center">对应 <a href="https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateBack.html">wx.navigateBack</a> 的功能</td>
</tr>
<tr>
<td align="center">exit</td>
<td align="center">退出小程序，<code>target=&quot;miniProgram&quot;</code>时生效</td>
</tr>
</tbody></table>
<p>version的合法值：</p>
<table>
<thead>
<tr>
<th align="center">值</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">develop</td>
<td align="center">开发版</td>
</tr>
<tr>
<td align="center">trial</td>
<td align="center">体验版</td>
</tr>
<tr>
<td align="center">release</td>
<td align="center">正式版，仅在当前小程序为开发版或体验版时此参数有效；如果当前小程序是正式版，则打开的小程序必定是正式版</td>
</tr>
</tbody></table>
<p><strong>scroll-view标签：</strong>可滚动视图区域。使用竖向滚动时，需要给<a href="https://developers.weixin.qq.com/miniprogram/dev/component/scroll-view.html">scroll-view</a>一个固定高度，通过 WXSS 设置 height，组件属性的长度单位默认为px</p>
<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">类型</th>
<th align="center">默认值</th>
<th align="center">必填</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">scroll-x</td>
<td align="center">boolean</td>
<td align="center">false</td>
<td align="center">否</td>
<td align="center">允许横向滚动</td>
</tr>
<tr>
<td align="center">scroll-y</td>
<td align="center">boolean</td>
<td align="center">false</td>
<td align="center">否</td>
<td align="center">允许纵向滚动</td>
</tr>
<tr>
<td align="center">upper-threshold</td>
<td align="center">number/string</td>
<td align="center">50</td>
<td align="center">否</td>
<td align="center">距顶部/左边多远时，触发 scrolltoupper 事件</td>
</tr>
<tr>
<td align="center">lower-threshold</td>
<td align="center">number/string</td>
<td align="center">50</td>
<td align="center">否</td>
<td align="center">距底部/右边多远时，触发 scrolltolower 事件</td>
</tr>
<tr>
<td align="center">scroll-top</td>
<td align="center">number/string</td>
<td align="center"></td>
<td align="center">否</td>
<td align="center">设置竖向滚动条位置</td>
</tr>
<tr>
<td align="center">scroll-left</td>
<td align="center">number/string</td>
<td align="center"></td>
<td align="center">否</td>
<td align="center">设置横向滚动条位置</td>
</tr>
<tr>
<td align="center">scroll-into-view</td>
<td align="center">string</td>
<td align="center"></td>
<td align="center">否</td>
<td align="center">值应为某子元素id（id不能以数字开头）。设置哪个方向可滚动，则在哪个方向滚动到该元素</td>
</tr>
<tr>
<td align="center">scroll-with-animation</td>
<td align="center">boolean</td>
<td align="center">false</td>
<td align="center">否</td>
<td align="center">在设置滚动条位置时使用动画过渡</td>
</tr>
<tr>
<td align="center">enable-back-to-top</td>
<td align="center">boolean</td>
<td align="center">false</td>
<td align="center">否</td>
<td align="center">iOS点击顶部状态栏、安卓双击标题栏时，滚动条返回顶部，只支持竖向</td>
</tr>
<tr>
<td align="center">enable-flex</td>
<td align="center">boolean</td>
<td align="center">false</td>
<td align="center">否</td>
<td align="center">启用 flexbox 布局。开启后，当前节点声明了 <code>display: flex</code> 就会成为 flex container，并作用于其孩子节点。</td>
</tr>
<tr>
<td align="center">scroll-anchoring</td>
<td align="center">boolean</td>
<td align="center">false</td>
<td align="center">否</td>
<td align="center">开启 scroll anchoring 特性，即控制滚动位置不随内容变化而抖动，仅在 iOS 下生效，安卓下可参考 CSS <code>overflow-anchor</code> 属性。</td>
</tr>
<tr>
<td align="center">refresher-enabled</td>
<td align="center">boolean</td>
<td align="center">false</td>
<td align="center">否</td>
<td align="center">开启自定义下拉刷新</td>
</tr>
<tr>
<td align="center">refresher-threshold</td>
<td align="center">number</td>
<td align="center">45</td>
<td align="center">否</td>
<td align="center">设置自定义下拉刷新阈值</td>
</tr>
<tr>
<td align="center">refresher-default-style</td>
<td align="center">string</td>
<td align="center">“black”</td>
<td align="center">否</td>
<td align="center">设置自定义下拉刷新默认样式，支持设置 `black | white | none， none 表示不使用默认样式</td>
</tr>
<tr>
<td align="center">refresher-background</td>
<td align="center">string</td>
<td align="center">“#FFF”</td>
<td align="center">否</td>
<td align="center">设置自定义下拉刷新区域背景颜色</td>
</tr>
<tr>
<td align="center">refresher-triggered</td>
<td align="center">boolean</td>
<td align="center">false</td>
<td align="center">否</td>
<td align="center">设置当前下拉刷新状态，true 表示下拉刷新已经被触发，false 表示下拉刷新未被触发</td>
</tr>
<tr>
<td align="center">enhanced</td>
<td align="center">boolean</td>
<td align="center">false</td>
<td align="center">否</td>
<td align="center">启用 scroll-view 增强特性</td>
</tr>
<tr>
<td align="center">bounces</td>
<td align="center">boolean</td>
<td align="center">true</td>
<td align="center">否</td>
<td align="center">iOS 下 scroll-view 边界弹性控制 (同时开启 enhanced 属性后生效)</td>
</tr>
<tr>
<td align="center">show-scrollbar</td>
<td align="center">boolean</td>
<td align="center">true</td>
<td align="center">否</td>
<td align="center">滚动条显隐控制 (同时开启 enhanced 属性后生效)</td>
</tr>
<tr>
<td align="center">paging-enabled</td>
<td align="center">boolean</td>
<td align="center">false</td>
<td align="center">否</td>
<td align="center">分页滑动效果 (同时开启 enhanced 属性后生效)</td>
</tr>
<tr>
<td align="center">fast-deceleration</td>
<td align="center">boolean</td>
<td align="center">false</td>
<td align="center">否</td>
<td align="center">滑动减速速率控制 (同时开启 enhanced 属性后生效)</td>
</tr>
<tr>
<td align="center">binddragstart</td>
<td align="center">eventhandle</td>
<td align="center"></td>
<td align="center">否</td>
<td align="center">滑动开始事件 (同时开启 enhanced 属性后生效) detail { scrollTop, scrollLeft }</td>
</tr>
<tr>
<td align="center">binddragend</td>
<td align="center">eventhandle</td>
<td align="center"></td>
<td align="center">否</td>
<td align="center">滑动结束事件 (同时开启 enhanced 属性后生效) detail { scrollTop, scrollLeft, velocity }</td>
</tr>
<tr>
<td align="center">bindscrolltoupper</td>
<td align="center">eventhandle</td>
<td align="center"></td>
<td align="center">否</td>
<td align="center">滚动到顶部/左边时触发</td>
</tr>
<tr>
<td align="center">bindscrolltolower</td>
<td align="center">eventhandle</td>
<td align="center"></td>
<td align="center">否</td>
<td align="center">滚动到底部/右边时触发</td>
</tr>
<tr>
<td align="center">bindscroll</td>
<td align="center">eventhandle</td>
<td align="center"></td>
<td align="center">否</td>
<td align="center">滚动时触发，event.detail = {scrollLeft, scrollTop, scrollHeight, scrollWidth, deltaX, deltaY}</td>
</tr>
<tr>
<td align="center">bindrefresherpulling</td>
<td align="center">eventhandle</td>
<td align="center"></td>
<td align="center">否</td>
<td align="center">自定义下拉刷新控件被下拉</td>
</tr>
<tr>
<td align="center">bindrefresherrefresh</td>
<td align="center">eventhandle</td>
<td align="center"></td>
<td align="center">否</td>
<td align="center">自定义下拉刷新被触发</td>
</tr>
<tr>
<td align="center">bindrefresherrestore</td>
<td align="center">eventhandle</td>
<td align="center"></td>
<td align="center">否</td>
<td align="center">自定义下拉刷新被复位</td>
</tr>
<tr>
<td align="center">bindrefresherabort</td>
<td align="center">eventhandle</td>
<td align="center"></td>
<td align="center">否</td>
<td align="center">自定义下拉刷新被中止</td>
</tr>
<tr>
<td align="center">binddragging</td>
<td align="center">eventhandle</td>
<td align="center"></td>
<td align="center">否</td>
<td align="center">滑动事件 (同时开启 enhanced 属性后生效) detail { scrollTop, scrollLeft }</td>
</tr>
</tbody></table>
<p><strong>swiper标签：</strong>滑块视图容器。其中只可放置<a href="https://developers.weixin.qq.com/miniprogram/dev/component/swiper-item.html">swiper-item</a>组件，否则会导致未定义的行为</p>
<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">类型</th>
<th align="center">默认值</th>
<th align="center">必填</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">indicator-dots</td>
<td align="center">boolean</td>
<td align="center">false</td>
<td align="center">否</td>
<td align="center">是否显示面板指示点</td>
</tr>
<tr>
<td align="center">indicator-color</td>
<td align="center">color</td>
<td align="center">rgba(0, 0, 0, .3)</td>
<td align="center">否</td>
<td align="center">指示点颜色</td>
</tr>
<tr>
<td align="center">indicator-active-color</td>
<td align="center">color</td>
<td align="center">#000000</td>
<td align="center">否</td>
<td align="center">当前选中的指示点颜色</td>
</tr>
<tr>
<td align="center">autoplay</td>
<td align="center">boolean</td>
<td align="center">false</td>
<td align="center">否</td>
<td align="center">是否自动切换</td>
</tr>
<tr>
<td align="center">current</td>
<td align="center">number</td>
<td align="center">0</td>
<td align="center">否</td>
<td align="center">当前所在滑块的 index</td>
</tr>
<tr>
<td align="center">interval</td>
<td align="center">number</td>
<td align="center">5000</td>
<td align="center">否</td>
<td align="center">自动切换时间间隔</td>
</tr>
<tr>
<td align="center">duration</td>
<td align="center">number</td>
<td align="center">500</td>
<td align="center">否</td>
<td align="center">滑动动画时长</td>
</tr>
<tr>
<td align="center">circular</td>
<td align="center">boolean</td>
<td align="center">false</td>
<td align="center">否</td>
<td align="center">是否采用衔接滑动</td>
</tr>
<tr>
<td align="center">vertical</td>
<td align="center">boolean</td>
<td align="center">false</td>
<td align="center">否</td>
<td align="center">滑动方向是否为纵向</td>
</tr>
<tr>
<td align="center">previous-margin</td>
<td align="center">string</td>
<td align="center">“0px”</td>
<td align="center">否</td>
<td align="center">前边距，可用于露出前一项的一小部分，接受 px 和 rpx 值</td>
</tr>
<tr>
<td align="center">next-margin</td>
<td align="center">string</td>
<td align="center">“0px”</td>
<td align="center">否</td>
<td align="center">后边距，可用于露出后一项的一小部分，接受 px 和 rpx 值</td>
</tr>
<tr>
<td align="center">snap-to-edge</td>
<td align="center">boolean</td>
<td align="center">“false”</td>
<td align="center">否</td>
<td align="center">当 swiper-item 的个数大于等于 2，关闭 circular 并且开启 previous-margin 或 next-margin 的时候，可以指定这个边距是否应用到第一个、最后一个元素</td>
</tr>
<tr>
<td align="center">display-multiple-items</td>
<td align="center">number</td>
<td align="center">1</td>
<td align="center">否</td>
<td align="center">同时显示的滑块数量</td>
</tr>
<tr>
<td align="center">easing-function</td>
<td align="center">string</td>
<td align="center">“default”</td>
<td align="center">否</td>
<td align="center">指定 swiper 切换缓动动画类型</td>
</tr>
<tr>
<td align="center">bindchange</td>
<td align="center">eventhandle</td>
<td align="center"></td>
<td align="center">否</td>
<td align="center">current 改变时会触发 change 事件，event.detail = {current, source}</td>
</tr>
<tr>
<td align="center">bindtransition</td>
<td align="center">eventhandle</td>
<td align="center"></td>
<td align="center">否</td>
<td align="center">swiper-item 的位置发生改变时会触发 transition 事件，event.detail = {dx: dx, dy: dy}</td>
</tr>
<tr>
<td align="center">bindanimationfinish</td>
<td align="center">eventhandle</td>
<td align="center"></td>
<td align="center">否</td>
<td align="center">动画结束时会触发 animationfinish 事件，event.detail 同上</td>
</tr>
</tbody></table>
<p><strong>easing-function 的合法值</strong>：</p>
<table>
<thead>
<tr>
<th align="center">值</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">default</td>
<td align="center">默认缓动函数</td>
</tr>
<tr>
<td align="center">linear</td>
<td align="center">线性动画</td>
</tr>
<tr>
<td align="center">easeInCubic</td>
<td align="center">缓入动画</td>
</tr>
<tr>
<td align="center">easeOutCubic</td>
<td align="center">缓出动画</td>
</tr>
<tr>
<td align="center">easeInOutCubic</td>
<td align="center">缓入缓出动画</td>
</tr>
</tbody></table>
<p><strong>swiper-item标签：</strong>仅可放置在<strong>swiper</strong>组件中，宽高自动设置为100%。</p>
<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">类型</th>
<th align="center">默认值</th>
<th align="center">必填</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">item-id</td>
<td align="center">string</td>
<td align="center"></td>
<td align="center">否</td>
<td align="center">该 swiper-item 的标识符</td>
</tr>
<tr>
<td align="center">skip-hidden-item-layout</td>
<td align="center">boolean</td>
<td align="center">false</td>
<td align="center">否</td>
<td align="center">是否跳过未显示的滑块布局，设为 true 可优化复杂情况下的滑动性能，但会丢失隐藏状态滑块的布局信息</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
  </entry>
  <entry>
    <title>Spring_DI依赖注入</title>
    <url>/2021/03/20/Spring%E6%A1%86%E6%9E%B6%E4%B9%8BDI%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20201229124353219.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>[TOC]</p>
<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h1><p>控制反转（<code>IoC</code>）是一种思想，而依赖注入（<code>Dependency Injection</code>）则是实现这种思想的方法</p>
<p>其实泛概念上两者是接近的，可以简单的理解为一个概念的不同角度描述</p>
<p>我们前面写程序的时候，通过控制反转，使得 Spring 可以创建对象，这样减低了耦合性，但是每个类或模块之间的依赖是不可能完全消失的，而这种依赖关系，我们可以完全交给 spring 来维护。</p>
<span id="more"></span>

<h1 id="2-注入分类"><a href="#2-注入分类" class="headerlink" title="2.注入分类"></a>2.注入分类</h1><p>bean 实例在调用无参构造器创建对象后，就要对 bean 对象的属性进行初始化。初始化是由容器自动完成的，称为注入。</p>
<p>根据注入方式的不同，常用的有两类：<code>set 注入</code>、<code>构造注入</code>。</p>
<h2 id="2-1-set-注入-掌握"><a href="#2-1-set-注入-掌握" class="headerlink" title="2.1.set 注入(掌握)"></a>2.1.set 注入(掌握)</h2><p>set 注入也叫设值注入是指，通过 setter 方法传入被调用者的实例。这种注入方式简单、直观，因而在 Spring 的依赖注入中大量使用。</p>
<p><strong>A、简单类型</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">School</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;School&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, address=&#x27;&quot;</span> + address + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>B、beans.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--声明student对象</span></span><br><span class="line"><span class="comment">        注入：就是赋值的意思</span></span><br><span class="line"><span class="comment">        简单类型： spring中规定java的基本数据类型和String都是简单类型。</span></span><br><span class="line"><span class="comment">        di:给属性赋值</span></span><br><span class="line"><span class="comment">        1. set注入（设值注入） ：spring调用类的set方法， 你可以在set方法中完成属性赋值</span></span><br><span class="line"><span class="comment">         1）简单类型的set注入</span></span><br><span class="line"><span class="comment">            &lt;bean id=&quot;xx&quot; class=&quot;yyy&quot;&gt;</span></span><br><span class="line"><span class="comment">               &lt;property name=&quot;属性名字&quot; value=&quot;此属性的值&quot;/&gt;</span></span><br><span class="line"><span class="comment">               一个property只能给一个属性赋值</span></span><br><span class="line"><span class="comment">               &lt;property....&gt;</span></span><br><span class="line"><span class="comment">            &lt;/bean&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myStudent&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ba01.Student&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;李四lisi&quot;</span> /&gt;</span><span class="comment">&lt;!--setName(&quot;李四&quot;)--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;22&quot;</span> /&gt;</span><span class="comment">&lt;!--setAge(21)--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">value</span>=<span class="string">&quot;lisi@qq.com&quot;</span> /&gt;</span><span class="comment">&lt;!--setEmail(&quot;lisi@qq.com&quot;)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>C、beans.xml</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;=====test01========&quot;</span>);</span><br><span class="line">    String config=<span class="string">&quot;ba01/applicationContext.xml&quot;</span>;</span><br><span class="line">    ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(config);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从容器中获取Student对象</span></span><br><span class="line">    Student myStudent =  (Student) ac.getBean(<span class="string">&quot;myStudent&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;student对象=&quot;</span>+myStudent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>创建 <code>java.util.Date</code> 并设置初始的日期时间：</p>
<p><strong>Spring 配置文件：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;mydate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.util.Date&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;time&quot;</span> <span class="attr">value</span>=<span class="string">&quot;8364297429&quot;</span> /&gt;</span><span class="comment">&lt;!--setTime(8364297429)--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>测试方法：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;=====test01========&quot;</span>);</span><br><span class="line">    String config=<span class="string">&quot;ba01/applicationContext.xml&quot;</span>;</span><br><span class="line">    ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(config);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从容器中获取Student对象</span></span><br><span class="line">    Student myStudent =  (Student) ac.getBean(<span class="string">&quot;myStudent&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;student对象=&quot;</span>+myStudent);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Date myDate = (Date) ac.getBean(<span class="string">&quot;mydate&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;myDate=&quot;</span>+myDate);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>B、引用类型</strong></p>
<p>当指定 bean 的某属性值为另一 bean 的实例时，通过 ref 指定它们间的引用关系。ref的值必须为某 bean 的 id 值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">School</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;School&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, address=&#x27;&quot;</span> + address + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明一个引用类型</span></span><br><span class="line">    <span class="keyword">private</span> School school;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;spring会调用类的无参数构造方法创建对象&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 包名.类名.方法名称</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;setName:&quot;</span>+name);</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;setAge:&quot;</span>+age);</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSchool</span><span class="params">(School school)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;setSchool:&quot;</span>+school);</span><br><span class="line">        <span class="keyword">this</span>.school = school;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, school=&quot;</span> + school +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--声明student对象</span></span><br><span class="line"><span class="comment">        注入：就是赋值的意思</span></span><br><span class="line"><span class="comment">        简单类型： spring中规定java的基本数据类型和String都是简单类型。</span></span><br><span class="line"><span class="comment">        di:给属性赋值</span></span><br><span class="line"><span class="comment">        1. set注入（设值注入） ：spring调用类的set方法， 你可以在set方法中完成属性赋值</span></span><br><span class="line"><span class="comment">         1）简单类型的set注入</span></span><br><span class="line"><span class="comment">            &lt;bean id=&quot;xx&quot; class=&quot;yyy&quot;&gt;</span></span><br><span class="line"><span class="comment">               &lt;property name=&quot;属性名字&quot; value=&quot;此属性的值&quot;/&gt;</span></span><br><span class="line"><span class="comment">               一个property只能给一个属性赋值</span></span><br><span class="line"><span class="comment">               &lt;property....&gt;</span></span><br><span class="line"><span class="comment">            &lt;/bean&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         2) 引用类型的set注入 ： spring调用类的set方法</span></span><br><span class="line"><span class="comment">           &lt;bean id=&quot;xxx&quot; class=&quot;yyy&quot;&gt;</span></span><br><span class="line"><span class="comment">              &lt;property name=&quot;属性名称&quot; ref=&quot;bean的id(对象的名称)&quot; /&gt;</span></span><br><span class="line"><span class="comment">           &lt;/bean&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myStudent&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ba02.Student&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;李四&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;26&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--引用类型--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;school&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;mySchool&quot;</span> /&gt;</span><span class="comment">&lt;!--setSchool(mySchool)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--声明School对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;mySchool&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ba02.School&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;北京大学&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;北京的海淀区&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>测试方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;=====test01========&quot;</span>);</span><br><span class="line">    String config=<span class="string">&quot;ba02/applicationContext.xml&quot;</span>;</span><br><span class="line">    ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(config);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从容器中获取Student对象</span></span><br><span class="line">    Student myStudent =  (Student) ac.getBean(<span class="string">&quot;myStudent&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;student对象=&quot;</span>+myStudent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-2-set-构造注入-理解"><a href="#2-2-set-构造注入-理解" class="headerlink" title="2.2.set 构造注入(理解)"></a>2.2.set 构造注入(理解)</h2><p>构造注入是指，在构造调用者实例的同时，完成被调用者的实例化。即，使用构造器设<br>置依赖关系。</p>
<p><strong>举例 1：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建有参数构造方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String myname,<span class="keyword">int</span> myage, School mySchool)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;=====Student有参数构造方法======&quot;</span>);</span><br><span class="line">    <span class="comment">//属性赋值</span></span><br><span class="line">    <span class="keyword">this</span>.name  = myname;</span><br><span class="line">    <span class="keyword">this</span>.age  = myage;</span><br><span class="line">    <span class="keyword">this</span>.school = mySchool;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>spring配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--声明student对象</span></span><br><span class="line"><span class="comment">        注入：就是赋值的意思</span></span><br><span class="line"><span class="comment">        简单类型： spring中规定java的基本数据类型和String都是简单类型。</span></span><br><span class="line"><span class="comment">        di:给属性赋值</span></span><br><span class="line"><span class="comment">        1. set注入（设值注入） ：spring调用类的set方法， 你可以在set方法中完成属性赋值</span></span><br><span class="line"><span class="comment">         1）简单类型的set注入</span></span><br><span class="line"><span class="comment">            &lt;bean id=&quot;xx&quot; class=&quot;yyy&quot;&gt;</span></span><br><span class="line"><span class="comment">               &lt;property name=&quot;属性名字&quot; value=&quot;此属性的值&quot;/&gt;</span></span><br><span class="line"><span class="comment">               一个property只能给一个属性赋值</span></span><br><span class="line"><span class="comment">               &lt;property....&gt;</span></span><br><span class="line"><span class="comment">            &lt;/bean&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         2) 引用类型的set注入 ： spring调用类的set方法</span></span><br><span class="line"><span class="comment">           &lt;bean id=&quot;xxx&quot; class=&quot;yyy&quot;&gt;</span></span><br><span class="line"><span class="comment">              &lt;property name=&quot;属性名称&quot; ref=&quot;bean的id(对象的名称)&quot; /&gt;</span></span><br><span class="line"><span class="comment">           &lt;/bean&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        2.构造注入：spring调用类有参数构造方法，在创建对象的同时，在构造方法中给属性赋值。</span></span><br><span class="line"><span class="comment">          构造注入使用 &lt;constructor-arg&gt; 标签</span></span><br><span class="line"><span class="comment">          &lt;constructor-arg&gt; 标签：一个&lt;constructor-arg&gt;表示构造方法一个参数。</span></span><br><span class="line"><span class="comment">          &lt;constructor-arg&gt; 标签属性：</span></span><br><span class="line"><span class="comment">             name:表示构造方法的形参名</span></span><br><span class="line"><span class="comment">             index:表示构造方法的参数的位置，参数从左往右位置是 0 ， 1 ，2的顺序</span></span><br><span class="line"><span class="comment">             value：构造方法的形参类型是简单类型的，使用value</span></span><br><span class="line"><span class="comment">             ref：构造方法的形参类型是引用类型的，使用ref</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--使用name属性实现构造注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myStudent&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ba03.Student&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;myage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;20&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;mySchool&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;myXueXiao&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;myname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;周良&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--使用index属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myStudent2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ba03.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;22&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;李四&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;2&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;myXueXiao&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--省略index--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myStudent3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ba03.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span>  <span class="attr">value</span>=<span class="string">&quot;张强强&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span>  <span class="attr">value</span>=<span class="string">&quot;22&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span>  <span class="attr">ref</span>=<span class="string">&quot;myXueXiao&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--声明School对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myXueXiao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ba03.School&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;清华大学&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;北京的海淀区&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><constructor-arg />标签中用于指定参数的属性有：<br>➢ name：指定参数名称。<br>➢ index：指明该参数对应着构造器的第几个参数，从 0 开始。不过，该属性不要也行，<br>但要注意，若参数类型相同，或之间有包含关系，则需要保证赋值顺序要与构造器中的参数顺序一致。</p>
<p>举例 2：<br>使用构造注入创建一个系统类 File 对象</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--创建File,使用构造注入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myfile&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.io.File&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;parent&quot;</span> <span class="attr">value</span>=<span class="string">&quot;D:\course\JavaProjects\spring-course\ch01-hello-spring&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;child&quot;</span> <span class="attr">value</span>=<span class="string">&quot;readme.txt&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>测试类:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;=====test01========&quot;</span>);</span><br><span class="line">    String config=<span class="string">&quot;ba03/applicationContext.xml&quot;</span>;</span><br><span class="line">    ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(config);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从容器中获取Student对象</span></span><br><span class="line">    Student myStudent =  (Student) ac.getBean(<span class="string">&quot;myStudent&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;student对象=&quot;</span>+myStudent);</span><br><span class="line"></span><br><span class="line">    File myFile = (File) ac.getBean(<span class="string">&quot;myfile&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;myFile==&quot;</span>+myFile.getName());</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-3-引用类型属性自动注入"><a href="#2-3-引用类型属性自动注入" class="headerlink" title="2.3.引用类型属性自动注入"></a>2.3.引用类型属性自动注入</h2><p>对于引用类型属性的注入，也可不在配置文件中显示的注入。可以通过为<code>&lt;bean/&gt;</code>标签<br>设置 autowire 属性值，为引用类型属性进行隐式自动注入（默认是不自动注入引用类型属<br>性）。根据自动注入判断标准的不同，可以分为两种：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">byName：根据名称自动注入</span><br><span class="line">byType： 根据类型自动注入</span><br></pre></td></tr></table></figure>
<h3 id="2-3-1-byName-方式自动注入"><a href="#2-3-1-byName-方式自动注入" class="headerlink" title="2.3.1.byName 方式自动注入"></a>2.3.1.byName 方式自动注入</h3><p>当配置文件中被调用者 bean 的 id 值与代码中调用者 bean 类的属性名相同时，可使用byName 方式，让容器自动将被调用者 bean 注入给调用者 bean。容器是通过调用者的 bean类的属性名与配置文件的被调用者 bean 的 id 进行比较而实现自动注入的。</p>
<p>举例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">School</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;School&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, address=&#x27;&quot;</span> + address + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明一个引用类型</span></span><br><span class="line">    <span class="keyword">private</span> School school;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//System.out.println(&quot;spring会调用类的无参数构造方法创建对象&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//System.out.println(&quot;setName:&quot;+name);</span></span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//System.out.println(&quot;setAge:&quot;+age);</span></span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSchool</span><span class="params">(School school)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;setSchool:&quot;</span>+school);</span><br><span class="line">        <span class="keyword">this</span>.school = school;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, school=&quot;</span> + school +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Spring配置文件:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            引用类型的自动注入： spring框架根据某些规则可以给引用类型赋值。·不用你在给引用类型赋值了</span></span><br><span class="line"><span class="comment">       使用的规则常用的是byName, byType.</span></span><br><span class="line"><span class="comment">       1.byName(按名称注入) ： java类中引用类型的属性名和spring容器中（配置文件）&lt;bean&gt;的id名称一样，</span></span><br><span class="line"><span class="comment">                              且数据类型是一致的，这样的容器中的bean，spring能够赋值给引用类型。</span></span><br><span class="line"><span class="comment">         语法：</span></span><br><span class="line"><span class="comment">         &lt;bean id=&quot;xx&quot; class=&quot;yyy&quot; autowire=&quot;byName&quot;&gt;</span></span><br><span class="line"><span class="comment">            简单类型属性赋值</span></span><br><span class="line"><span class="comment">         &lt;/bean&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       2.byType(按类型注入) ： java类中引用类型的数据类型和spring容器中（配置文件）&lt;bean&gt;的class属性</span></span><br><span class="line"><span class="comment">                              是同源关系的，这样的bean能够赋值给引用类型</span></span><br><span class="line"><span class="comment">         同源就是一类的意思：</span></span><br><span class="line"><span class="comment">          1.java类中引用类型的数据类型和bean的class的值是一样的。</span></span><br><span class="line"><span class="comment">          2.java类中引用类型的数据类型和bean的class的值父子类关系的。</span></span><br><span class="line"><span class="comment">          3.java类中引用类型的数据类型和bean的class的值接口和实现类关系的</span></span><br><span class="line"><span class="comment">         语法：</span></span><br><span class="line"><span class="comment">         &lt;bean id=&quot;xx&quot; class=&quot;yyy&quot; autowire=&quot;byType&quot;&gt;</span></span><br><span class="line"><span class="comment">            简单类型属性赋值</span></span><br><span class="line"><span class="comment">         &lt;/bean&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--byName--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myStudent&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ba04.Student&quot;</span>  <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;李四&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;26&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--引用类型--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;property name=&quot;school&quot; ref=&quot;mySchool&quot; /&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--声明School对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;school&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ba04.School&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;清华大学&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;北京的海淀区&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>测试:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String config=<span class="string">&quot;ba04/applicationContext.xml&quot;</span>;</span><br><span class="line">    ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(config);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从容器中获取Student对象</span></span><br><span class="line">    Student myStudent =  (Student) ac.getBean(<span class="string">&quot;myStudent&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;student对象=&quot;</span>+myStudent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-3-2-byType-方式自动注入"><a href="#2-3-2-byType-方式自动注入" class="headerlink" title="2.3.2.byType 方式自动注入"></a>2.3.2.byType 方式自动注入</h3><p>使用 byType 方式自动注入，要求：配置文件中被调用者 bean 的 class 属性指定的类，<br>要与代码中调用者 bean 类的某引用类型属性类型同源。即要么相同，要么有 is-a 关系（子类，或是实现类）。但这样的同源的被调用 bean 只能有一个。多于一个，容器就不知该匹配<br>哪一个了。</p>
<p>举例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">School</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;School&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, address=&#x27;&quot;</span> + address + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明一个引用类型</span></span><br><span class="line">    <span class="keyword">private</span> School school;</span><br><span class="line">    <span class="keyword">private</span> School school2;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//System.out.println(&quot;spring会调用类的无参数构造方法创建对象&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//System.out.println(&quot;setName:&quot;+name);</span></span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//System.out.println(&quot;setAge:&quot;+age);</span></span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSchool</span><span class="params">(School school)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;setSchool:&quot;</span>+school);</span><br><span class="line">        <span class="keyword">this</span>.school = school;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSchool2</span><span class="params">(School school2)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;setSchool2222222:&quot;</span>+school);</span><br><span class="line">        <span class="keyword">this</span>.school2 = school2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, school=&quot;</span> + school +</span><br><span class="line">                <span class="string">&quot;, school2=&quot;</span> + school2 +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 子类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrimarySchool</span> <span class="keyword">extends</span>  <span class="title">School</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Spring配置文件:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            引用类型的自动注入： spring框架根据某些规则可以给引用类型赋值。·不用你在给引用类型赋值了</span></span><br><span class="line"><span class="comment">       使用的规则常用的是byName, byType.</span></span><br><span class="line"><span class="comment">       1.byName(按名称注入) ： java类中引用类型的属性名和spring容器中（配置文件）&lt;bean&gt;的id名称一样，</span></span><br><span class="line"><span class="comment">                              且数据类型是一致的，这样的容器中的bean，spring能够赋值给引用类型。</span></span><br><span class="line"><span class="comment">         语法：</span></span><br><span class="line"><span class="comment">         &lt;bean id=&quot;xx&quot; class=&quot;yyy&quot; autowire=&quot;byName&quot;&gt;</span></span><br><span class="line"><span class="comment">            简单类型属性赋值</span></span><br><span class="line"><span class="comment">         &lt;/bean&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       2.byType(按类型注入) ： java类中引用类型的数据类型和spring容器中（配置文件）&lt;bean&gt;的class属性</span></span><br><span class="line"><span class="comment">                              是同源关系的，这样的bean能够赋值给引用类型</span></span><br><span class="line"><span class="comment">         同源就是一类的意思：</span></span><br><span class="line"><span class="comment">          1.java类中引用类型的数据类型和bean的class的值是一样的。</span></span><br><span class="line"><span class="comment">          2.java类中引用类型的数据类型和bean的class的值父子类关系的。</span></span><br><span class="line"><span class="comment">          3.java类中引用类型的数据类型和bean的class的值接口和实现类关系的</span></span><br><span class="line"><span class="comment">         语法：</span></span><br><span class="line"><span class="comment">         &lt;bean id=&quot;xx&quot; class=&quot;yyy&quot; autowire=&quot;byType&quot;&gt;</span></span><br><span class="line"><span class="comment">            简单类型属性赋值</span></span><br><span class="line"><span class="comment">         &lt;/bean&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         注意：在byType中， 在xml配置文件中声明bean只能有一个符合条件的，</span></span><br><span class="line"><span class="comment">              多余一个是错误的</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--byType--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myStudent&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ba05.Student&quot;</span>  <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张飒&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;26&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--引用类型--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;property name=&quot;school&quot; ref=&quot;mySchool&quot; /&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--声明School对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;mySchool&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ba05.School&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;人民大学&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;北京的海淀区&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--声明School的子类--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;bean id=&quot;primarySchool&quot; class=&quot;com.ba05.PrimarySchool&quot;&gt;</span></span><br><span class="line"><span class="comment">        &lt;property name=&quot;name&quot; value=&quot;北京小学&quot; /&gt;</span></span><br><span class="line"><span class="comment">        &lt;property name=&quot;address&quot; value=&quot;北京的大兴区&quot; /&gt;</span></span><br><span class="line"><span class="comment">    &lt;/bean&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String config=<span class="string">&quot;ba05/applicationContext.xml&quot;</span>;</span><br><span class="line">    ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(config);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从容器中获取Student对象</span></span><br><span class="line">    Student myStudent =  (Student) ac.getBean(<span class="string">&quot;myStudent&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;student对象=&quot;</span>+myStudent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-3-3-为应用指定多个-Spring-配置文件"><a href="#2-3-3-为应用指定多个-Spring-配置文件" class="headerlink" title="2.3.3.为应用指定多个 Spring 配置文件"></a>2.3.3.为应用指定多个 Spring 配置文件</h3><p>在实际应用里，随着应用规模的增加，系统中 Bean 数量也大量增加，导致配置文件变<br>得非常庞大、臃肿。为了避免这种情况的产生，提高配置文件的可读性与可维护性，可以将Spring 配置文件分解成多个配置文件。</p>
<p>包含关系的配置文件：<br>多个配置文件中有一个总文件，总配置文件将各其它子文件通过<code>&lt;import/&gt;</code>引入。在 Java代码中只需要使用总配置文件对容器进行初始化即可。</p>
<p>举例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">School</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;School&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, address=&#x27;&quot;</span> + address + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明一个引用类型</span></span><br><span class="line">    <span class="keyword">private</span> School school;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//System.out.println(&quot;spring会调用类的无参数构造方法创建对象&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//System.out.println(&quot;setName:&quot;+name);</span></span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//System.out.println(&quot;setAge:&quot;+age);</span></span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSchool</span><span class="params">(School school)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;setSchool:&quot;</span>+school);</span><br><span class="line">        <span class="keyword">this</span>.school = school;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, school=&quot;</span> + school +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>spring-school.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--School模块所有bean的声明， School模块的配置文件--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--声明School对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;mySchool&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ba06.School&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;航空大学&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;北京的海淀区&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>spring-student.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      student模块所有bean的声明</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--byType--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myStudent&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ba06.Student&quot;</span>  <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张飒&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;30&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--引用类型--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;property name=&quot;school&quot; ref=&quot;mySchool&quot; /&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>total.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">         包含关系的配置文件：</span></span><br><span class="line"><span class="comment">         spring-total表示主配置文件 ： 包含其他的配置文件的，主配置文件一般是不定义对象的。</span></span><br><span class="line"><span class="comment">         语法：&lt;import resource=&quot;其他配置文件的路径&quot; /&gt;</span></span><br><span class="line"><span class="comment">         关键字：&quot;classpath:&quot; 表示类路径（class文件所在的目录），</span></span><br><span class="line"><span class="comment">               在spring的配置文件中要指定其他文件的位置， 需要使用classpath，告诉spring到哪去加载读取文件。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--加载的是文件列表--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    &lt;import resource=&quot;classpath:ba06/spring-school.xml&quot; /&gt;</span></span><br><span class="line"><span class="comment">    &lt;import resource=&quot;classpath:ba06/spring-student.xml&quot; /&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">       在包含关系的配置文件中，可以通配符（*：表示任意字符）</span></span><br><span class="line"><span class="comment">       注意： 主的配置文件名称不能包含在通配符的范围内（不能叫做spring-total.xml）</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;classpath:ba06/spring-*.xml&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>测试:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="comment">//加载的是总的文件</span></span><br><span class="line">    String config= <span class="string">&quot;ba06/total.xml&quot;</span>;</span><br><span class="line">    ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(config);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从容器中获取Student对象</span></span><br><span class="line">    Student myStudent =  (Student) ac.getBean(<span class="string">&quot;myStudent&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;student对象=&quot;</span>+myStudent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-3-4-注入集合属性"><a href="#2-3-4-注入集合属性" class="headerlink" title="2.3.4.注入集合属性"></a>2.3.4.注入集合属性</h3><p>为了演示这些方式，我们在成员中将常见的一些集合都写出来，然后补充其 set 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> String[] strs;</span><br><span class="line"><span class="keyword">private</span> List&lt;String&gt; list;</span><br><span class="line"><span class="keyword">private</span> Set&lt;String&gt; set;</span><br><span class="line"><span class="keyword">private</span> Map&lt;String,String&gt; map;</span><br><span class="line"><span class="keyword">private</span> Properties props;</span><br></pre></td></tr></table></figure>
<p>在配置中也是很简单的，只需要按照下列格式写标签就可以了，可以自己测试一下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.ideal.service.impl.AccountServiceImpl&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;strs&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>王五<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>王五<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;set&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>王五<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;21&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;props&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;name&quot;</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;age&quot;</span>&gt;</span>21<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="3-基于注解的-DI"><a href="#3-基于注解的-DI" class="headerlink" title="3.基于注解的 DI"></a>3.基于注解的 DI</h1><p>对于 DI 使用注解，将不再需要在 Spring 配置文件中声明 bean 实例。Spring 中使用注解，需要在原有 Spring 运行环境基础上再做一些改变。<br>需要在 Spring 配置文件中配置组件扫描器，用于在指定的基本包中扫描注解。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--声明组件扫描器(component-scan),组件就是java对象</span></span><br><span class="line"><span class="comment">        base-package：指定注解在你的项目中的包名。</span></span><br><span class="line"><span class="comment">        component-scan工作方式： spring会扫描遍历base-package指定的包，</span></span><br><span class="line"><span class="comment">           把包中和子包中的所有类，找到类中的注解，按照注解的功能创建对象，或给属性赋值。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       加入了component-scan标签，配置文件的变化：</span></span><br><span class="line"><span class="comment">        1.加入一个新的约束文件spring-context.xsd</span></span><br><span class="line"><span class="comment">        2.给这个新的约束文件起个命名空间的名称</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.ba02&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>指定多个包的三种方式：</p>
<ul>
<li>使用多个 context:component-scan 指定不同的包路径</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;context:component-scan base-<span class="keyword">package</span>=<span class="string">&quot;com.ba02&quot;</span> /&gt;</span><br><span class="line">&lt;context:component-scan base-<span class="keyword">package</span>=<span class="string">&quot;com.ba03&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>指定 base-package 的值使用分隔符<br>分隔符可以使用逗号（，）分号（；）还可以使用空格，不建议使用空格。</li>
</ul>
<p>逗号分隔：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;context:component-scan base-<span class="keyword">package</span>=<span class="string">&quot;com.ba02,com.ba03&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>
<p>分号分隔：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;context:component-scan base-<span class="keyword">package</span>=<span class="string">&quot;com.ba02;com.ba03&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>base-package 是指定到父包名<br>base-package 的值表是基本包，容器启动会扫描包及其子包中的注解，当然也会扫描到子包下级的子包。所以 base-package 可以指定一个父包就可以。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;context:component-scan base-<span class="keyword">package</span>=<span class="string">&quot;com.bruce&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>
<p>或者最顶级的父包</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;context:component-scan base-<span class="keyword">package</span>=<span class="string">&quot;com&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>但不建议使用顶级的父包，扫描的路径比较多，导致容器启动时间变慢。指定到目标包和合适的。也就是注解所在包全路径。</p>
</blockquote>
<h2 id="3-1-定义-Bean-的注解-Component-掌握"><a href="#3-1-定义-Bean-的注解-Component-掌握" class="headerlink" title="3.1.定义 Bean 的注解@Component(掌握)"></a>3.1.定义 Bean 的注解@Component(掌握)</h2><p>需要在类上使用注解@Component，该注解的 value 属性用于指定该 bean 的 id 值。<br><img src="https://img-blog.csdnimg.cn/20201229115541700.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>另外，Spring 还提供了 3 个创建对象的注解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">➢ <span class="meta">@Repository</span> 用于对 DAO 实现类进行注解</span><br><span class="line">➢ <span class="meta">@Service</span> 用于对 Service 实现类进行注解</span><br><span class="line">➢ <span class="meta">@Controller</span> 用于对 Controller 实现类进行注解</span><br></pre></td></tr></table></figure>

<p>这三个注解与@Component 都可以创建对象，但这三个注解还有其他的含义，@Service<br>创建业务层对象，业务层对象可以加入事务功能，@Controller 注解创建的对象可以作为处<br>理器接收用户的请求。</p>
<p>@Repository，@Service，@Controller 是对@Component 注解的细化，标注不同层的对<br>象。即持久层对象，业务层对象，控制层对象。</p>
<p>@Component 不指定 value 属性，bean 的 id 是类名的首字母小写。<br><img src="https://img-blog.csdnimg.cn/20201229115631213.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201229115644179.png" alt="在这里插入图片描述"></p>
<h2 id="3-2-简单类型属性注入-Value-掌握"><a href="#3-2-简单类型属性注入-Value-掌握" class="headerlink" title="3.2.简单类型属性注入@Value(掌握)"></a>3.2.简单类型属性注入@Value(掌握)</h2><p>需要在属性上使用注解@Value，该注解的 value 属性用于指定要注入的值。使用该注解完成属性注入时，类中无需 setter。当然，若属性有 setter，则也可将其加<br>到 setter 上。</p>
<p><strong>举例：</strong><br><img src="https://img-blog.csdnimg.cn/20201229115728412.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="3-3-byType-自动注入-Autowired-掌握"><a href="#3-3-byType-自动注入-Autowired-掌握" class="headerlink" title="3.3.byType 自动注入@Autowired(掌握)"></a>3.3.byType 自动注入@Autowired(掌握)</h2><p>需要在引用属性上使用注解@Autowired，该注解默认使用按类型自动装配 Bean 的方式。</p>
<p>使用该注解完成属性注入时，类中无需 setter。当然，若属性有 setter，则也可将其加到 setter 上。</p>
<p>举例：<br><img src="https://img-blog.csdnimg.cn/20201229115808172.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201229115817870.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="3-4-byType-自动注入-Autowired-掌握"><a href="#3-4-byType-自动注入-Autowired-掌握" class="headerlink" title="3.4.byType 自动注入@Autowired(掌握)"></a>3.4.byType 自动注入@Autowired(掌握)</h2><p>需要在引用属性上使用注解@Autowired，该注解默认使用按类型自动装配 Bean 的方式。</p>
<p>使用该注解完成属性注入时，类中无需 setter。当然，若属性有 setter，则也可将其加到 setter 上。</p>
<p>举例：<br><img src="https://img-blog.csdnimg.cn/20201229115910404.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201229115919980.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="3-5-byName-自动注入-Autowired-与-Qualifier-掌握"><a href="#3-5-byName-自动注入-Autowired-与-Qualifier-掌握" class="headerlink" title="3.5.byName 自动注入@Autowired 与@Qualifier(掌握)"></a>3.5.byName 自动注入@Autowired 与@Qualifier(掌握)</h2><p>需要在引用属性上联合使用注解@Autowired 与@Qualifier。@Qualifier 的 value 属性用于指定要匹配的 Bean 的 id 值。类中无需 set 方法，也可加到 set 方法上。</p>
<p>举例：<br><img src="https://img-blog.csdnimg.cn/20201229115958948.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>@Autowired 还有一个属性 required，默认值为 true，表示当匹配失败后，会终止程序运行。若将其值设置为 false，则匹配失败，将被忽略，未匹配的属性值为 null。<br><img src="https://img-blog.csdnimg.cn/20201229120020355.png" alt="在这里插入图片描述"></p>
<h2 id="3-6-JDK-注解-Resource-自动注入-掌握"><a href="#3-6-JDK-注解-Resource-自动注入-掌握" class="headerlink" title="3.6.JDK 注解@Resource 自动注入(掌握)"></a>3.6.JDK 注解@Resource 自动注入(掌握)</h2><p>Spring提供了对 jdk中@Resource注解的支持。@Resource 注解既可以按名称匹配Bean，也可以按类型匹配 Bean。默认是<code>按名称注入</code>。使用该注解，要求 JDK 必须是 6 及以上版本。</p>
<p>@Resource 可在属性上，也可在 set 方法上。</p>
<h2 id="3-6-1-byType-注入引用类型属性"><a href="#3-6-1-byType-注入引用类型属性" class="headerlink" title="3.6.1.byType 注入引用类型属性"></a>3.6.1.byType 注入引用类型属性</h2><p>@Resource 注解若不带任何参数，采用默认按名称的方式注入，按名称不能注入 bean，则会按照类型进行 Bean 的匹配注入。</p>
<p>举例：<br><img src="https://img-blog.csdnimg.cn/20201229120136704.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="3-6-2-byName-注入引用类型属性"><a href="#3-6-2-byName-注入引用类型属性" class="headerlink" title="3.6.2.byName 注入引用类型属性"></a>3.6.2.byName 注入引用类型属性</h2><p>@Resource 注解指定其 name 属性，则 name 的值即为按照名称进行匹配的 Bean 的 id。<br><img src="https://img-blog.csdnimg.cn/20201229120157768.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWNlTGl1X2NvZGU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h1 id="4-注解与XML的对比"><a href="#4-注解与XML的对比" class="headerlink" title="4.注解与XML的对比"></a>4.注解与XML的对比</h1><p><strong>注解优点是</strong>：</p>
<ul>
<li>方便</li>
<li>直观</li>
<li>高效（代码少，没有配置文件的书写那么复杂）。</li>
</ul>
<p><strong>注解缺点是</strong>：</p>
<ul>
<li>以硬编码的方式写入到 Java 代码中，修改是需要重新编译代码的。</li>
</ul>
<p><strong>XML 方式优点是：</strong></p>
<ul>
<li> 配置和代码是分离的</li>
<li> 在 xml 中做修改，无需编译代码，只需重启服务器即可将新的配置加载。</li>
</ul>
<p><strong>xml 的缺点是：</strong></p>
<ul>
<li>编写麻烦，效率低，大型项目过于复杂。</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>Spring框架</tag>
      </tags>
  </entry>
</search>
